# coding: UTF-8
import sys
bstack1l11ll1_opy_ = sys.version_info [0] == 2
bstack1llll1_opy_ = 2048
bstack11l_opy_ = 7
def bstack1ll1_opy_ (bstack1l11l11_opy_):
    global bstack11l11l1_opy_
    bstack1ll1111_opy_ = ord (bstack1l11l11_opy_ [-1])
    bstack1111l_opy_ = bstack1l11l11_opy_ [:-1]
    bstack111lll1_opy_ = bstack1ll1111_opy_ % len (bstack1111l_opy_)
    bstackl_opy_ = bstack1111l_opy_ [:bstack111lll1_opy_] + bstack1111l_opy_ [bstack111lll1_opy_:]
    if bstack1l11ll1_opy_:
        bstack1ll1l1l_opy_ = unicode () .join ([unichr (ord (char) - bstack1llll1_opy_ - (bstack1lll11l_opy_ + bstack1ll1111_opy_) % bstack11l_opy_) for bstack1lll11l_opy_, char in enumerate (bstackl_opy_)])
    else:
        bstack1ll1l1l_opy_ = str () .join ([chr (ord (char) - bstack1llll1_opy_ - (bstack1lll11l_opy_ + bstack1ll1111_opy_) % bstack11l_opy_) for bstack1lll11l_opy_, char in enumerate (bstackl_opy_)])
    return eval (bstack1ll1l1l_opy_)
import atexit
import datetime
import inspect
import logging
import signal
import threading
from uuid import uuid4
from bstack_utils.measure import bstack11ll1l111_opy_
from bstack_utils.percy_sdk import PercySDK
import pytest
from packaging import version
from browserstack_sdk.__init__ import (bstack1111ll1ll_opy_, bstack1l111ll11_opy_, update, bstack1l1ll11ll1_opy_,
                                       bstack1l11111lll_opy_, bstack1lllllll11_opy_, bstack111ll11ll_opy_, bstack1111l1lll_opy_,
                                       bstack11lllll1l1_opy_, bstack1lll11lll1_opy_, bstack1111l111_opy_, bstack1l11l11111_opy_,
                                       bstack1l1l1ll11_opy_, getAccessibilityResults, getAccessibilityResultsSummary, perform_scan, bstack11l11lll1_opy_)
from browserstack_sdk.bstack1ll11ll11_opy_ import bstack1l1111l111_opy_
from browserstack_sdk._version import __version__
from bstack_utils import bstack1ll1l111_opy_
from bstack_utils.capture import bstack11l1llll1l_opy_
from bstack_utils.config import Config
from bstack_utils.percy import *
from bstack_utils.constants import bstack11l1lll11_opy_, bstack1l11l11l_opy_, bstack1lll11l111_opy_, \
    bstack1llllllll_opy_
from bstack_utils.helper import bstack111lllll1_opy_, bstack1lllll11ll1_opy_, bstack11l11l1lll_opy_, bstack1l1l111l1_opy_, bstack1lllll1l111_opy_, bstack1l11l1ll1l_opy_, \
    bstack1111111l1l_opy_, \
    bstack1111111ll1_opy_, bstack1l1111l11_opy_, bstack1ll11lll_opy_, bstack1llll11l111_opy_, bstack1l1l1l111l_opy_, Notset, \
    bstack1l11llllll_opy_, bstack1lllll11111_opy_, bstack1llll111ll1_opy_, Result, bstack1lllllll1l1_opy_, bstack1lllll1ll11_opy_, bstack11l11llll1_opy_, \
    bstack1l1111l11l_opy_, bstack1l1ll1l11l_opy_, bstack1l1lll1l_opy_, bstack1lllll1l1l1_opy_
from bstack_utils.bstack1lll1l1l11l_opy_ import bstack1lll1ll1ll1_opy_
from bstack_utils.messages import bstack11l11l11l_opy_, bstack11ll11l111_opy_, bstack1l1l111111_opy_, bstack11111l1l1_opy_, bstack1ll1l1llll_opy_, \
    bstack1ll11l11l1_opy_, bstack1lll1llll1_opy_, bstack1llll11ll1_opy_, bstack1ll11lllll_opy_, bstack1l111llll1_opy_, \
    bstack1lll111l_opy_, bstack1l1l11ll_opy_
from bstack_utils.proxy import bstack1ll1llllll_opy_, bstack1lll11ll_opy_
from bstack_utils.bstack11lll1ll_opy_ import bstack1ll11llll1l_opy_, bstack1ll11lll111_opy_, bstack1ll11llll11_opy_, bstack1ll11llllll_opy_, \
    bstack1ll11ll1ll1_opy_, bstack1ll11ll1l1l_opy_, bstack1ll11lll11l_opy_, bstack1llll1l11_opy_, bstack1ll1l111111_opy_
from bstack_utils.bstack11lll1ll1_opy_ import bstack1llll11lll_opy_
from bstack_utils.bstack11111l1ll_opy_ import bstack1lll1111l1_opy_, bstack11ll1l111l_opy_, bstack1l1l11l1_opy_, \
    bstack1111ll1l_opy_, bstack111lll11l_opy_
from bstack_utils.bstack11l1l1ll11_opy_ import bstack11l1ll111l_opy_
from bstack_utils.bstack11l1l11l1l_opy_ import bstack1lll11l1_opy_
import bstack_utils.bstack111ll1l111_opy_ as bstack111lll1l1_opy_
from bstack_utils.bstack11l1l111ll_opy_ import bstack11lll111_opy_
from bstack_utils.bstack1llll11111_opy_ import bstack1llll11111_opy_
from browserstack_sdk.__init__ import bstack1ll1ll1ll1_opy_
bstack1lll11ll1_opy_ = None
bstack11ll1llll1_opy_ = None
bstack1l1l1l1l1_opy_ = None
bstack11llllllll_opy_ = None
bstack1lllll1ll1_opy_ = None
bstack11ll1l1ll_opy_ = None
bstack1lll111111_opy_ = None
bstack1l1l11lll_opy_ = None
bstack1l11l1l1_opy_ = None
bstack1l1lll11l1_opy_ = None
bstack111111l1l_opy_ = None
bstack1ll111111_opy_ = None
bstack1l1l1l1lll_opy_ = None
bstack111111l11_opy_ = bstack1ll1_opy_ (u"ࠨࠩᢲ")
CONFIG = {}
bstack111l11l11_opy_ = False
bstack11lll1l1ll_opy_ = bstack1ll1_opy_ (u"ࠩࠪᢳ")
bstack1ll11lll1_opy_ = bstack1ll1_opy_ (u"ࠪࠫᢴ")
bstack1lllllllll_opy_ = False
bstack1ll11l1l1_opy_ = []
bstack1ll1l11l11_opy_ = bstack11l1lll11_opy_
bstack1l1ll1l1l11_opy_ = bstack1ll1_opy_ (u"ࠫࡵࡿࡴࡦࡵࡷࠫᢵ")
bstack111l1l1ll_opy_ = {}
bstack1l1l11111l_opy_ = None
bstack11ll11ll11_opy_ = False
logger = bstack1ll1l111_opy_.get_logger(__name__, bstack1ll1l11l11_opy_)
store = {
    bstack1ll1_opy_ (u"ࠬࡩࡵࡳࡴࡨࡲࡹࡥࡨࡰࡱ࡮ࡣࡺࡻࡩࡥࠩᢶ"): []
}
bstack1l1ll1ll1l1_opy_ = False
try:
    from playwright.sync_api import (
        BrowserContext,
        Page
    )
except:
    pass
import json
_111lll1lll_opy_ = {}
current_test_uuid = None
def bstack11ll11l1ll_opy_(page, bstack11ll111l_opy_):
    try:
        page.evaluate(bstack1ll1_opy_ (u"ࠨ࡟ࠡ࠿ࡁࠤࢀࢃࠢᢷ"),
                      bstack1ll1_opy_ (u"ࠧࡣࡴࡲࡻࡸ࡫ࡲࡴࡶࡤࡧࡰࡥࡥࡹࡧࡦࡹࡹࡵࡲ࠻ࠢࡾࠦࡦࡩࡴࡪࡱࡱࠦ࠿ࠦࠢࡴࡧࡷࡗࡪࡹࡳࡪࡱࡱࡒࡦࡳࡥࠣ࠮ࠣࠦࡦࡸࡧࡶ࡯ࡨࡲࡹࡹࠢ࠻ࠢࡾࠦࡳࡧ࡭ࡦࠤ࠽ࠫᢸ") + json.dumps(
                          bstack11ll111l_opy_) + bstack1ll1_opy_ (u"ࠣࡿࢀࠦᢹ"))
    except Exception as e:
        print(bstack1ll1_opy_ (u"ࠤࡨࡼࡨ࡫ࡰࡵ࡫ࡲࡲࠥ࡯࡮ࠡࡲ࡯ࡥࡾࡽࡲࡪࡩ࡫ࡸࠥࡹࡥࡴࡵ࡬ࡳࡳࠦ࡮ࡢ࡯ࡨࠤࢀࢃࠢᢺ"), e)
def bstack1lll11lll_opy_(page, message, level):
    try:
        page.evaluate(bstack1ll1_opy_ (u"ࠥࡣࠥࡃ࠾ࠡࡽࢀࠦᢻ"), bstack1ll1_opy_ (u"ࠫࡧࡸ࡯ࡸࡵࡨࡶࡸࡺࡡࡤ࡭ࡢࡩࡽ࡫ࡣࡶࡶࡲࡶ࠿ࠦࡻࠣࡣࡦࡸ࡮ࡵ࡮ࠣ࠼ࠣࠦࡦࡴ࡮ࡰࡶࡤࡸࡪࠨࠬࠡࠤࡤࡶ࡬ࡻ࡭ࡦࡰࡷࡷࠧࡀࠠࡼࠤࡧࡥࡹࡧࠢ࠻ࠩᢼ") + json.dumps(
            message) + bstack1ll1_opy_ (u"ࠬ࠲ࠢ࡭ࡧࡹࡩࡱࠨ࠺ࠨᢽ") + json.dumps(level) + bstack1ll1_opy_ (u"࠭ࡽࡾࠩᢾ"))
    except Exception as e:
        print(bstack1ll1_opy_ (u"ࠢࡦࡺࡦࡩࡵࡺࡩࡰࡰࠣ࡭ࡳࠦࡰ࡭ࡣࡼࡻࡷ࡯ࡧࡩࡶࠣࡥࡳࡴ࡯ࡵࡣࡷ࡭ࡴࡴࠠࡼࡿࠥᢿ"), e)
def pytest_configure(config):
    bstack111l1l11_opy_ = Config.bstack1lll1lll_opy_()
    config.args = bstack1lll11l1_opy_.bstack1l1lll11111_opy_(config.args)
    bstack111l1l11_opy_.bstack1l11l1111l_opy_(bstack1l1lll1l_opy_(config.getoption(bstack1ll1_opy_ (u"ࠨࡵ࡮࡭ࡵ࡙ࡥࡴࡵ࡬ࡳࡳ࡙ࡴࡢࡶࡸࡷࠬᣀ"))))
@pytest.hookimpl(hookwrapper=True)
def pytest_runtest_makereport(item, call):
    outcome = yield
    bstack1l1ll111l11_opy_ = item.config.getoption(bstack1ll1_opy_ (u"ࠩࡶ࡯࡮ࡶࡓࡦࡵࡶ࡭ࡴࡴࡎࡢ࡯ࡨࠫᣁ"))
    plugins = item.config.getoption(bstack1ll1_opy_ (u"ࠥࡴࡱࡻࡧࡪࡰࡶࠦᣂ"))
    report = outcome.get_result()
    bstack1l1ll1l111l_opy_(item, call, report)
    if bstack1ll1_opy_ (u"ࠦࡵࡿࡴࡦࡵࡷࡣࡧࡸ࡯ࡸࡵࡨࡶࡸࡺࡡࡤ࡭ࡳࡰࡺ࡭ࡩ࡯ࠤᣃ") not in plugins or bstack1l1l1l111l_opy_():
        return
    summary = []
    driver = getattr(item, bstack1ll1_opy_ (u"ࠧࡥࡤࡳ࡫ࡹࡩࡷࠨᣄ"), None)
    page = getattr(item, bstack1ll1_opy_ (u"ࠨ࡟ࡱࡣࡪࡩࠧᣅ"), None)
    try:
        if (driver == None or driver.session_id == None):
            driver = threading.current_thread().bstackSessionDriver
    except:
        pass
    item._driver = driver
    if (driver is not None):
        bstack1l1ll1111ll_opy_(item, report, summary, bstack1l1ll111l11_opy_)
    if (page is not None):
        bstack1l1ll1l11ll_opy_(item, report, summary, bstack1l1ll111l11_opy_)
def bstack1l1ll1111ll_opy_(item, report, summary, bstack1l1ll111l11_opy_):
    if report.when == bstack1ll1_opy_ (u"ࠧࡴࡧࡷࡹࡵ࠭ᣆ") and report.skipped:
        bstack1ll1l111111_opy_(report)
    if report.when in [bstack1ll1_opy_ (u"ࠣࡵࡨࡸࡺࡶࠢᣇ"), bstack1ll1_opy_ (u"ࠤࡷࡩࡦࡸࡤࡰࡹࡱࠦᣈ")]:
        return
    if not bstack1lllll1l111_opy_():
        return
    try:
        if (str(bstack1l1ll111l11_opy_).lower() != bstack1ll1_opy_ (u"ࠪࡸࡷࡻࡥࠨᣉ")):
            item._driver.execute_script(
                bstack1ll1_opy_ (u"ࠫࡧࡸ࡯ࡸࡵࡨࡶࡸࡺࡡࡤ࡭ࡢࡩࡽ࡫ࡣࡶࡶࡲࡶ࠿ࠦࡻࠣࡣࡦࡸ࡮ࡵ࡮ࠣ࠼ࠣࠦࡸ࡫ࡴࡔࡧࡶࡷ࡮ࡵ࡮ࡏࡣࡰࡩࠧ࠲ࠠࠣࡣࡵ࡫ࡺࡳࡥ࡯ࡶࡶࠦ࠿ࠦࡻࠣࡰࡤࡱࡪࠨ࠺ࠡࠩᣊ") + json.dumps(
                    report.nodeid) + bstack1ll1_opy_ (u"ࠬࢃࡽࠨᣋ"))
        os.environ[bstack1ll1_opy_ (u"࠭ࡐ࡚ࡖࡈࡗ࡙ࡥࡔࡆࡕࡗࡣࡓࡇࡍࡆࠩᣌ")] = report.nodeid
    except Exception as e:
        summary.append(
            bstack1ll1_opy_ (u"ࠢࡘࡃࡕࡒࡎࡔࡇ࠻ࠢࡉࡥ࡮ࡲࡥࡥࠢࡷࡳࠥࡳࡡࡳ࡭ࠣࡷࡪࡹࡳࡪࡱࡱࠤࡳࡧ࡭ࡦ࠼ࠣࡿ࠵ࢃࠢᣍ").format(e)
        )
    passed = report.passed or report.skipped or (report.failed and hasattr(report, bstack1ll1_opy_ (u"ࠣࡹࡤࡷࡽ࡬ࡡࡪ࡮ࠥᣎ")))
    bstack111l1l1l_opy_ = bstack1ll1_opy_ (u"ࠤࠥᣏ")
    bstack1ll1l111111_opy_(report)
    if not passed:
        try:
            bstack111l1l1l_opy_ = report.longrepr.reprcrash
        except Exception as e:
            summary.append(
                bstack1ll1_opy_ (u"࡛ࠥࡆࡘࡎࡊࡐࡊ࠾ࠥࡌࡡࡪ࡮ࡨࡨࠥࡺ࡯ࠡࡦࡨࡸࡪࡸ࡭ࡪࡰࡨࠤ࡫ࡧࡩ࡭ࡷࡵࡩࠥࡸࡥࡢࡵࡲࡲ࠿ࠦࡻ࠱ࡿࠥᣐ").format(e)
            )
        try:
            if (threading.current_thread().bstackTestErrorMessages == None):
                threading.current_thread().bstackTestErrorMessages = []
        except Exception as e:
            threading.current_thread().bstackTestErrorMessages = []
        threading.current_thread().bstackTestErrorMessages.append(str(bstack111l1l1l_opy_))
    if not report.skipped:
        passed = report.passed or (report.failed and hasattr(report, bstack1ll1_opy_ (u"ࠦࡼࡧࡳࡹࡨࡤ࡭ࡱࠨᣑ")))
        bstack111l1l1l_opy_ = bstack1ll1_opy_ (u"ࠧࠨᣒ")
        if not passed:
            try:
                bstack111l1l1l_opy_ = report.longrepr.reprcrash
            except Exception as e:
                summary.append(
                    bstack1ll1_opy_ (u"ࠨࡗࡂࡔࡑࡍࡓࡍ࠺ࠡࡈࡤ࡭ࡱ࡫ࡤࠡࡶࡲࠤࡩ࡫ࡴࡦࡴࡰ࡭ࡳ࡫ࠠࡧࡣ࡬ࡰࡺࡸࡥࠡࡴࡨࡥࡸࡵ࡮࠻ࠢࡾ࠴ࢂࠨᣓ").format(e)
                )
            try:
                if (threading.current_thread().bstackTestErrorMessages == None):
                    threading.current_thread().bstackTestErrorMessages = []
            except Exception as e:
                threading.current_thread().bstackTestErrorMessages = []
            threading.current_thread().bstackTestErrorMessages.append(str(bstack111l1l1l_opy_))
        try:
            if passed:
                item._driver.execute_script(
                    bstack1ll1_opy_ (u"ࠧࡣࡴࡲࡻࡸ࡫ࡲࡴࡶࡤࡧࡰࡥࡥࡹࡧࡦࡹࡹࡵࡲ࠻ࠢࡾࡠࠏࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠨࡡࡤࡶ࡬ࡳࡳࠨ࠺ࠡࠤࡤࡲࡳࡵࡴࡢࡶࡨࠦ࠱ࠦ࡜ࠋࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠤࡤࡶ࡬ࡻ࡭ࡦࡰࡷࡷࠧࡀࠠࡼ࡞ࠍࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠣ࡮ࡨࡺࡪࡲࠢ࠻ࠢࠥ࡭ࡳ࡬࡯ࠣ࠮ࠣࡠࠏࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠥࡨࡦࡺࡡࠣ࠼ࠣࠫᣔ")
                    + json.dumps(bstack1ll1_opy_ (u"ࠣࡲࡤࡷࡸ࡫ࡤࠢࠤᣕ"))
                    + bstack1ll1_opy_ (u"ࠤ࡟ࠎࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࢂࡢࠊࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࢁࠧᣖ")
                )
            else:
                item._driver.execute_script(
                    bstack1ll1_opy_ (u"ࠪࡦࡷࡵࡷࡴࡧࡵࡷࡹࡧࡣ࡬ࡡࡨࡼࡪࡩࡵࡵࡱࡵ࠾ࠥࢁ࡜ࠋࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠤࡤࡧࡹ࡯࡯࡯ࠤ࠽ࠤࠧࡧ࡮࡯ࡱࡷࡥࡹ࡫ࠢ࠭ࠢ࡟ࠎࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠧࡧࡲࡨࡷࡰࡩࡳࡺࡳࠣ࠼ࠣࡿࡡࠐࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠦࡱ࡫ࡶࡦ࡮ࠥ࠾ࠥࠨࡥࡳࡴࡲࡶࠧ࠲ࠠ࡝ࠌࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠢࡥࡣࡷࡥࠧࡀࠠࠨᣗ")
                    + json.dumps(str(bstack111l1l1l_opy_))
                    + bstack1ll1_opy_ (u"ࠦࡡࠐࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࡽ࡝ࠌࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࢃࠢᣘ")
                )
        except Exception as e:
            summary.append(bstack1ll1_opy_ (u"ࠧ࡝ࡁࡓࡐࡌࡒࡌࡀࠠࡇࡣ࡬ࡰࡪࡪࠠࡵࡱࠣࡥࡳࡴ࡯ࡵࡣࡷࡩ࠿ࠦࡻ࠱ࡿࠥᣙ").format(e))
def bstack1l1ll1ll111_opy_(test_name, error_message):
    try:
        bstack1l1ll1l1ll1_opy_ = []
        bstack1lll1l111l_opy_ = os.environ.get(bstack1ll1_opy_ (u"࠭ࡂࡓࡑ࡚ࡗࡊࡘࡓࡕࡃࡆࡏࡤࡖࡌࡂࡖࡉࡓࡗࡓ࡟ࡊࡐࡇࡉ࡝࠭ᣚ"), bstack1ll1_opy_ (u"ࠧ࠱ࠩᣛ"))
        bstack11ll11111_opy_ = {bstack1ll1_opy_ (u"ࠨࡰࡤࡱࡪ࠭ᣜ"): test_name, bstack1ll1_opy_ (u"ࠩࡨࡶࡷࡵࡲࠨᣝ"): error_message, bstack1ll1_opy_ (u"ࠪ࡭ࡳࡪࡥࡹࠩᣞ"): bstack1lll1l111l_opy_}
        bstack1l1ll1l1111_opy_ = os.path.join(tempfile.gettempdir(), bstack1ll1_opy_ (u"ࠫࡵࡽ࡟ࡱࡻࡷࡩࡸࡺ࡟ࡦࡴࡵࡳࡷࡥ࡬ࡪࡵࡷ࠲࡯ࡹ࡯࡯ࠩᣟ"))
        if os.path.exists(bstack1l1ll1l1111_opy_):
            with open(bstack1l1ll1l1111_opy_) as f:
                bstack1l1ll1l1ll1_opy_ = json.load(f)
        bstack1l1ll1l1ll1_opy_.append(bstack11ll11111_opy_)
        with open(bstack1l1ll1l1111_opy_, bstack1ll1_opy_ (u"ࠬࡽࠧᣠ")) as f:
            json.dump(bstack1l1ll1l1ll1_opy_, f)
    except Exception as e:
        logger.debug(bstack1ll1_opy_ (u"࠭ࡅࡳࡴࡲࡶࠥ࡯࡮ࠡࡲࡨࡶࡸ࡯ࡳࡵ࡫ࡱ࡫ࠥࡶ࡬ࡢࡻࡺࡶ࡮࡭ࡨࡵࠢࡳࡽࡹ࡫ࡳࡵࠢࡨࡶࡷࡵࡲࡴ࠼ࠣࠫᣡ") + str(e))
def bstack1l1ll1l11ll_opy_(item, report, summary, bstack1l1ll111l11_opy_):
    if report.when in [bstack1ll1_opy_ (u"ࠢࡴࡧࡷࡹࡵࠨᣢ"), bstack1ll1_opy_ (u"ࠣࡶࡨࡥࡷࡪ࡯ࡸࡰࠥᣣ")]:
        return
    if (str(bstack1l1ll111l11_opy_).lower() != bstack1ll1_opy_ (u"ࠩࡷࡶࡺ࡫ࠧᣤ")):
        bstack11ll11l1ll_opy_(item._page, report.nodeid)
    passed = report.passed or report.skipped or (report.failed and hasattr(report, bstack1ll1_opy_ (u"ࠥࡻࡦࡹࡸࡧࡣ࡬ࡰࠧᣥ")))
    bstack111l1l1l_opy_ = bstack1ll1_opy_ (u"ࠦࠧᣦ")
    bstack1ll1l111111_opy_(report)
    if not report.skipped:
        if not passed:
            try:
                bstack111l1l1l_opy_ = report.longrepr.reprcrash
            except Exception as e:
                summary.append(
                    bstack1ll1_opy_ (u"ࠧ࡝ࡁࡓࡐࡌࡒࡌࡀࠠࡇࡣ࡬ࡰࡪࡪࠠࡵࡱࠣࡨࡪࡺࡥࡳ࡯࡬ࡲࡪࠦࡦࡢ࡫࡯ࡹࡷ࡫ࠠࡳࡧࡤࡷࡴࡴ࠺ࠡࡽ࠳ࢁࠧᣧ").format(e)
                )
        try:
            if passed:
                bstack111lll11l_opy_(getattr(item, bstack1ll1_opy_ (u"࠭࡟ࡱࡣࡪࡩࠬᣨ"), None), bstack1ll1_opy_ (u"ࠢࡱࡣࡶࡷࡪࡪࠢᣩ"))
            else:
                error_message = bstack1ll1_opy_ (u"ࠨࠩᣪ")
                if bstack111l1l1l_opy_:
                    bstack1lll11lll_opy_(item._page, str(bstack111l1l1l_opy_), bstack1ll1_opy_ (u"ࠤࡨࡶࡷࡵࡲࠣᣫ"))
                    bstack111lll11l_opy_(getattr(item, bstack1ll1_opy_ (u"ࠪࡣࡵࡧࡧࡦࠩᣬ"), None), bstack1ll1_opy_ (u"ࠦ࡫ࡧࡩ࡭ࡧࡧࠦᣭ"), str(bstack111l1l1l_opy_))
                    error_message = str(bstack111l1l1l_opy_)
                else:
                    bstack111lll11l_opy_(getattr(item, bstack1ll1_opy_ (u"ࠬࡥࡰࡢࡩࡨࠫᣮ"), None), bstack1ll1_opy_ (u"ࠨࡦࡢ࡫࡯ࡩࡩࠨᣯ"))
                bstack1l1ll1ll111_opy_(report.nodeid, error_message)
        except Exception as e:
            summary.append(bstack1ll1_opy_ (u"ࠢࡘࡃࡕࡒࡎࡔࡇ࠻ࠢࡉࡥ࡮ࡲࡥࡥࠢࡷࡳࠥࡻࡰࡥࡣࡷࡩࠥࡹࡥࡴࡵ࡬ࡳࡳࠦࡳࡵࡣࡷࡹࡸࡀࠠࡼ࠲ࢀࠦᣰ").format(e))
try:
    from typing import Generator
    import pytest_playwright.pytest_playwright as p
    @pytest.fixture
    def page(context: BrowserContext, request: pytest.FixtureRequest) -> Generator[Page, None, None]:
        page = context.new_page()
        request.node._page = page
        yield page
except:
    pass
def pytest_addoption(parser):
    parser.addoption(bstack1ll1_opy_ (u"ࠣ࠯࠰ࡷࡰ࡯ࡰࡔࡧࡶࡷ࡮ࡵ࡮ࡏࡣࡰࡩࠧᣱ"), default=bstack1ll1_opy_ (u"ࠤࡉࡥࡱࡹࡥࠣᣲ"), help=bstack1ll1_opy_ (u"ࠥࡅࡺࡺ࡯࡮ࡣࡷ࡭ࡨࠦࡳࡦࡶࠣࡷࡪࡹࡳࡪࡱࡱࠤࡳࡧ࡭ࡦࠤᣳ"))
    parser.addoption(bstack1ll1_opy_ (u"ࠦ࠲࠳ࡳ࡬࡫ࡳࡗࡪࡹࡳࡪࡱࡱࡗࡹࡧࡴࡶࡵࠥᣴ"), default=bstack1ll1_opy_ (u"ࠧࡌࡡ࡭ࡵࡨࠦᣵ"), help=bstack1ll1_opy_ (u"ࠨࡁࡶࡶࡲࡱࡦࡺࡩࡤࠢࡶࡩࡹࠦࡳࡦࡵࡶ࡭ࡴࡴࠠ࡯ࡣࡰࡩࠧ᣶"))
    try:
        import pytest_selenium.pytest_selenium
    except:
        parser.addoption(bstack1ll1_opy_ (u"ࠢ࠮࠯ࡧࡶ࡮ࡼࡥࡳࠤ᣷"), action=bstack1ll1_opy_ (u"ࠣࡵࡷࡳࡷ࡫ࠢ᣸"), default=bstack1ll1_opy_ (u"ࠤࡦ࡬ࡷࡵ࡭ࡦࠤ᣹"),
                         help=bstack1ll1_opy_ (u"ࠥࡈࡷ࡯ࡶࡦࡴࠣࡸࡴࠦࡲࡶࡰࠣࡸࡪࡹࡴࡴࠤ᣺"))
def bstack11l1l1ll1l_opy_(log):
    if not (log[bstack1ll1_opy_ (u"ࠫࡲ࡫ࡳࡴࡣࡪࡩࠬ᣻")] and log[bstack1ll1_opy_ (u"ࠬࡳࡥࡴࡵࡤ࡫ࡪ࠭᣼")].strip()):
        return
    active = bstack11l1l111l1_opy_()
    log = {
        bstack1ll1_opy_ (u"࠭࡬ࡦࡸࡨࡰࠬ᣽"): log[bstack1ll1_opy_ (u"ࠧ࡭ࡧࡹࡩࡱ࠭᣾")],
        bstack1ll1_opy_ (u"ࠨࡶ࡬ࡱࡪࡹࡴࡢ࡯ࡳࠫ᣿"): bstack11l11l1lll_opy_().isoformat() + bstack1ll1_opy_ (u"ࠩ࡝ࠫᤀ"),
        bstack1ll1_opy_ (u"ࠪࡱࡪࡹࡳࡢࡩࡨࠫᤁ"): log[bstack1ll1_opy_ (u"ࠫࡲ࡫ࡳࡴࡣࡪࡩࠬᤂ")],
    }
    if active:
        if active[bstack1ll1_opy_ (u"ࠬࡺࡹࡱࡧࠪᤃ")] == bstack1ll1_opy_ (u"࠭ࡨࡰࡱ࡮ࠫᤄ"):
            log[bstack1ll1_opy_ (u"ࠧࡩࡱࡲ࡯ࡤࡸࡵ࡯ࡡࡸࡹ࡮ࡪࠧᤅ")] = active[bstack1ll1_opy_ (u"ࠨࡪࡲࡳࡰࡥࡲࡶࡰࡢࡹࡺ࡯ࡤࠨᤆ")]
        elif active[bstack1ll1_opy_ (u"ࠩࡷࡽࡵ࡫ࠧᤇ")] == bstack1ll1_opy_ (u"ࠪࡸࡪࡹࡴࠨᤈ"):
            log[bstack1ll1_opy_ (u"ࠫࡹ࡫ࡳࡵࡡࡵࡹࡳࡥࡵࡶ࡫ࡧࠫᤉ")] = active[bstack1ll1_opy_ (u"ࠬࡺࡥࡴࡶࡢࡶࡺࡴ࡟ࡶࡷ࡬ࡨࠬᤊ")]
    bstack11lll111_opy_.bstack11lll1l11l_opy_([log])
def bstack11l1l111l1_opy_():
    if len(store[bstack1ll1_opy_ (u"࠭ࡣࡶࡴࡵࡩࡳࡺ࡟ࡩࡱࡲ࡯ࡤࡻࡵࡪࡦࠪᤋ")]) > 0 and store[bstack1ll1_opy_ (u"ࠧࡤࡷࡵࡶࡪࡴࡴࡠࡪࡲࡳࡰࡥࡵࡶ࡫ࡧࠫᤌ")][-1]:
        return {
            bstack1ll1_opy_ (u"ࠨࡶࡼࡴࡪ࠭ᤍ"): bstack1ll1_opy_ (u"ࠩ࡫ࡳࡴࡱࠧᤎ"),
            bstack1ll1_opy_ (u"ࠪ࡬ࡴࡵ࡫ࡠࡴࡸࡲࡤࡻࡵࡪࡦࠪᤏ"): store[bstack1ll1_opy_ (u"ࠫࡨࡻࡲࡳࡧࡱࡸࡤ࡮࡯ࡰ࡭ࡢࡹࡺ࡯ࡤࠨᤐ")][-1]
        }
    if store.get(bstack1ll1_opy_ (u"ࠬࡩࡵࡳࡴࡨࡲࡹࡥࡴࡦࡵࡷࡣࡺࡻࡩࡥࠩᤑ"), None):
        return {
            bstack1ll1_opy_ (u"࠭ࡴࡺࡲࡨࠫᤒ"): bstack1ll1_opy_ (u"ࠧࡵࡧࡶࡸࠬᤓ"),
            bstack1ll1_opy_ (u"ࠨࡶࡨࡷࡹࡥࡲࡶࡰࡢࡹࡺ࡯ࡤࠨᤔ"): store[bstack1ll1_opy_ (u"ࠩࡦࡹࡷࡸࡥ࡯ࡶࡢࡸࡪࡹࡴࡠࡷࡸ࡭ࡩ࠭ᤕ")]
        }
    return None
bstack11l1ll1l11_opy_ = bstack11l1llll1l_opy_(bstack11l1l1ll1l_opy_)
def pytest_runtest_call(item):
    try:
        global CONFIG
        item._1l1ll1lll11_opy_ = True
        bstack11ll1111_opy_ = bstack111lll1l1_opy_.bstack1l1ll111_opy_(bstack1111111ll1_opy_(item.own_markers))
        item._a11y_test_case = bstack11ll1111_opy_
        if bstack111lllll1_opy_(threading.current_thread(), bstack1ll1_opy_ (u"ࠪࡥ࠶࠷ࡹࡑ࡮ࡤࡸ࡫ࡵࡲ࡮ࠩᤖ"), None):
            driver = getattr(item, bstack1ll1_opy_ (u"ࠫࡤࡪࡲࡪࡸࡨࡶࠬᤗ"), None)
            item._a11y_started = bstack111lll1l1_opy_.bstack111ll111l_opy_(driver, bstack11ll1111_opy_)
        if not bstack11lll111_opy_.on() or bstack1l1ll1l1l11_opy_ != bstack1ll1_opy_ (u"ࠬࡶࡹࡵࡧࡶࡸࠬᤘ"):
            return
        global current_test_uuid, bstack11l1ll1l11_opy_
        bstack11l1ll1l11_opy_.start()
        bstack11l11ll111_opy_ = {
            bstack1ll1_opy_ (u"࠭ࡵࡶ࡫ࡧࠫᤙ"): uuid4().__str__(),
            bstack1ll1_opy_ (u"ࠧࡴࡶࡤࡶࡹ࡫ࡤࡠࡣࡷࠫᤚ"): bstack11l11l1lll_opy_().isoformat() + bstack1ll1_opy_ (u"ࠨ࡜ࠪᤛ")
        }
        current_test_uuid = bstack11l11ll111_opy_[bstack1ll1_opy_ (u"ࠩࡸࡹ࡮ࡪࠧᤜ")]
        store[bstack1ll1_opy_ (u"ࠪࡧࡺࡸࡲࡦࡰࡷࡣࡹ࡫ࡳࡵࡡࡸࡹ࡮ࡪࠧᤝ")] = bstack11l11ll111_opy_[bstack1ll1_opy_ (u"ࠫࡺࡻࡩࡥࠩᤞ")]
        threading.current_thread().current_test_uuid = current_test_uuid
        _111lll1lll_opy_[item.nodeid] = {**_111lll1lll_opy_[item.nodeid], **bstack11l11ll111_opy_}
        bstack1l1l1llllll_opy_(item, _111lll1lll_opy_[item.nodeid], bstack1ll1_opy_ (u"࡚ࠬࡥࡴࡶࡕࡹࡳ࡙ࡴࡢࡴࡷࡩࡩ࠭᤟"))
    except Exception as err:
        print(bstack1ll1_opy_ (u"࠭ࡅࡹࡥࡨࡴࡹ࡯࡯࡯ࠢ࡬ࡲࠥࡶࡹࡵࡧࡶࡸࡤࡸࡵ࡯ࡶࡨࡷࡹࡥࡣࡢ࡮࡯࠾ࠥࢁࡽࠨᤠ"), str(err))
def pytest_runtest_setup(item):
    global bstack1l1ll1ll1l1_opy_
    threading.current_thread().percySessionName = item.nodeid
    if bstack1llll11l111_opy_():
        atexit.register(bstack11ll111ll_opy_)
        if not bstack1l1ll1ll1l1_opy_:
            try:
                bstack1l1ll11l11l_opy_ = [signal.SIGINT, signal.SIGTERM]
                if not bstack1lllll1l1l1_opy_():
                    bstack1l1ll11l11l_opy_.extend([signal.SIGHUP, signal.SIGQUIT])
                for s in bstack1l1ll11l11l_opy_:
                    signal.signal(s, bstack1l1l1lllll1_opy_)
                bstack1l1ll1ll1l1_opy_ = True
            except Exception as e:
                logger.debug(
                    bstack1ll1_opy_ (u"ࠢࡆࡴࡵࡳࡷࠦࡩ࡯ࠢࡵࡩ࡬࡯ࡳࡵࡧࡵࠤࡸ࡯ࡧ࡯ࡣ࡯ࠤ࡭ࡧ࡮ࡥ࡮ࡨࡶࡸࡀࠠࠣᤡ") + str(e))
        try:
            item.config.hook.pytest_selenium_runtest_makereport = bstack1ll11llll1l_opy_
        except Exception as err:
            threading.current_thread().testStatus = bstack1ll1_opy_ (u"ࠨࡲࡤࡷࡸ࡫ࡤࠨᤢ")
    try:
        if not bstack11lll111_opy_.on():
            return
        bstack11l1ll1l11_opy_.start()
        uuid = uuid4().__str__()
        bstack11l11ll111_opy_ = {
            bstack1ll1_opy_ (u"ࠩࡸࡹ࡮ࡪࠧᤣ"): uuid,
            bstack1ll1_opy_ (u"ࠪࡷࡹࡧࡲࡵࡧࡧࡣࡦࡺࠧᤤ"): bstack11l11l1lll_opy_().isoformat() + bstack1ll1_opy_ (u"ࠫ࡟࠭ᤥ"),
            bstack1ll1_opy_ (u"ࠬࡺࡹࡱࡧࠪᤦ"): bstack1ll1_opy_ (u"࠭ࡨࡰࡱ࡮ࠫᤧ"),
            bstack1ll1_opy_ (u"ࠧࡩࡱࡲ࡯ࡤࡺࡹࡱࡧࠪᤨ"): bstack1ll1_opy_ (u"ࠨࡄࡈࡊࡔࡘࡅࡠࡇࡄࡇࡍ࠭ᤩ"),
            bstack1ll1_opy_ (u"ࠩ࡫ࡳࡴࡱ࡟࡯ࡣࡰࡩࠬᤪ"): bstack1ll1_opy_ (u"ࠪࡷࡪࡺࡵࡱࠩᤫ")
        }
        threading.current_thread().current_hook_uuid = uuid
        threading.current_thread().current_test_item = item
        store[bstack1ll1_opy_ (u"ࠫࡨࡻࡲࡳࡧࡱࡸࡤࡺࡥࡴࡶࡢ࡭ࡹ࡫࡭ࠨ᤬")] = item
        store[bstack1ll1_opy_ (u"ࠬࡩࡵࡳࡴࡨࡲࡹࡥࡨࡰࡱ࡮ࡣࡺࡻࡩࡥࠩ᤭")] = [uuid]
        if not _111lll1lll_opy_.get(item.nodeid, None):
            _111lll1lll_opy_[item.nodeid] = {bstack1ll1_opy_ (u"࠭ࡨࡰࡱ࡮ࡷࠬ᤮"): [], bstack1ll1_opy_ (u"ࠧࡧ࡫ࡻࡸࡺࡸࡥࡴࠩ᤯"): []}
        _111lll1lll_opy_[item.nodeid][bstack1ll1_opy_ (u"ࠨࡪࡲࡳࡰࡹࠧᤰ")].append(bstack11l11ll111_opy_[bstack1ll1_opy_ (u"ࠩࡸࡹ࡮ࡪࠧᤱ")])
        _111lll1lll_opy_[item.nodeid + bstack1ll1_opy_ (u"ࠪ࠱ࡸ࡫ࡴࡶࡲࠪᤲ")] = bstack11l11ll111_opy_
        bstack1l1ll11l1ll_opy_(item, bstack11l11ll111_opy_, bstack1ll1_opy_ (u"ࠫࡍࡵ࡯࡬ࡔࡸࡲࡘࡺࡡࡳࡶࡨࡨࠬᤳ"))
    except Exception as err:
        print(bstack1ll1_opy_ (u"ࠬࡋࡸࡤࡧࡳࡸ࡮ࡵ࡮ࠡ࡫ࡱࠤࡵࡿࡴࡦࡵࡷࡣࡷࡻ࡮ࡵࡧࡶࡸࡤࡹࡥࡵࡷࡳ࠾ࠥࢁࡽࠨᤴ"), str(err))
def pytest_runtest_teardown(item):
    try:
        global bstack111l1l1ll_opy_
        bstack1lll1l111l_opy_ = 0
        if bstack1lllllllll_opy_ is True:
            bstack1lll1l111l_opy_ = int(os.environ.get(bstack1ll1_opy_ (u"࠭ࡂࡓࡑ࡚ࡗࡊࡘࡓࡕࡃࡆࡏࡤࡖࡌࡂࡖࡉࡓࡗࡓ࡟ࡊࡐࡇࡉ࡝࠭ᤵ")))
        if bstack1lll1ll1l_opy_.bstack1lll1l11_opy_() == bstack1ll1_opy_ (u"ࠢࡵࡴࡸࡩࠧᤶ"):
            if bstack1lll1ll1l_opy_.bstack11l1ll1l_opy_() == bstack1ll1_opy_ (u"ࠣࡶࡨࡷࡹࡩࡡࡴࡧࠥᤷ"):
                bstack1l1ll111ll1_opy_ = bstack111lllll1_opy_(threading.current_thread(), bstack1ll1_opy_ (u"ࠩࡳࡩࡷࡩࡹࡔࡧࡶࡷ࡮ࡵ࡮ࡏࡣࡰࡩࠬᤸ"), None)
                bstack1llll1l111_opy_ = bstack1l1ll111ll1_opy_ + bstack1ll1_opy_ (u"ࠥ࠱ࡹ࡫ࡳࡵࡥࡤࡷࡪࠨ᤹")
                driver = getattr(item, bstack1ll1_opy_ (u"ࠫࡤࡪࡲࡪࡸࡨࡶࠬ᤺"), None)
                bstack111l1ll1_opy_ = getattr(item, bstack1ll1_opy_ (u"ࠬࡴࡡ࡮ࡧ᤻ࠪ"), None)
                bstack1l1lll1ll1_opy_ = getattr(item, bstack1ll1_opy_ (u"࠭ࡵࡶ࡫ࡧࠫ᤼"), None)
                PercySDK.screenshot(driver, bstack1llll1l111_opy_, bstack111l1ll1_opy_=bstack111l1ll1_opy_, bstack1l1lll1ll1_opy_=bstack1l1lll1ll1_opy_, bstack111l111l_opy_=bstack1lll1l111l_opy_)
        if getattr(item, bstack1ll1_opy_ (u"ࠧࡠࡣ࠴࠵ࡾࡥࡳࡵࡣࡵࡸࡪࡪࠧ᤽"), False):
            bstack1l1111l111_opy_.bstack1l111l1l1l_opy_(getattr(item, bstack1ll1_opy_ (u"ࠨࡡࡧࡶ࡮ࡼࡥࡳࠩ᤾"), None), bstack111l1l1ll_opy_, logger, item)
        if not bstack11lll111_opy_.on():
            return
        bstack11l11ll111_opy_ = {
            bstack1ll1_opy_ (u"ࠩࡸࡹ࡮ࡪࠧ᤿"): uuid4().__str__(),
            bstack1ll1_opy_ (u"ࠪࡷࡹࡧࡲࡵࡧࡧࡣࡦࡺࠧ᥀"): bstack11l11l1lll_opy_().isoformat() + bstack1ll1_opy_ (u"ࠫ࡟࠭᥁"),
            bstack1ll1_opy_ (u"ࠬࡺࡹࡱࡧࠪ᥂"): bstack1ll1_opy_ (u"࠭ࡨࡰࡱ࡮ࠫ᥃"),
            bstack1ll1_opy_ (u"ࠧࡩࡱࡲ࡯ࡤࡺࡹࡱࡧࠪ᥄"): bstack1ll1_opy_ (u"ࠨࡃࡉࡘࡊࡘ࡟ࡆࡃࡆࡌࠬ᥅"),
            bstack1ll1_opy_ (u"ࠩ࡫ࡳࡴࡱ࡟࡯ࡣࡰࡩࠬ᥆"): bstack1ll1_opy_ (u"ࠪࡸࡪࡧࡲࡥࡱࡺࡲࠬ᥇")
        }
        _111lll1lll_opy_[item.nodeid + bstack1ll1_opy_ (u"ࠫ࠲ࡺࡥࡢࡴࡧࡳࡼࡴࠧ᥈")] = bstack11l11ll111_opy_
        bstack1l1ll11l1ll_opy_(item, bstack11l11ll111_opy_, bstack1ll1_opy_ (u"ࠬࡎ࡯ࡰ࡭ࡕࡹࡳ࡙ࡴࡢࡴࡷࡩࡩ࠭᥉"))
    except Exception as err:
        print(bstack1ll1_opy_ (u"࠭ࡅࡹࡥࡨࡴࡹ࡯࡯࡯ࠢ࡬ࡲࠥࡶࡹࡵࡧࡶࡸࡤࡸࡵ࡯ࡶࡨࡷࡹࡥࡴࡦࡣࡵࡨࡴࡽ࡮࠻ࠢࡾࢁࠬ᥊"), str(err))
@pytest.hookimpl(hookwrapper=True)
def pytest_fixture_setup(fixturedef, request):
    if not bstack11lll111_opy_.on():
        yield
        return
    start_time = datetime.datetime.now()
    if bstack1ll11llllll_opy_(fixturedef.argname):
        store[bstack1ll1_opy_ (u"ࠧࡤࡷࡵࡶࡪࡴࡴࡠ࡯ࡲࡨࡺࡲࡥࡠ࡫ࡷࡩࡲ࠭᥋")] = request.node
    elif bstack1ll11ll1ll1_opy_(fixturedef.argname):
        store[bstack1ll1_opy_ (u"ࠨࡥࡸࡶࡷ࡫࡮ࡵࡡࡦࡰࡦࡹࡳࡠ࡫ࡷࡩࡲ࠭᥌")] = request.node
    outcome = yield
    try:
        fixture = {
            bstack1ll1_opy_ (u"ࠩࡱࡥࡲ࡫ࠧ᥍"): fixturedef.argname,
            bstack1ll1_opy_ (u"ࠪࡶࡪࡹࡵ࡭ࡶࠪ᥎"): bstack1111111l1l_opy_(outcome),
            bstack1ll1_opy_ (u"ࠫࡩࡻࡲࡢࡶ࡬ࡳࡳ࠭᥏"): (datetime.datetime.now() - start_time).total_seconds() * 1000
        }
        current_test_item = store[bstack1ll1_opy_ (u"ࠬࡩࡵࡳࡴࡨࡲࡹࡥࡴࡦࡵࡷࡣ࡮ࡺࡥ࡮ࠩᥐ")]
        if not _111lll1lll_opy_.get(current_test_item.nodeid, None):
            _111lll1lll_opy_[current_test_item.nodeid] = {bstack1ll1_opy_ (u"࠭ࡦࡪࡺࡷࡹࡷ࡫ࡳࠨᥑ"): []}
        _111lll1lll_opy_[current_test_item.nodeid][bstack1ll1_opy_ (u"ࠧࡧ࡫ࡻࡸࡺࡸࡥࡴࠩᥒ")].append(fixture)
    except Exception as err:
        logger.debug(bstack1ll1_opy_ (u"ࠨࡇࡻࡧࡪࡶࡴࡪࡱࡱࠤ࡮ࡴࠠࡱࡻࡷࡩࡸࡺ࡟ࡧ࡫ࡻࡸࡺࡸࡥࡠࡵࡨࡸࡺࡶ࠺ࠡࡽࢀࠫᥓ"), str(err))
if bstack1l1l1l111l_opy_() and bstack11lll111_opy_.on():
    def pytest_bdd_before_step(request, step):
        try:
            _111lll1lll_opy_[request.node.nodeid][bstack1ll1_opy_ (u"ࠩࡷࡩࡸࡺ࡟ࡥࡣࡷࡥࠬᥔ")].bstack1l1111l1l1_opy_(id(step))
        except Exception as err:
            print(bstack1ll1_opy_ (u"ࠪࡉࡽࡩࡥࡱࡶ࡬ࡳࡳࠦࡩ࡯ࠢࡳࡽࡹ࡫ࡳࡵࡡࡥࡨࡩࡥࡢࡦࡨࡲࡶࡪࡥࡳࡵࡧࡳ࠾ࠥࢁࡽࠨᥕ"), str(err))
    def pytest_bdd_step_error(request, step, exception):
        try:
            _111lll1lll_opy_[request.node.nodeid][bstack1ll1_opy_ (u"ࠫࡹ࡫ࡳࡵࡡࡧࡥࡹࡧࠧᥖ")].bstack11l1lll1ll_opy_(id(step), Result.failed(exception=exception))
        except Exception as err:
            print(bstack1ll1_opy_ (u"ࠬࡋࡸࡤࡧࡳࡸ࡮ࡵ࡮ࠡ࡫ࡱࠤࡵࡿࡴࡦࡵࡷࡣࡧࡪࡤࡠࡵࡷࡩࡵࡥࡥࡳࡴࡲࡶ࠿ࠦࡻࡾࠩᥗ"), str(err))
    def pytest_bdd_after_step(request, step):
        try:
            bstack11l1l1ll11_opy_: bstack11l1ll111l_opy_ = _111lll1lll_opy_[request.node.nodeid][bstack1ll1_opy_ (u"࠭ࡴࡦࡵࡷࡣࡩࡧࡴࡢࠩᥘ")]
            bstack11l1l1ll11_opy_.bstack11l1lll1ll_opy_(id(step), Result.passed())
        except Exception as err:
            print(bstack1ll1_opy_ (u"ࠧࡆࡺࡦࡩࡵࡺࡩࡰࡰࠣ࡭ࡳࠦࡰࡺࡶࡨࡷࡹࡥࡢࡥࡦࡢࡷࡹ࡫ࡰࡠࡧࡵࡶࡴࡸ࠺ࠡࡽࢀࠫᥙ"), str(err))
    def pytest_bdd_before_scenario(request, feature, scenario):
        global bstack1l1ll1l1l11_opy_
        try:
            if not bstack11lll111_opy_.on() or bstack1l1ll1l1l11_opy_ != bstack1ll1_opy_ (u"ࠨࡲࡼࡸࡪࡹࡴ࠮ࡤࡧࡨࠬᥚ"):
                return
            global bstack11l1ll1l11_opy_
            bstack11l1ll1l11_opy_.start()
            driver = bstack111lllll1_opy_(threading.current_thread(), bstack1ll1_opy_ (u"ࠩࡥࡷࡹࡧࡣ࡬ࡕࡨࡷࡸ࡯࡯࡯ࡆࡵ࡭ࡻ࡫ࡲࠨᥛ"), None)
            if not _111lll1lll_opy_.get(request.node.nodeid, None):
                _111lll1lll_opy_[request.node.nodeid] = {}
            bstack11l1l1ll11_opy_ = bstack11l1ll111l_opy_.bstack1ll111l11ll_opy_(
                scenario, feature, request.node,
                name=bstack1ll11ll1l1l_opy_(request.node, scenario),
                bstack11l1lll11l_opy_=bstack1l11l1ll1l_opy_(),
                file_path=feature.filename,
                scope=[feature.name],
                framework=bstack1ll1_opy_ (u"ࠪࡔࡾࡺࡥࡴࡶ࠰ࡧࡺࡩࡵ࡮ࡤࡨࡶࠬᥜ"),
                tags=bstack1ll11lll11l_opy_(feature, scenario),
                bstack11l1ll1l1l_opy_=bstack11lll111_opy_.bstack11l1l1llll_opy_(driver) if driver and driver.session_id else {}
            )
            _111lll1lll_opy_[request.node.nodeid][bstack1ll1_opy_ (u"ࠫࡹ࡫ࡳࡵࡡࡧࡥࡹࡧࠧᥝ")] = bstack11l1l1ll11_opy_
            bstack1l1ll1l1l1l_opy_(bstack11l1l1ll11_opy_.uuid)
            bstack11lll111_opy_.bstack11l1lll1l1_opy_(bstack1ll1_opy_ (u"࡚ࠬࡥࡴࡶࡕࡹࡳ࡙ࡴࡢࡴࡷࡩࡩ࠭ᥞ"), bstack11l1l1ll11_opy_)
        except Exception as err:
            print(bstack1ll1_opy_ (u"࠭ࡅࡹࡥࡨࡴࡹ࡯࡯࡯ࠢ࡬ࡲࠥࡶࡹࡵࡧࡶࡸࡤࡨࡤࡥࡡࡥࡩ࡫ࡵࡲࡦࡡࡶࡧࡪࡴࡡࡳ࡫ࡲ࠾ࠥࢁࡽࠨᥟ"), str(err))
def bstack1l1ll11ll1l_opy_(bstack11l1l11ll1_opy_):
    if bstack11l1l11ll1_opy_ in store[bstack1ll1_opy_ (u"ࠧࡤࡷࡵࡶࡪࡴࡴࡠࡪࡲࡳࡰࡥࡵࡶ࡫ࡧࠫᥠ")]:
        store[bstack1ll1_opy_ (u"ࠨࡥࡸࡶࡷ࡫࡮ࡵࡡ࡫ࡳࡴࡱ࡟ࡶࡷ࡬ࡨࠬᥡ")].remove(bstack11l1l11ll1_opy_)
def bstack1l1ll1l1l1l_opy_(bstack11l1ll1ll1_opy_):
    store[bstack1ll1_opy_ (u"ࠩࡦࡹࡷࡸࡥ࡯ࡶࡢࡸࡪࡹࡴࡠࡷࡸ࡭ࡩ࠭ᥢ")] = bstack11l1ll1ll1_opy_
    threading.current_thread().current_test_uuid = bstack11l1ll1ll1_opy_
@bstack11lll111_opy_.bstack1l1lllll1l1_opy_
def bstack1l1ll1l111l_opy_(item, call, report):
    logger.debug(bstack1ll1_opy_ (u"ࠪ࡬ࡦࡴࡤ࡭ࡧࡢࡳ࠶࠷ࡹࡠࡶࡨࡷࡹࡥࡥࡷࡧࡱࡸ࠿ࠦࡳࡵࡣࡵࡸࠬᥣ"))
    global bstack1l1ll1l1l11_opy_
    bstack1l1l1ll1l_opy_ = bstack1l11l1ll1l_opy_()
    if hasattr(report, bstack1ll1_opy_ (u"ࠫࡸࡺ࡯ࡱࠩᥤ")):
        bstack1l1l1ll1l_opy_ = bstack1lllllll1l1_opy_(report.stop)
    elif hasattr(report, bstack1ll1_opy_ (u"ࠬࡹࡴࡢࡴࡷࠫᥥ")):
        bstack1l1l1ll1l_opy_ = bstack1lllllll1l1_opy_(report.start)
    try:
        if getattr(report, bstack1ll1_opy_ (u"࠭ࡷࡩࡧࡱࠫᥦ"), bstack1ll1_opy_ (u"ࠧࠨᥧ")) == bstack1ll1_opy_ (u"ࠨࡥࡤࡰࡱ࠭ᥨ"):
            bstack11l1ll1l11_opy_.reset()
        if getattr(report, bstack1ll1_opy_ (u"ࠩࡺ࡬ࡪࡴࠧᥩ"), bstack1ll1_opy_ (u"ࠪࠫᥪ")) == bstack1ll1_opy_ (u"ࠫࡨࡧ࡬࡭ࠩᥫ"):
            logger.debug(bstack1ll1_opy_ (u"ࠬ࡮ࡡ࡯ࡦ࡯ࡩࡤࡵ࠱࠲ࡻࡢࡸࡪࡹࡴࡠࡧࡹࡩࡳࡺ࠺ࠡࡵࡷࡥࡹ࡫ࠠ࠮ࠢࡾࢁ࠱ࠦࡦࡳࡣࡰࡩࡼࡵࡲ࡬ࠢ࠰ࠤࢀࢃࠧᥬ").format(getattr(report, bstack1ll1_opy_ (u"࠭ࡷࡩࡧࡱࠫᥭ"), bstack1ll1_opy_ (u"ࠧࠨ᥮")).__str__(), bstack1l1ll1l1l11_opy_))
            if bstack1l1ll1l1l11_opy_ == bstack1ll1_opy_ (u"ࠨࡲࡼࡸࡪࡹࡴࠨ᥯"):
                _111lll1lll_opy_[item.nodeid][bstack1ll1_opy_ (u"ࠩࡩ࡭ࡳ࡯ࡳࡩࡧࡧࡣࡦࡺࠧᥰ")] = bstack1l1l1ll1l_opy_
                bstack1l1l1llllll_opy_(item, _111lll1lll_opy_[item.nodeid], bstack1ll1_opy_ (u"ࠪࡘࡪࡹࡴࡓࡷࡱࡊ࡮ࡴࡩࡴࡪࡨࡨࠬᥱ"), report, call)
                store[bstack1ll1_opy_ (u"ࠫࡨࡻࡲࡳࡧࡱࡸࡤࡺࡥࡴࡶࡢࡹࡺ࡯ࡤࠨᥲ")] = None
            elif bstack1l1ll1l1l11_opy_ == bstack1ll1_opy_ (u"ࠧࡶࡹࡵࡧࡶࡸ࠲ࡨࡤࡥࠤᥳ"):
                bstack11l1l1ll11_opy_ = _111lll1lll_opy_[item.nodeid][bstack1ll1_opy_ (u"࠭ࡴࡦࡵࡷࡣࡩࡧࡴࡢࠩᥴ")]
                bstack11l1l1ll11_opy_.set(hooks=_111lll1lll_opy_[item.nodeid].get(bstack1ll1_opy_ (u"ࠧࡩࡱࡲ࡯ࡸ࠭᥵"), []))
                exception, bstack11l1l1lll1_opy_ = None, None
                if call.excinfo:
                    exception = call.excinfo.value
                    bstack11l1l1lll1_opy_ = [call.excinfo.exconly(), getattr(report, bstack1ll1_opy_ (u"ࠨ࡮ࡲࡲ࡬ࡸࡥࡱࡴࡷࡩࡽࡺࠧ᥶"), bstack1ll1_opy_ (u"ࠩࠪ᥷"))]
                bstack11l1l1ll11_opy_.stop(time=bstack1l1l1ll1l_opy_, result=Result(result=getattr(report, bstack1ll1_opy_ (u"ࠪࡳࡺࡺࡣࡰ࡯ࡨࠫ᥸"), bstack1ll1_opy_ (u"ࠫࡵࡧࡳࡴࡧࡧࠫ᥹")), exception=exception, bstack11l1l1lll1_opy_=bstack11l1l1lll1_opy_))
                bstack11lll111_opy_.bstack11l1lll1l1_opy_(bstack1ll1_opy_ (u"࡚ࠬࡥࡴࡶࡕࡹࡳࡌࡩ࡯࡫ࡶ࡬ࡪࡪࠧ᥺"), _111lll1lll_opy_[item.nodeid][bstack1ll1_opy_ (u"࠭ࡴࡦࡵࡷࡣࡩࡧࡴࡢࠩ᥻")])
        elif getattr(report, bstack1ll1_opy_ (u"ࠧࡸࡪࡨࡲࠬ᥼"), bstack1ll1_opy_ (u"ࠨࠩ᥽")) in [bstack1ll1_opy_ (u"ࠩࡶࡩࡹࡻࡰࠨ᥾"), bstack1ll1_opy_ (u"ࠪࡸࡪࡧࡲࡥࡱࡺࡲࠬ᥿")]:
            logger.debug(bstack1ll1_opy_ (u"ࠫ࡭ࡧ࡮ࡥ࡮ࡨࡣࡴ࠷࠱ࡺࡡࡷࡩࡸࡺ࡟ࡦࡸࡨࡲࡹࡀࠠࡴࡶࡤࡸࡪࠦ࠭ࠡࡽࢀ࠰ࠥ࡬ࡲࡢ࡯ࡨࡻࡴࡸ࡫ࠡ࠯ࠣࡿࢂ࠭ᦀ").format(getattr(report, bstack1ll1_opy_ (u"ࠬࡽࡨࡦࡰࠪᦁ"), bstack1ll1_opy_ (u"࠭ࠧᦂ")).__str__(), bstack1l1ll1l1l11_opy_))
            bstack11l1l1l111_opy_ = item.nodeid + bstack1ll1_opy_ (u"ࠧ࠮ࠩᦃ") + getattr(report, bstack1ll1_opy_ (u"ࠨࡹ࡫ࡩࡳ࠭ᦄ"), bstack1ll1_opy_ (u"ࠩࠪᦅ"))
            if getattr(report, bstack1ll1_opy_ (u"ࠪࡷࡰ࡯ࡰࡱࡧࡧࠫᦆ"), False):
                hook_type = bstack1ll1_opy_ (u"ࠫࡇࡋࡆࡐࡔࡈࡣࡊࡇࡃࡉࠩᦇ") if getattr(report, bstack1ll1_opy_ (u"ࠬࡽࡨࡦࡰࠪᦈ"), bstack1ll1_opy_ (u"࠭ࠧᦉ")) == bstack1ll1_opy_ (u"ࠧࡴࡧࡷࡹࡵ࠭ᦊ") else bstack1ll1_opy_ (u"ࠨࡃࡉࡘࡊࡘ࡟ࡆࡃࡆࡌࠬᦋ")
                _111lll1lll_opy_[bstack11l1l1l111_opy_] = {
                    bstack1ll1_opy_ (u"ࠩࡸࡹ࡮ࡪࠧᦌ"): uuid4().__str__(),
                    bstack1ll1_opy_ (u"ࠪࡷࡹࡧࡲࡵࡧࡧࡣࡦࡺࠧᦍ"): bstack1l1l1ll1l_opy_,
                    bstack1ll1_opy_ (u"ࠫ࡭ࡵ࡯࡬ࡡࡷࡽࡵ࡫ࠧᦎ"): hook_type
                }
            _111lll1lll_opy_[bstack11l1l1l111_opy_][bstack1ll1_opy_ (u"ࠬ࡬ࡩ࡯࡫ࡶ࡬ࡪࡪ࡟ࡢࡶࠪᦏ")] = bstack1l1l1ll1l_opy_
            bstack1l1ll11ll1l_opy_(_111lll1lll_opy_[bstack11l1l1l111_opy_][bstack1ll1_opy_ (u"࠭ࡵࡶ࡫ࡧࠫᦐ")])
            bstack1l1ll11l1ll_opy_(item, _111lll1lll_opy_[bstack11l1l1l111_opy_], bstack1ll1_opy_ (u"ࠧࡉࡱࡲ࡯ࡗࡻ࡮ࡇ࡫ࡱ࡭ࡸ࡮ࡥࡥࠩᦑ"), report, call)
            if getattr(report, bstack1ll1_opy_ (u"ࠨࡹ࡫ࡩࡳ࠭ᦒ"), bstack1ll1_opy_ (u"ࠩࠪᦓ")) == bstack1ll1_opy_ (u"ࠪࡷࡪࡺࡵࡱࠩᦔ"):
                if getattr(report, bstack1ll1_opy_ (u"ࠫࡴࡻࡴࡤࡱࡰࡩࠬᦕ"), bstack1ll1_opy_ (u"ࠬࡶࡡࡴࡵࡨࡨࠬᦖ")) == bstack1ll1_opy_ (u"࠭ࡦࡢ࡫࡯ࡩࡩ࠭ᦗ"):
                    bstack11l11ll111_opy_ = {
                        bstack1ll1_opy_ (u"ࠧࡶࡷ࡬ࡨࠬᦘ"): uuid4().__str__(),
                        bstack1ll1_opy_ (u"ࠨࡵࡷࡥࡷࡺࡥࡥࡡࡤࡸࠬᦙ"): bstack1l11l1ll1l_opy_(),
                        bstack1ll1_opy_ (u"ࠩࡩ࡭ࡳ࡯ࡳࡩࡧࡧࡣࡦࡺࠧᦚ"): bstack1l11l1ll1l_opy_()
                    }
                    _111lll1lll_opy_[item.nodeid] = {**_111lll1lll_opy_[item.nodeid], **bstack11l11ll111_opy_}
                    bstack1l1l1llllll_opy_(item, _111lll1lll_opy_[item.nodeid], bstack1ll1_opy_ (u"ࠪࡘࡪࡹࡴࡓࡷࡱࡗࡹࡧࡲࡵࡧࡧࠫᦛ"))
                    bstack1l1l1llllll_opy_(item, _111lll1lll_opy_[item.nodeid], bstack1ll1_opy_ (u"࡙ࠫ࡫ࡳࡵࡔࡸࡲࡋ࡯࡮ࡪࡵ࡫ࡩࡩ࠭ᦜ"), report, call)
    except Exception as err:
        print(bstack1ll1_opy_ (u"ࠬࡋࡸࡤࡧࡳࡸ࡮ࡵ࡮ࠡ࡫ࡱࠤ࡭ࡧ࡮ࡥ࡮ࡨࡣࡴ࠷࠱ࡺࡡࡷࡩࡸࡺ࡟ࡦࡸࡨࡲࡹࡀࠠࡼࡿࠪᦝ"), str(err))
def bstack1l1ll11ll11_opy_(test, bstack11l11ll111_opy_, result=None, call=None, bstack1ll11l111l_opy_=None, outcome=None):
    file_path = os.path.relpath(test.fspath.strpath, start=os.getcwd())
    bstack11l1l1ll11_opy_ = {
        bstack1ll1_opy_ (u"࠭ࡵࡶ࡫ࡧࠫᦞ"): bstack11l11ll111_opy_[bstack1ll1_opy_ (u"ࠧࡶࡷ࡬ࡨࠬᦟ")],
        bstack1ll1_opy_ (u"ࠨࡶࡼࡴࡪ࠭ᦠ"): bstack1ll1_opy_ (u"ࠩࡷࡩࡸࡺࠧᦡ"),
        bstack1ll1_opy_ (u"ࠪࡲࡦࡳࡥࠨᦢ"): test.name,
        bstack1ll1_opy_ (u"ࠫࡧࡵࡤࡺࠩᦣ"): {
            bstack1ll1_opy_ (u"ࠬࡲࡡ࡯ࡩࠪᦤ"): bstack1ll1_opy_ (u"࠭ࡰࡺࡶ࡫ࡳࡳ࠭ᦥ"),
            bstack1ll1_opy_ (u"ࠧࡤࡱࡧࡩࠬᦦ"): inspect.getsource(test.obj)
        },
        bstack1ll1_opy_ (u"ࠨ࡫ࡧࡩࡳࡺࡩࡧ࡫ࡨࡶࠬᦧ"): test.name,
        bstack1ll1_opy_ (u"ࠩࡶࡧࡴࡶࡥࠨᦨ"): test.name,
        bstack1ll1_opy_ (u"ࠪࡷࡨࡵࡰࡦࡵࠪᦩ"): bstack1lll11l1_opy_.bstack11l111lll1_opy_(test),
        bstack1ll1_opy_ (u"ࠫ࡫࡯࡬ࡦࡡࡱࡥࡲ࡫ࠧᦪ"): file_path,
        bstack1ll1_opy_ (u"ࠬࡲ࡯ࡤࡣࡷ࡭ࡴࡴࠧᦫ"): file_path,
        bstack1ll1_opy_ (u"࠭ࡲࡦࡵࡸࡰࡹ࠭᦬"): bstack1ll1_opy_ (u"ࠧࡱࡧࡱࡨ࡮ࡴࡧࠨ᦭"),
        bstack1ll1_opy_ (u"ࠨࡸࡦࡣ࡫࡯࡬ࡦࡲࡤࡸ࡭࠭᦮"): file_path,
        bstack1ll1_opy_ (u"ࠩࡶࡸࡦࡸࡴࡦࡦࡢࡥࡹ࠭᦯"): bstack11l11ll111_opy_[bstack1ll1_opy_ (u"ࠪࡷࡹࡧࡲࡵࡧࡧࡣࡦࡺࠧᦰ")],
        bstack1ll1_opy_ (u"ࠫ࡫ࡸࡡ࡮ࡧࡺࡳࡷࡱࠧᦱ"): bstack1ll1_opy_ (u"ࠬࡖࡹࡵࡧࡶࡸࠬᦲ"),
        bstack1ll1_opy_ (u"࠭ࡣࡶࡵࡷࡳࡲࡘࡥࡳࡷࡱࡔࡦࡸࡡ࡮ࠩᦳ"): {
            bstack1ll1_opy_ (u"ࠧࡳࡧࡵࡹࡳࡥ࡮ࡢ࡯ࡨࠫᦴ"): test.nodeid
        },
        bstack1ll1_opy_ (u"ࠨࡶࡤ࡫ࡸ࠭ᦵ"): bstack1111111ll1_opy_(test.own_markers)
    }
    if bstack1ll11l111l_opy_ in [bstack1ll1_opy_ (u"ࠩࡗࡩࡸࡺࡒࡶࡰࡖ࡯࡮ࡶࡰࡦࡦࠪᦶ"), bstack1ll1_opy_ (u"ࠪࡘࡪࡹࡴࡓࡷࡱࡊ࡮ࡴࡩࡴࡪࡨࡨࠬᦷ")]:
        bstack11l1l1ll11_opy_[bstack1ll1_opy_ (u"ࠫࡲ࡫ࡴࡢࠩᦸ")] = {
            bstack1ll1_opy_ (u"ࠬ࡬ࡩࡹࡶࡸࡶࡪࡹࠧᦹ"): bstack11l11ll111_opy_.get(bstack1ll1_opy_ (u"࠭ࡦࡪࡺࡷࡹࡷ࡫ࡳࠨᦺ"), [])
        }
    if bstack1ll11l111l_opy_ == bstack1ll1_opy_ (u"ࠧࡕࡧࡶࡸࡗࡻ࡮ࡔ࡭࡬ࡴࡵ࡫ࡤࠨᦻ"):
        bstack11l1l1ll11_opy_[bstack1ll1_opy_ (u"ࠨࡴࡨࡷࡺࡲࡴࠨᦼ")] = bstack1ll1_opy_ (u"ࠩࡶ࡯࡮ࡶࡰࡦࡦࠪᦽ")
        bstack11l1l1ll11_opy_[bstack1ll1_opy_ (u"ࠪ࡬ࡴࡵ࡫ࡴࠩᦾ")] = bstack11l11ll111_opy_[bstack1ll1_opy_ (u"ࠫ࡭ࡵ࡯࡬ࡵࠪᦿ")]
        bstack11l1l1ll11_opy_[bstack1ll1_opy_ (u"ࠬ࡬ࡩ࡯࡫ࡶ࡬ࡪࡪ࡟ࡢࡶࠪᧀ")] = bstack11l11ll111_opy_[bstack1ll1_opy_ (u"࠭ࡦࡪࡰ࡬ࡷ࡭࡫ࡤࡠࡣࡷࠫᧁ")]
    if result:
        bstack11l1l1ll11_opy_[bstack1ll1_opy_ (u"ࠧࡳࡧࡶࡹࡱࡺࠧᧂ")] = result.outcome
        bstack11l1l1ll11_opy_[bstack1ll1_opy_ (u"ࠨࡦࡸࡶࡦࡺࡩࡰࡰࡢ࡭ࡳࡥ࡭ࡴࠩᧃ")] = result.duration * 1000
        bstack11l1l1ll11_opy_[bstack1ll1_opy_ (u"ࠩࡩ࡭ࡳ࡯ࡳࡩࡧࡧࡣࡦࡺࠧᧄ")] = bstack11l11ll111_opy_[bstack1ll1_opy_ (u"ࠪࡪ࡮ࡴࡩࡴࡪࡨࡨࡤࡧࡴࠨᧅ")]
        if result.failed:
            bstack11l1l1ll11_opy_[bstack1ll1_opy_ (u"ࠫ࡫ࡧࡩ࡭ࡷࡵࡩࡤࡺࡹࡱࡧࠪᧆ")] = bstack11lll111_opy_.bstack111l1ll1ll_opy_(call.excinfo.typename)
            bstack11l1l1ll11_opy_[bstack1ll1_opy_ (u"ࠬ࡬ࡡࡪ࡮ࡸࡶࡪ࠭ᧇ")] = bstack11lll111_opy_.bstack1ll1111111l_opy_(call.excinfo, result)
        bstack11l1l1ll11_opy_[bstack1ll1_opy_ (u"࠭ࡨࡰࡱ࡮ࡷࠬᧈ")] = bstack11l11ll111_opy_[bstack1ll1_opy_ (u"ࠧࡩࡱࡲ࡯ࡸ࠭ᧉ")]
    if outcome:
        bstack11l1l1ll11_opy_[bstack1ll1_opy_ (u"ࠨࡴࡨࡷࡺࡲࡴࠨ᧊")] = bstack1111111l1l_opy_(outcome)
        bstack11l1l1ll11_opy_[bstack1ll1_opy_ (u"ࠩࡧࡹࡷࡧࡴࡪࡱࡱࡣ࡮ࡴ࡟࡮ࡵࠪ᧋")] = 0
        bstack11l1l1ll11_opy_[bstack1ll1_opy_ (u"ࠪࡪ࡮ࡴࡩࡴࡪࡨࡨࡤࡧࡴࠨ᧌")] = bstack11l11ll111_opy_[bstack1ll1_opy_ (u"ࠫ࡫࡯࡮ࡪࡵ࡫ࡩࡩࡥࡡࡵࠩ᧍")]
        if bstack11l1l1ll11_opy_[bstack1ll1_opy_ (u"ࠬࡸࡥࡴࡷ࡯ࡸࠬ᧎")] == bstack1ll1_opy_ (u"࠭ࡦࡢ࡫࡯ࡩࡩ࠭᧏"):
            bstack11l1l1ll11_opy_[bstack1ll1_opy_ (u"ࠧࡧࡣ࡬ࡰࡺࡸࡥࡠࡶࡼࡴࡪ࠭᧐")] = bstack1ll1_opy_ (u"ࠨࡗࡱ࡬ࡦࡴࡤ࡭ࡧࡧࡉࡷࡸ࡯ࡳࠩ᧑")  # bstack1l1ll1ll1ll_opy_
            bstack11l1l1ll11_opy_[bstack1ll1_opy_ (u"ࠩࡩࡥ࡮ࡲࡵࡳࡧࠪ᧒")] = [{bstack1ll1_opy_ (u"ࠪࡦࡦࡩ࡫ࡵࡴࡤࡧࡪ࠭᧓"): [bstack1ll1_opy_ (u"ࠫࡸࡵ࡭ࡦࠢࡨࡶࡷࡵࡲࠨ᧔")]}]
        bstack11l1l1ll11_opy_[bstack1ll1_opy_ (u"ࠬ࡮࡯ࡰ࡭ࡶࠫ᧕")] = bstack11l11ll111_opy_[bstack1ll1_opy_ (u"࠭ࡨࡰࡱ࡮ࡷࠬ᧖")]
    return bstack11l1l1ll11_opy_
def bstack1l1ll11l1l1_opy_(test, bstack11l11l111l_opy_, bstack1ll11l111l_opy_, result, call, outcome, bstack1l1ll1l11l1_opy_):
    file_path = os.path.relpath(test.fspath.strpath, start=os.getcwd())
    hook_type = bstack11l11l111l_opy_[bstack1ll1_opy_ (u"ࠧࡩࡱࡲ࡯ࡤࡺࡹࡱࡧࠪ᧗")]
    hook_name = bstack11l11l111l_opy_[bstack1ll1_opy_ (u"ࠨࡪࡲࡳࡰࡥ࡮ࡢ࡯ࡨࠫ᧘")]
    hook_data = {
        bstack1ll1_opy_ (u"ࠩࡸࡹ࡮ࡪࠧ᧙"): bstack11l11l111l_opy_[bstack1ll1_opy_ (u"ࠪࡹࡺ࡯ࡤࠨ᧚")],
        bstack1ll1_opy_ (u"ࠫࡹࡿࡰࡦࠩ᧛"): bstack1ll1_opy_ (u"ࠬ࡮࡯ࡰ࡭ࠪ᧜"),
        bstack1ll1_opy_ (u"࠭࡮ࡢ࡯ࡨࠫ᧝"): bstack1ll1_opy_ (u"ࠧࡼࡿࠪ᧞").format(bstack1ll11lll111_opy_(hook_name)),
        bstack1ll1_opy_ (u"ࠨࡤࡲࡨࡾ࠭᧟"): {
            bstack1ll1_opy_ (u"ࠩ࡯ࡥࡳ࡭ࠧ᧠"): bstack1ll1_opy_ (u"ࠪࡴࡾࡺࡨࡰࡰࠪ᧡"),
            bstack1ll1_opy_ (u"ࠫࡨࡵࡤࡦࠩ᧢"): None
        },
        bstack1ll1_opy_ (u"ࠬࡹࡣࡰࡲࡨࠫ᧣"): test.name,
        bstack1ll1_opy_ (u"࠭ࡳࡤࡱࡳࡩࡸ࠭᧤"): bstack1lll11l1_opy_.bstack11l111lll1_opy_(test, hook_name),
        bstack1ll1_opy_ (u"ࠧࡧ࡫࡯ࡩࡤࡴࡡ࡮ࡧࠪ᧥"): file_path,
        bstack1ll1_opy_ (u"ࠨ࡮ࡲࡧࡦࡺࡩࡰࡰࠪ᧦"): file_path,
        bstack1ll1_opy_ (u"ࠩࡵࡩࡸࡻ࡬ࡵࠩ᧧"): bstack1ll1_opy_ (u"ࠪࡴࡪࡴࡤࡪࡰࡪࠫ᧨"),
        bstack1ll1_opy_ (u"ࠫࡻࡩ࡟ࡧ࡫࡯ࡩࡵࡧࡴࡩࠩ᧩"): file_path,
        bstack1ll1_opy_ (u"ࠬࡹࡴࡢࡴࡷࡩࡩࡥࡡࡵࠩ᧪"): bstack11l11l111l_opy_[bstack1ll1_opy_ (u"࠭ࡳࡵࡣࡵࡸࡪࡪ࡟ࡢࡶࠪ᧫")],
        bstack1ll1_opy_ (u"ࠧࡧࡴࡤࡱࡪࡽ࡯ࡳ࡭ࠪ᧬"): bstack1ll1_opy_ (u"ࠨࡒࡼࡸࡪࡹࡴ࠮ࡥࡸࡧࡺࡳࡢࡦࡴࠪ᧭") if bstack1l1ll1l1l11_opy_ == bstack1ll1_opy_ (u"ࠩࡳࡽࡹ࡫ࡳࡵ࠯ࡥࡨࡩ࠭᧮") else bstack1ll1_opy_ (u"ࠪࡔࡾࡺࡥࡴࡶࠪ᧯"),
        bstack1ll1_opy_ (u"ࠫ࡭ࡵ࡯࡬ࡡࡷࡽࡵ࡫ࠧ᧰"): hook_type
    }
    bstack1ll111l1lll_opy_ = bstack111lll11ll_opy_(_111lll1lll_opy_.get(test.nodeid, None))
    if bstack1ll111l1lll_opy_:
        hook_data[bstack1ll1_opy_ (u"ࠬࡺࡥࡴࡶࡢࡶࡺࡴ࡟ࡪࡦࠪ᧱")] = bstack1ll111l1lll_opy_
    if result:
        hook_data[bstack1ll1_opy_ (u"࠭ࡲࡦࡵࡸࡰࡹ࠭᧲")] = result.outcome
        hook_data[bstack1ll1_opy_ (u"ࠧࡥࡷࡵࡥࡹ࡯࡯࡯ࡡ࡬ࡲࡤࡳࡳࠨ᧳")] = result.duration * 1000
        hook_data[bstack1ll1_opy_ (u"ࠨࡨ࡬ࡲ࡮ࡹࡨࡦࡦࡢࡥࡹ࠭᧴")] = bstack11l11l111l_opy_[bstack1ll1_opy_ (u"ࠩࡩ࡭ࡳ࡯ࡳࡩࡧࡧࡣࡦࡺࠧ᧵")]
        if result.failed:
            hook_data[bstack1ll1_opy_ (u"ࠪࡪࡦ࡯࡬ࡶࡴࡨࡣࡹࡿࡰࡦࠩ᧶")] = bstack11lll111_opy_.bstack111l1ll1ll_opy_(call.excinfo.typename)
            hook_data[bstack1ll1_opy_ (u"ࠫ࡫ࡧࡩ࡭ࡷࡵࡩࠬ᧷")] = bstack11lll111_opy_.bstack1ll1111111l_opy_(call.excinfo, result)
    if outcome:
        hook_data[bstack1ll1_opy_ (u"ࠬࡸࡥࡴࡷ࡯ࡸࠬ᧸")] = bstack1111111l1l_opy_(outcome)
        hook_data[bstack1ll1_opy_ (u"࠭ࡤࡶࡴࡤࡸ࡮ࡵ࡮ࡠ࡫ࡱࡣࡲࡹࠧ᧹")] = 100
        hook_data[bstack1ll1_opy_ (u"ࠧࡧ࡫ࡱ࡭ࡸ࡮ࡥࡥࡡࡤࡸࠬ᧺")] = bstack11l11l111l_opy_[bstack1ll1_opy_ (u"ࠨࡨ࡬ࡲ࡮ࡹࡨࡦࡦࡢࡥࡹ࠭᧻")]
        if hook_data[bstack1ll1_opy_ (u"ࠩࡵࡩࡸࡻ࡬ࡵࠩ᧼")] == bstack1ll1_opy_ (u"ࠪࡪࡦ࡯࡬ࡦࡦࠪ᧽"):
            hook_data[bstack1ll1_opy_ (u"ࠫ࡫ࡧࡩ࡭ࡷࡵࡩࡤࡺࡹࡱࡧࠪ᧾")] = bstack1ll1_opy_ (u"࡛ࠬ࡮ࡩࡣࡱࡨࡱ࡫ࡤࡆࡴࡵࡳࡷ࠭᧿")  # bstack1l1ll1ll1ll_opy_
            hook_data[bstack1ll1_opy_ (u"࠭ࡦࡢ࡫࡯ࡹࡷ࡫ࠧᨀ")] = [{bstack1ll1_opy_ (u"ࠧࡣࡣࡦ࡯ࡹࡸࡡࡤࡧࠪᨁ"): [bstack1ll1_opy_ (u"ࠨࡵࡲࡱࡪࠦࡥࡳࡴࡲࡶࠬᨂ")]}]
    if bstack1l1ll1l11l1_opy_:
        hook_data[bstack1ll1_opy_ (u"ࠩࡵࡩࡸࡻ࡬ࡵࠩᨃ")] = bstack1l1ll1l11l1_opy_.result
        hook_data[bstack1ll1_opy_ (u"ࠪࡨࡺࡸࡡࡵ࡫ࡲࡲࡤ࡯࡮ࡠ࡯ࡶࠫᨄ")] = bstack1lllll11111_opy_(bstack11l11l111l_opy_[bstack1ll1_opy_ (u"ࠫࡸࡺࡡࡳࡶࡨࡨࡤࡧࡴࠨᨅ")], bstack11l11l111l_opy_[bstack1ll1_opy_ (u"ࠬ࡬ࡩ࡯࡫ࡶ࡬ࡪࡪ࡟ࡢࡶࠪᨆ")])
        hook_data[bstack1ll1_opy_ (u"࠭ࡦࡪࡰ࡬ࡷ࡭࡫ࡤࡠࡣࡷࠫᨇ")] = bstack11l11l111l_opy_[bstack1ll1_opy_ (u"ࠧࡧ࡫ࡱ࡭ࡸ࡮ࡥࡥࡡࡤࡸࠬᨈ")]
        if hook_data[bstack1ll1_opy_ (u"ࠨࡴࡨࡷࡺࡲࡴࠨᨉ")] == bstack1ll1_opy_ (u"ࠩࡩࡥ࡮ࡲࡥࡥࠩᨊ"):
            hook_data[bstack1ll1_opy_ (u"ࠪࡪࡦ࡯࡬ࡶࡴࡨࡣࡹࡿࡰࡦࠩᨋ")] = bstack11lll111_opy_.bstack111l1ll1ll_opy_(bstack1l1ll1l11l1_opy_.exception_type)
            hook_data[bstack1ll1_opy_ (u"ࠫ࡫ࡧࡩ࡭ࡷࡵࡩࠬᨌ")] = [{bstack1ll1_opy_ (u"ࠬࡨࡡࡤ࡭ࡷࡶࡦࡩࡥࠨᨍ"): bstack1llll111ll1_opy_(bstack1l1ll1l11l1_opy_.exception)}]
    return hook_data
def bstack1l1l1llllll_opy_(test, bstack11l11ll111_opy_, bstack1ll11l111l_opy_, result=None, call=None, outcome=None):
    logger.debug(bstack1ll1_opy_ (u"࠭ࡳࡦࡰࡧࡣࡹ࡫ࡳࡵࡡࡵࡹࡳࡥࡥࡷࡧࡱࡸ࠿ࠦࡁࡵࡶࡨࡱࡵࡺࡩ࡯ࡩࠣࡸࡴࠦࡧࡦࡰࡨࡶࡦࡺࡥࠡࡶࡨࡷࡹࠦࡤࡢࡶࡤࠤ࡫ࡵࡲࠡࡧࡹࡩࡳࡺ࡟ࡵࡻࡳࡩࠥ࠳ࠠࡼࡿࠪᨎ").format(bstack1ll11l111l_opy_))
    bstack11l1l1ll11_opy_ = bstack1l1ll11ll11_opy_(test, bstack11l11ll111_opy_, result, call, bstack1ll11l111l_opy_, outcome)
    driver = getattr(test, bstack1ll1_opy_ (u"ࠧࡠࡦࡵ࡭ࡻ࡫ࡲࠨᨏ"), None)
    if bstack1ll11l111l_opy_ == bstack1ll1_opy_ (u"ࠨࡖࡨࡷࡹࡘࡵ࡯ࡕࡷࡥࡷࡺࡥࡥࠩᨐ") and driver:
        bstack11l1l1ll11_opy_[bstack1ll1_opy_ (u"ࠩ࡬ࡲࡹ࡫ࡧࡳࡣࡷ࡭ࡴࡴࡳࠨᨑ")] = bstack11lll111_opy_.bstack11l1l1llll_opy_(driver)
    if bstack1ll11l111l_opy_ == bstack1ll1_opy_ (u"ࠪࡘࡪࡹࡴࡓࡷࡱࡗࡰ࡯ࡰࡱࡧࡧࠫᨒ"):
        bstack1ll11l111l_opy_ = bstack1ll1_opy_ (u"࡙ࠫ࡫ࡳࡵࡔࡸࡲࡋ࡯࡮ࡪࡵ࡫ࡩࡩ࠭ᨓ")
    bstack11l1111111_opy_ = {
        bstack1ll1_opy_ (u"ࠬ࡫ࡶࡦࡰࡷࡣࡹࡿࡰࡦࠩᨔ"): bstack1ll11l111l_opy_,
        bstack1ll1_opy_ (u"࠭ࡴࡦࡵࡷࡣࡷࡻ࡮ࠨᨕ"): bstack11l1l1ll11_opy_
    }
    bstack11lll111_opy_.bstack11lll1llll_opy_(bstack11l1111111_opy_)
    if bstack1ll11l111l_opy_ == bstack1ll1_opy_ (u"ࠧࡕࡧࡶࡸࡗࡻ࡮ࡔࡶࡤࡶࡹ࡫ࡤࠨᨖ"):
        threading.current_thread().bstackTestMeta = {bstack1ll1_opy_ (u"ࠨࡵࡷࡥࡹࡻࡳࠨᨗ"): bstack1ll1_opy_ (u"ࠩࡳࡩࡳࡪࡩ࡯ࡩᨘࠪ")}
    elif bstack1ll11l111l_opy_ == bstack1ll1_opy_ (u"ࠪࡘࡪࡹࡴࡓࡷࡱࡊ࡮ࡴࡩࡴࡪࡨࡨࠬᨙ"):
        threading.current_thread().bstackTestMeta = {bstack1ll1_opy_ (u"ࠫࡸࡺࡡࡵࡷࡶࠫᨚ"): getattr(result, bstack1ll1_opy_ (u"ࠬࡵࡵࡵࡥࡲࡱࡪ࠭ᨛ"), bstack1ll1_opy_ (u"࠭ࠧ᨜"))}
def bstack1l1ll11l1ll_opy_(test, bstack11l11ll111_opy_, bstack1ll11l111l_opy_, result=None, call=None, outcome=None, bstack1l1ll1l11l1_opy_=None):
    logger.debug(bstack1ll1_opy_ (u"ࠧࡴࡧࡱࡨࡤ࡮࡯ࡰ࡭ࡢࡶࡺࡴ࡟ࡦࡸࡨࡲࡹࡀࠠࡂࡶࡷࡩࡲࡶࡴࡪࡰࡪࠤࡹࡵࠠࡨࡧࡱࡩࡷࡧࡴࡦࠢ࡫ࡳࡴࡱࠠࡥࡣࡷࡥ࠱ࠦࡥࡷࡧࡱࡸ࡙ࡿࡰࡦࠢ࠰ࠤࢀࢃࠧ᨝").format(bstack1ll11l111l_opy_))
    hook_data = bstack1l1ll11l1l1_opy_(test, bstack11l11ll111_opy_, bstack1ll11l111l_opy_, result, call, outcome, bstack1l1ll1l11l1_opy_)
    bstack11l1111111_opy_ = {
        bstack1ll1_opy_ (u"ࠨࡧࡹࡩࡳࡺ࡟ࡵࡻࡳࡩࠬ᨞"): bstack1ll11l111l_opy_,
        bstack1ll1_opy_ (u"ࠩ࡫ࡳࡴࡱ࡟ࡳࡷࡱࠫ᨟"): hook_data
    }
    bstack11lll111_opy_.bstack11lll1llll_opy_(bstack11l1111111_opy_)
def bstack111lll11ll_opy_(bstack11l11ll111_opy_):
    if not bstack11l11ll111_opy_:
        return None
    if bstack11l11ll111_opy_.get(bstack1ll1_opy_ (u"ࠪࡸࡪࡹࡴࡠࡦࡤࡸࡦ࠭ᨠ"), None):
        return getattr(bstack11l11ll111_opy_[bstack1ll1_opy_ (u"ࠫࡹ࡫ࡳࡵࡡࡧࡥࡹࡧࠧᨡ")], bstack1ll1_opy_ (u"ࠬࡻࡵࡪࡦࠪᨢ"), None)
    return bstack11l11ll111_opy_.get(bstack1ll1_opy_ (u"࠭ࡵࡶ࡫ࡧࠫᨣ"), None)
@pytest.fixture(autouse=True)
def second_fixture(caplog, request):
    yield
    try:
        if not bstack11lll111_opy_.on():
            return
        places = [bstack1ll1_opy_ (u"ࠧࡴࡧࡷࡹࡵ࠭ᨤ"), bstack1ll1_opy_ (u"ࠨࡥࡤࡰࡱ࠭ᨥ"), bstack1ll1_opy_ (u"ࠩࡷࡩࡦࡸࡤࡰࡹࡱࠫᨦ")]
        bstack11l11lll1l_opy_ = []
        for bstack1l1ll1111l1_opy_ in places:
            records = caplog.get_records(bstack1l1ll1111l1_opy_)
            bstack1l1ll11llll_opy_ = bstack1ll1_opy_ (u"ࠪࡸࡪࡹࡴࡠࡴࡸࡲࡤࡻࡵࡪࡦࠪᨧ") if bstack1l1ll1111l1_opy_ == bstack1ll1_opy_ (u"ࠫࡨࡧ࡬࡭ࠩᨨ") else bstack1ll1_opy_ (u"ࠬ࡮࡯ࡰ࡭ࡢࡶࡺࡴ࡟ࡶࡷ࡬ࡨࠬᨩ")
            bstack1l1ll1l1lll_opy_ = request.node.nodeid + (bstack1ll1_opy_ (u"࠭ࠧᨪ") if bstack1l1ll1111l1_opy_ == bstack1ll1_opy_ (u"ࠧࡤࡣ࡯ࡰࠬᨫ") else bstack1ll1_opy_ (u"ࠨ࠯ࠪᨬ") + bstack1l1ll1111l1_opy_)
            bstack11l1ll1ll1_opy_ = bstack111lll11ll_opy_(_111lll1lll_opy_.get(bstack1l1ll1l1lll_opy_, None))
            if not bstack11l1ll1ll1_opy_:
                continue
            for record in records:
                if bstack1lllll1ll11_opy_(record.message):
                    continue
                bstack11l11lll1l_opy_.append({
                    bstack1ll1_opy_ (u"ࠩࡷ࡭ࡲ࡫ࡳࡵࡣࡰࡴࠬᨭ"): bstack1lllll11ll1_opy_(record.created).isoformat() + bstack1ll1_opy_ (u"ࠪ࡞ࠬᨮ"),
                    bstack1ll1_opy_ (u"ࠫࡱ࡫ࡶࡦ࡮ࠪᨯ"): record.levelname,
                    bstack1ll1_opy_ (u"ࠬࡳࡥࡴࡵࡤ࡫ࡪ࠭ᨰ"): record.message,
                    bstack1l1ll11llll_opy_: bstack11l1ll1ll1_opy_
                })
        if len(bstack11l11lll1l_opy_) > 0:
            bstack11lll111_opy_.bstack11lll1l11l_opy_(bstack11l11lll1l_opy_)
    except Exception as err:
        print(bstack1ll1_opy_ (u"࠭ࡅࡹࡥࡨࡴࡹ࡯࡯࡯ࠢ࡬ࡲࠥࡹࡥࡤࡱࡱࡨࡤ࡬ࡩࡹࡶࡸࡶࡪࡀࠠࡼࡿࠪᨱ"), str(err))
def bstack1ll1llll_opy_(sequence, driver_command, response=None, driver = None, args = None):
    global bstack11ll11ll11_opy_
    bstack1111111ll_opy_ = bstack111lllll1_opy_(threading.current_thread(), bstack1ll1_opy_ (u"ࠧࡪࡵࡄ࠵࠶ࡿࡔࡦࡵࡷࠫᨲ"), None) and bstack111lllll1_opy_(
            threading.current_thread(), bstack1ll1_opy_ (u"ࠨࡣ࠴࠵ࡾࡖ࡬ࡢࡶࡩࡳࡷࡳࠧᨳ"), None)
    bstack111l1l111_opy_ = getattr(driver, bstack1ll1_opy_ (u"ࠩࡥࡷࡹࡧࡣ࡬ࡃ࠴࠵ࡾ࡙ࡨࡰࡷ࡯ࡨࡘࡩࡡ࡯ࠩᨴ"), None) != None and getattr(driver, bstack1ll1_opy_ (u"ࠪࡦࡸࡺࡡࡤ࡭ࡄ࠵࠶ࡿࡓࡩࡱࡸࡰࡩ࡙ࡣࡢࡰࠪᨵ"), None) == True
    if sequence == bstack1ll1_opy_ (u"ࠫࡧ࡫ࡦࡰࡴࡨࠫᨶ") and driver != None:
      if not bstack11ll11ll11_opy_ and bstack1lllll1l111_opy_() and bstack1ll1_opy_ (u"ࠬࡧࡣࡤࡧࡶࡷ࡮ࡨࡩ࡭࡫ࡷࡽࠬᨷ") in CONFIG and CONFIG[bstack1ll1_opy_ (u"࠭ࡡࡤࡥࡨࡷࡸ࡯ࡢࡪ࡮࡬ࡸࡾ࠭ᨸ")] == True and bstack1llll11111_opy_.bstack1lll1ll11l_opy_(driver_command) and (bstack111l1l111_opy_ or bstack1111111ll_opy_) and not bstack11l11lll1_opy_(args):
        try:
          bstack11ll11ll11_opy_ = True
          logger.debug(bstack1ll1_opy_ (u"ࠧࡑࡧࡵࡪࡴࡸ࡭ࡪࡰࡪࠤࡸࡩࡡ࡯ࠢࡩࡳࡷࠦࡻࡾࠩᨹ").format(driver_command))
          logger.debug(perform_scan(driver, driver_command=driver_command))
        except Exception as err:
          logger.debug(bstack1ll1_opy_ (u"ࠨࡈࡤ࡭ࡱ࡫ࡤࠡࡶࡲࠤࡵ࡫ࡲࡧࡱࡵࡱࠥࡹࡣࡢࡰࠣࡿࢂ࠭ᨺ").format(str(err)))
        bstack11ll11ll11_opy_ = False
    if sequence == bstack1ll1_opy_ (u"ࠩࡤࡪࡹ࡫ࡲࠨᨻ"):
        if driver_command == bstack1ll1_opy_ (u"ࠪࡷࡨࡸࡥࡦࡰࡶ࡬ࡴࡺࠧᨼ"):
            bstack11lll111_opy_.bstack1ll1111l11_opy_({
                bstack1ll1_opy_ (u"ࠫ࡮ࡳࡡࡨࡧࠪᨽ"): response[bstack1ll1_opy_ (u"ࠬࡼࡡ࡭ࡷࡨࠫᨾ")],
                bstack1ll1_opy_ (u"࠭ࡴࡦࡵࡷࡣࡷࡻ࡮ࡠࡷࡸ࡭ࡩ࠭ᨿ"): store[bstack1ll1_opy_ (u"ࠧࡤࡷࡵࡶࡪࡴࡴࡠࡶࡨࡷࡹࡥࡵࡶ࡫ࡧࠫᩀ")]
            })
def bstack11ll111ll_opy_():
    global bstack1ll11l1l1_opy_
    bstack1ll1l111_opy_.bstack11lll1l11_opy_()
    logging.shutdown()
    bstack11lll111_opy_.bstack11l111l1l1_opy_()
    for driver in bstack1ll11l1l1_opy_:
        try:
            driver.quit()
        except Exception as e:
            pass
def bstack1l1l1lllll1_opy_(*args):
    global bstack1ll11l1l1_opy_
    bstack11lll111_opy_.bstack11l111l1l1_opy_()
    for driver in bstack1ll11l1l1_opy_:
        try:
            driver.quit()
        except Exception as e:
            pass
@measure(event_name=EVENTS.bstack11l1l1l1l_opy_, stage=STAGE.SINGLE, bstack11ll1111l1_opy_=bstack1l1l11111l_opy_)
def bstack11llll1lll_opy_(self, *args, **kwargs):
    bstack11111111l_opy_ = bstack1lll11ll1_opy_(self, *args, **kwargs)
    bstack1lll1111l_opy_ = getattr(threading.current_thread(), bstack1ll1_opy_ (u"ࠨࡤࡶࡸࡦࡩ࡫ࡕࡧࡶࡸࡒ࡫ࡴࡢࠩᩁ"), None)
    if bstack1lll1111l_opy_ and bstack1lll1111l_opy_.get(bstack1ll1_opy_ (u"ࠩࡶࡸࡦࡺࡵࡴࠩᩂ"), bstack1ll1_opy_ (u"ࠪࠫᩃ")) == bstack1ll1_opy_ (u"ࠫࡵ࡫࡮ࡥ࡫ࡱ࡫ࠬᩄ"):
        bstack11lll111_opy_.bstack11111l11_opy_(self)
    return bstack11111111l_opy_
@measure(event_name=EVENTS.bstack1llll1l1ll_opy_, stage=STAGE.bstack1ll11ll111_opy_, bstack11ll1111l1_opy_=bstack1l1l11111l_opy_)
def bstack1llll111_opy_(framework_name):
    from bstack_utils.config import Config
    bstack111l1l11_opy_ = Config.bstack1lll1lll_opy_()
    if bstack111l1l11_opy_.get_property(bstack1ll1_opy_ (u"ࠬࡨࡳࡵࡣࡦ࡯ࡤࡳ࡯ࡥࡡࡦࡥࡱࡲࡥࡥࠩᩅ")):
        return
    bstack111l1l11_opy_.bstack1l1ll1l1l_opy_(bstack1ll1_opy_ (u"࠭ࡢࡴࡶࡤࡧࡰࡥ࡭ࡰࡦࡢࡧࡦࡲ࡬ࡦࡦࠪᩆ"), True)
    global bstack111111l11_opy_
    global bstack1ll111l1l_opy_
    bstack111111l11_opy_ = framework_name
    logger.info(bstack1l1l11ll_opy_.format(bstack111111l11_opy_.split(bstack1ll1_opy_ (u"ࠧ࠮ࠩᩇ"))[0]))
    try:
        from selenium import webdriver
        from selenium.webdriver.common.service import Service
        from selenium.webdriver.remote.webdriver import WebDriver
        if bstack1lllll1l111_opy_():
            Service.start = bstack111ll11ll_opy_
            Service.stop = bstack1111l1lll_opy_
            webdriver.Remote.__init__ = bstack1111llll1_opy_
            webdriver.Remote.get = bstack11l1l111l_opy_
            if not isinstance(os.getenv(bstack1ll1_opy_ (u"ࠨࡄࡕࡓ࡜࡙ࡅࡓࡕࡗࡅࡈࡑ࡟ࡑ࡛ࡗࡉࡘ࡚࡟ࡑࡃࡕࡅࡑࡒࡅࡍࠩᩈ")), str):
                return
            WebDriver.close = bstack11lllll1l1_opy_
            WebDriver.quit = bstack11ll1l11_opy_
            WebDriver.getAccessibilityResults = getAccessibilityResults
            WebDriver.get_accessibility_results = getAccessibilityResults
            WebDriver.getAccessibilityResultsSummary = getAccessibilityResultsSummary
            WebDriver.get_accessibility_results_summary = getAccessibilityResultsSummary
            WebDriver.performScan = perform_scan
            WebDriver.perform_scan = perform_scan
        if not bstack1lllll1l111_opy_() and bstack11lll111_opy_.on():
            webdriver.Remote.__init__ = bstack11llll1lll_opy_
        bstack1ll111l1l_opy_ = True
    except Exception as e:
        pass
    bstack1ll1ll1ll_opy_()
    if os.environ.get(bstack1ll1_opy_ (u"ࠩࡖࡉࡑࡋࡎࡊࡗࡐࡣࡔࡘ࡟ࡑࡎࡄ࡝࡜ࡘࡉࡈࡊࡗࡣࡎࡔࡓࡕࡃࡏࡐࡊࡊࠧᩉ")):
        bstack1ll111l1l_opy_ = eval(os.environ.get(bstack1ll1_opy_ (u"ࠪࡗࡊࡒࡅࡏࡋࡘࡑࡤࡕࡒࡠࡒࡏࡅ࡞࡝ࡒࡊࡉࡋࡘࡤࡏࡎࡔࡖࡄࡐࡑࡋࡄࠨᩊ")))
    if not bstack1ll111l1l_opy_:
        bstack1111l111_opy_(bstack1ll1_opy_ (u"ࠦࡕࡧࡣ࡬ࡣࡪࡩࡸࠦ࡮ࡰࡶࠣ࡭ࡳࡹࡴࡢ࡮࡯ࡩࡩࠨᩋ"), bstack1lll111l_opy_)
    if bstack11lll11l11_opy_():
        try:
            from selenium.webdriver.remote.remote_connection import RemoteConnection
            RemoteConnection._111l1llll_opy_ = bstack1ll111lll_opy_
        except Exception as e:
            logger.error(bstack1ll11l11l1_opy_.format(str(e)))
    if bstack1ll1_opy_ (u"ࠬࡶࡹࡵࡧࡶࡸࠬᩌ") in str(framework_name).lower():
        if not bstack1lllll1l111_opy_():
            return
        try:
            from pytest_selenium import pytest_selenium
            from _pytest.config import Config
            pytest_selenium.pytest_report_header = bstack1l11111lll_opy_
            from pytest_selenium.drivers import browserstack
            browserstack.pytest_selenium_runtest_makereport = bstack1lllllll11_opy_
            Config.getoption = bstack111lll11_opy_
        except Exception as e:
            pass
        try:
            from pytest_bdd import reporting
            reporting.runtest_makereport = bstack111l1ll1l_opy_
        except Exception as e:
            pass
@measure(event_name=EVENTS.bstack1lll111lll_opy_, stage=STAGE.SINGLE, bstack11ll1111l1_opy_=bstack1l1l11111l_opy_)
def bstack11ll1l11_opy_(self):
    global bstack111111l11_opy_
    global bstack1llll1111_opy_
    global bstack11ll1llll1_opy_
    try:
        if bstack1ll1_opy_ (u"࠭ࡰࡺࡶࡨࡷࡹ࠭ᩍ") in bstack111111l11_opy_ and self.session_id != None and bstack111lllll1_opy_(threading.current_thread(), bstack1ll1_opy_ (u"ࠧࡵࡧࡶࡸࡘࡺࡡࡵࡷࡶࠫᩎ"), bstack1ll1_opy_ (u"ࠨࠩᩏ")) != bstack1ll1_opy_ (u"ࠩࡶ࡯࡮ࡶࡰࡦࡦࠪᩐ"):
            bstack11ll1lll1l_opy_ = bstack1ll1_opy_ (u"ࠪࡴࡦࡹࡳࡦࡦࠪᩑ") if len(threading.current_thread().bstackTestErrorMessages) == 0 else bstack1ll1_opy_ (u"ࠫ࡫ࡧࡩ࡭ࡧࡧࠫᩒ")
            bstack1l1ll1l11l_opy_(logger, True)
            if self != None:
                bstack1111ll1l_opy_(self, bstack11ll1lll1l_opy_, bstack1ll1_opy_ (u"ࠬ࠲ࠠࠨᩓ").join(threading.current_thread().bstackTestErrorMessages))
        item = store.get(bstack1ll1_opy_ (u"࠭ࡣࡶࡴࡵࡩࡳࡺ࡟ࡵࡧࡶࡸࡤ࡯ࡴࡦ࡯ࠪᩔ"), None)
        if item is not None and bstack111lllll1_opy_(threading.current_thread(), bstack1ll1_opy_ (u"ࠧࡢ࠳࠴ࡽࡕࡲࡡࡵࡨࡲࡶࡲ࠭ᩕ"), None):
            bstack1l1111l111_opy_.bstack1l111l1l1l_opy_(self, bstack111l1l1ll_opy_, logger, item)
        threading.current_thread().testStatus = bstack1ll1_opy_ (u"ࠨࠩᩖ")
    except Exception as e:
        logger.debug(bstack1ll1_opy_ (u"ࠤࡈࡶࡷࡵࡲࠡࡹ࡫࡭ࡱ࡫ࠠ࡮ࡣࡵ࡯࡮ࡴࡧࠡࡵࡷࡥࡹࡻࡳ࠻ࠢࠥᩗ") + str(e))
    bstack11ll1llll1_opy_(self)
    self.session_id = None
@measure(event_name=EVENTS.bstack11lllll1_opy_, stage=STAGE.SINGLE, bstack11ll1111l1_opy_=bstack1l1l11111l_opy_)
def bstack1111llll1_opy_(self, command_executor,
             desired_capabilities=None, browser_profile=None, proxy=None,
             keep_alive=True, file_detector=None, options=None):
    global CONFIG
    global bstack1llll1111_opy_
    global bstack1l1l11111l_opy_
    global bstack1lllllllll_opy_
    global bstack111111l11_opy_
    global bstack1lll11ll1_opy_
    global bstack1ll11l1l1_opy_
    global bstack11lll1l1ll_opy_
    global bstack1ll11lll1_opy_
    global bstack111l1l1ll_opy_
    CONFIG[bstack1ll1_opy_ (u"ࠪࡦࡷࡵࡷࡴࡧࡵࡷࡹࡧࡣ࡬ࡕࡇࡏࠬᩘ")] = str(bstack111111l11_opy_) + str(__version__)
    command_executor = bstack1ll11lll_opy_(bstack11lll1l1ll_opy_, CONFIG)
    logger.debug(bstack11111l1l1_opy_.format(command_executor))
    proxy = bstack1l1l1ll11_opy_(CONFIG, proxy)
    bstack1lll1l111l_opy_ = 0
    try:
        if bstack1lllllllll_opy_ is True:
            bstack1lll1l111l_opy_ = int(os.environ.get(bstack1ll1_opy_ (u"ࠫࡇࡘࡏࡘࡕࡈࡖࡘ࡚ࡁࡄࡍࡢࡔࡑࡇࡔࡇࡑࡕࡑࡤࡏࡎࡅࡇ࡛ࠫᩙ")))
    except:
        bstack1lll1l111l_opy_ = 0
    bstack11lll1ll1l_opy_ = bstack1111ll1ll_opy_(CONFIG, bstack1lll1l111l_opy_)
    logger.debug(bstack1llll11ll1_opy_.format(str(bstack11lll1ll1l_opy_)))
    bstack111l1l1ll_opy_ = CONFIG.get(bstack1ll1_opy_ (u"ࠬࡶ࡬ࡢࡶࡩࡳࡷࡳࡳࠨᩚ"))[bstack1lll1l111l_opy_]
    if bstack1ll1_opy_ (u"࠭ࡢࡳࡱࡺࡷࡪࡸࡳࡵࡣࡦ࡯ࡑࡵࡣࡢ࡮ࠪᩛ") in CONFIG and CONFIG[bstack1ll1_opy_ (u"ࠧࡣࡴࡲࡻࡸ࡫ࡲࡴࡶࡤࡧࡰࡒ࡯ࡤࡣ࡯ࠫᩜ")]:
        bstack1l1l11l1_opy_(bstack11lll1ll1l_opy_, bstack1ll11lll1_opy_)
    if bstack111lll1l1_opy_.bstack1ll11l1l1l_opy_(CONFIG, bstack1lll1l111l_opy_) and bstack111lll1l1_opy_.bstack1lll1lll1_opy_(bstack11lll1ll1l_opy_, options, desired_capabilities):
        threading.current_thread().a11yPlatform = True
        bstack111lll1l1_opy_.set_capabilities(bstack11lll1ll1l_opy_, CONFIG)
    if desired_capabilities:
        bstack11ll11l1_opy_ = bstack1l111ll11_opy_(desired_capabilities)
        bstack11ll11l1_opy_[bstack1ll1_opy_ (u"ࠨࡷࡶࡩ࡜࠹ࡃࠨᩝ")] = bstack1l11llllll_opy_(CONFIG)
        bstack11lll1111l_opy_ = bstack1111ll1ll_opy_(bstack11ll11l1_opy_)
        if bstack11lll1111l_opy_:
            bstack11lll1ll1l_opy_ = update(bstack11lll1111l_opy_, bstack11lll1ll1l_opy_)
        desired_capabilities = None
    if options:
        bstack1lll11lll1_opy_(options, bstack11lll1ll1l_opy_)
    if not options:
        options = bstack1l1ll11ll1_opy_(bstack11lll1ll1l_opy_)
    if proxy and bstack1l1111l11_opy_() >= version.parse(bstack1ll1_opy_ (u"ࠩ࠷࠲࠶࠶࠮࠱ࠩᩞ")):
        options.proxy(proxy)
    if options and bstack1l1111l11_opy_() >= version.parse(bstack1ll1_opy_ (u"ࠪ࠷࠳࠾࠮࠱ࠩ᩟")):
        desired_capabilities = None
    if (
            not options and not desired_capabilities
    ) or (
            bstack1l1111l11_opy_() < version.parse(bstack1ll1_opy_ (u"ࠫ࠸࠴࠸࠯࠲᩠ࠪ")) and not desired_capabilities
    ):
        desired_capabilities = {}
        desired_capabilities.update(bstack11lll1ll1l_opy_)
    logger.info(bstack1l1l111111_opy_)
    bstack11ll1l111_opy_.end(EVENTS.bstack1llll1l1ll_opy_.value, EVENTS.bstack1llll1l1ll_opy_.value + bstack1ll1_opy_ (u"ࠧࡀࡳࡵࡣࡵࡸࠧᩡ"),
                               EVENTS.bstack1llll1l1ll_opy_.value + bstack1ll1_opy_ (u"ࠨ࠺ࡦࡰࡧࠦᩢ"), True, None)
    if bstack1l1111l11_opy_() >= version.parse(bstack1ll1_opy_ (u"ࠧ࠵࠰࠴࠴࠳࠶ࠧᩣ")):
        bstack1lll11ll1_opy_(self, command_executor=command_executor,
                  options=options, keep_alive=keep_alive, file_detector=file_detector)
    elif bstack1l1111l11_opy_() >= version.parse(bstack1ll1_opy_ (u"ࠨ࠵࠱࠼࠳࠶ࠧᩤ")):
        bstack1lll11ll1_opy_(self, command_executor=command_executor,
                  desired_capabilities=desired_capabilities, options=options,
                  browser_profile=browser_profile, proxy=proxy,
                  keep_alive=keep_alive, file_detector=file_detector)
    elif bstack1l1111l11_opy_() >= version.parse(bstack1ll1_opy_ (u"ࠩ࠵࠲࠺࠹࠮࠱ࠩᩥ")):
        bstack1lll11ll1_opy_(self, command_executor=command_executor,
                  desired_capabilities=desired_capabilities,
                  browser_profile=browser_profile, proxy=proxy,
                  keep_alive=keep_alive, file_detector=file_detector)
    else:
        bstack1lll11ll1_opy_(self, command_executor=command_executor,
                  desired_capabilities=desired_capabilities,
                  browser_profile=browser_profile, proxy=proxy,
                  keep_alive=keep_alive)
    try:
        bstack1lll111l1_opy_ = bstack1ll1_opy_ (u"ࠪࠫᩦ")
        if bstack1l1111l11_opy_() >= version.parse(bstack1ll1_opy_ (u"ࠫ࠹࠴࠰࠯࠲ࡥ࠵ࠬᩧ")):
            bstack1lll111l1_opy_ = self.caps.get(bstack1ll1_opy_ (u"ࠧࡵࡰࡵ࡫ࡰࡥࡱࡎࡵࡣࡗࡵࡰࠧᩨ"))
        else:
            bstack1lll111l1_opy_ = self.capabilities.get(bstack1ll1_opy_ (u"ࠨ࡯ࡱࡶ࡬ࡱࡦࡲࡈࡶࡤࡘࡶࡱࠨᩩ"))
        if bstack1lll111l1_opy_:
            bstack1l1111l11l_opy_(bstack1lll111l1_opy_)
            if bstack1l1111l11_opy_() <= version.parse(bstack1ll1_opy_ (u"ࠧ࠴࠰࠴࠷࠳࠶ࠧᩪ")):
                self.command_executor._url = bstack1ll1_opy_ (u"ࠣࡪࡷࡸࡵࡀ࠯࠰ࠤᩫ") + bstack11lll1l1ll_opy_ + bstack1ll1_opy_ (u"ࠤ࠽࠼࠵࠵ࡷࡥ࠱࡫ࡹࡧࠨᩬ")
            else:
                self.command_executor._url = bstack1ll1_opy_ (u"ࠥ࡬ࡹࡺࡰࡴ࠼࠲࠳ࠧᩭ") + bstack1lll111l1_opy_ + bstack1ll1_opy_ (u"ࠦ࠴ࡽࡤ࠰ࡪࡸࡦࠧᩮ")
            logger.debug(bstack11ll11l111_opy_.format(bstack1lll111l1_opy_))
        else:
            logger.debug(bstack11l11l11l_opy_.format(bstack1ll1_opy_ (u"ࠧࡕࡰࡵ࡫ࡰࡥࡱࠦࡈࡶࡤࠣࡲࡴࡺࠠࡧࡱࡸࡲࡩࠨᩯ")))
    except Exception as e:
        logger.debug(bstack11l11l11l_opy_.format(e))
    bstack1llll1111_opy_ = self.session_id
    if bstack1ll1_opy_ (u"࠭ࡰࡺࡶࡨࡷࡹ࠭ᩰ") in bstack111111l11_opy_:
        threading.current_thread().bstackSessionId = self.session_id
        threading.current_thread().bstackSessionDriver = self
        threading.current_thread().bstackTestErrorMessages = []
        item = store.get(bstack1ll1_opy_ (u"ࠧࡤࡷࡵࡶࡪࡴࡴࡠࡶࡨࡷࡹࡥࡩࡵࡧࡰࠫᩱ"), None)
        if item:
            bstack1l1ll111lll_opy_ = getattr(item, bstack1ll1_opy_ (u"ࠨࡡࡷࡩࡸࡺ࡟ࡤࡣࡶࡩࡤࡹࡴࡢࡴࡷࡩࡩ࠭ᩲ"), False)
            if not getattr(item, bstack1ll1_opy_ (u"ࠩࡢࡨࡷ࡯ࡶࡦࡴࠪᩳ"), None) and bstack1l1ll111lll_opy_:
                setattr(store[bstack1ll1_opy_ (u"ࠪࡧࡺࡸࡲࡦࡰࡷࡣࡹ࡫ࡳࡵࡡ࡬ࡸࡪࡳࠧᩴ")], bstack1ll1_opy_ (u"ࠫࡤࡪࡲࡪࡸࡨࡶࠬ᩵"), self)
        bstack1lll1111l_opy_ = getattr(threading.current_thread(), bstack1ll1_opy_ (u"ࠬࡨࡳࡵࡣࡦ࡯࡙࡫ࡳࡵࡏࡨࡸࡦ࠭᩶"), None)
        if bstack1lll1111l_opy_ and bstack1lll1111l_opy_.get(bstack1ll1_opy_ (u"࠭ࡳࡵࡣࡷࡹࡸ࠭᩷"), bstack1ll1_opy_ (u"ࠧࠨ᩸")) == bstack1ll1_opy_ (u"ࠨࡲࡨࡲࡩ࡯࡮ࡨࠩ᩹"):
            bstack11lll111_opy_.bstack11111l11_opy_(self)
    bstack1ll11l1l1_opy_.append(self)
    if bstack1ll1_opy_ (u"ࠩࡳࡰࡦࡺࡦࡰࡴࡰࡷࠬ᩺") in CONFIG and bstack1ll1_opy_ (u"ࠪࡷࡪࡹࡳࡪࡱࡱࡒࡦࡳࡥࠨ᩻") in CONFIG[bstack1ll1_opy_ (u"ࠫࡵࡲࡡࡵࡨࡲࡶࡲࡹࠧ᩼")][bstack1lll1l111l_opy_]:
        bstack1l1l11111l_opy_ = CONFIG[bstack1ll1_opy_ (u"ࠬࡶ࡬ࡢࡶࡩࡳࡷࡳࡳࠨ᩽")][bstack1lll1l111l_opy_][bstack1ll1_opy_ (u"࠭ࡳࡦࡵࡶ࡭ࡴࡴࡎࡢ࡯ࡨࠫ᩾")]
    logger.debug(bstack1l111llll1_opy_.format(bstack1llll1111_opy_))
@measure(event_name=EVENTS.bstack1l1l111ll1_opy_, stage=STAGE.SINGLE, bstack11ll1111l1_opy_=bstack1l1l11111l_opy_)
def bstack11l1l111l_opy_(self, url):
    global bstack1l11l1l1_opy_
    global CONFIG
    try:
        bstack11ll1l111l_opy_(url, CONFIG, logger)
    except Exception as err:
        logger.debug(bstack1ll11lllll_opy_.format(str(err)))
    try:
        bstack1l11l1l1_opy_(self, url)
    except Exception as e:
        try:
            bstack1ll111ll1l_opy_ = str(e)
            if any(err_msg in bstack1ll111ll1l_opy_ for err_msg in bstack1lll11l111_opy_):
                bstack11ll1l111l_opy_(url, CONFIG, logger, True)
        except Exception as err:
            logger.debug(bstack1ll11lllll_opy_.format(str(err)))
        raise e
def bstack111ll1l1l_opy_(item, when):
    global bstack1ll111111_opy_
    try:
        bstack1ll111111_opy_(item, when)
    except Exception as e:
        pass
def bstack111l1ll1l_opy_(item, call, rep):
    global bstack1l1l1l1lll_opy_
    global bstack1ll11l1l1_opy_
    name = bstack1ll1_opy_ (u"ࠧࠨ᩿")
    try:
        if rep.when == bstack1ll1_opy_ (u"ࠨࡥࡤࡰࡱ࠭᪀"):
            bstack1llll1111_opy_ = threading.current_thread().bstackSessionId
            bstack1l1ll111l11_opy_ = item.config.getoption(bstack1ll1_opy_ (u"ࠩࡶ࡯࡮ࡶࡓࡦࡵࡶ࡭ࡴࡴࡎࡢ࡯ࡨࠫ᪁"))
            try:
                if (str(bstack1l1ll111l11_opy_).lower() != bstack1ll1_opy_ (u"ࠪࡸࡷࡻࡥࠨ᪂")):
                    name = str(rep.nodeid)
                    bstack1l1ll1l11_opy_ = bstack1lll1111l1_opy_(bstack1ll1_opy_ (u"ࠫࡸ࡫ࡴࡔࡧࡶࡷ࡮ࡵ࡮ࡏࡣࡰࡩࠬ᪃"), name, bstack1ll1_opy_ (u"ࠬ࠭᪄"), bstack1ll1_opy_ (u"࠭ࠧ᪅"), bstack1ll1_opy_ (u"ࠧࠨ᪆"), bstack1ll1_opy_ (u"ࠨࠩ᪇"))
                    os.environ[bstack1ll1_opy_ (u"ࠩࡓ࡝࡙ࡋࡓࡕࡡࡗࡉࡘ࡚࡟ࡏࡃࡐࡉࠬ᪈")] = name
                    for driver in bstack1ll11l1l1_opy_:
                        if bstack1llll1111_opy_ == driver.session_id:
                            driver.execute_script(bstack1l1ll1l11_opy_)
            except Exception as e:
                logger.debug(bstack1ll1_opy_ (u"ࠪࡉࡷࡸ࡯ࡳࠢ࡬ࡲࠥࡹࡥࡵࡶ࡬ࡲ࡬ࠦࡳࡦࡵࡶ࡭ࡴࡴࡎࡢ࡯ࡨࠤ࡫ࡵࡲࠡࡲࡼࡸࡪࡹࡴ࠮ࡤࡧࡨࠥࡹࡥࡴࡵ࡬ࡳࡳࡀࠠࡼࡿࠪ᪉").format(str(e)))
            try:
                bstack1llll1l11_opy_(rep.outcome.lower())
                if rep.outcome.lower() != bstack1ll1_opy_ (u"ࠫࡸࡱࡩࡱࡲࡨࡨࠬ᪊"):
                    status = bstack1ll1_opy_ (u"ࠬ࡬ࡡࡪ࡮ࡨࡨࠬ᪋") if rep.outcome.lower() == bstack1ll1_opy_ (u"࠭ࡦࡢ࡫࡯ࡩࡩ࠭᪌") else bstack1ll1_opy_ (u"ࠧࡱࡣࡶࡷࡪࡪࠧ᪍")
                    reason = bstack1ll1_opy_ (u"ࠨࠩ᪎")
                    if status == bstack1ll1_opy_ (u"ࠩࡩࡥ࡮ࡲࡥࡥࠩ᪏"):
                        reason = rep.longrepr.reprcrash.message
                        if (not threading.current_thread().bstackTestErrorMessages):
                            threading.current_thread().bstackTestErrorMessages = []
                        threading.current_thread().bstackTestErrorMessages.append(reason)
                    level = bstack1ll1_opy_ (u"ࠪ࡭ࡳ࡬࡯ࠨ᪐") if status == bstack1ll1_opy_ (u"ࠫࡵࡧࡳࡴࡧࡧࠫ᪑") else bstack1ll1_opy_ (u"ࠬ࡫ࡲࡳࡱࡵࠫ᪒")
                    data = name + bstack1ll1_opy_ (u"࠭ࠠࡱࡣࡶࡷࡪࡪࠡࠨ᪓") if status == bstack1ll1_opy_ (u"ࠧࡱࡣࡶࡷࡪࡪࠧ᪔") else name + bstack1ll1_opy_ (u"ࠨࠢࡩࡥ࡮ࡲࡥࡥࠣࠣࠫ᪕") + reason
                    bstack1l111ll11l_opy_ = bstack1lll1111l1_opy_(bstack1ll1_opy_ (u"ࠩࡤࡲࡳࡵࡴࡢࡶࡨࠫ᪖"), bstack1ll1_opy_ (u"ࠪࠫ᪗"), bstack1ll1_opy_ (u"ࠫࠬ᪘"), bstack1ll1_opy_ (u"ࠬ࠭᪙"), level, data)
                    for driver in bstack1ll11l1l1_opy_:
                        if bstack1llll1111_opy_ == driver.session_id:
                            driver.execute_script(bstack1l111ll11l_opy_)
            except Exception as e:
                logger.debug(bstack1ll1_opy_ (u"࠭ࡅࡳࡴࡲࡶࠥ࡯࡮ࠡࡵࡨࡸࡹ࡯࡮ࡨࠢࡶࡩࡸࡹࡩࡰࡰࠣࡧࡴࡴࡴࡦࡺࡷࠤ࡫ࡵࡲࠡࡲࡼࡸࡪࡹࡴ࠮ࡤࡧࡨࠥࡹࡥࡴࡵ࡬ࡳࡳࡀࠠࡼࡿࠪ᪚").format(str(e)))
    except Exception as e:
        logger.debug(bstack1ll1_opy_ (u"ࠧࡆࡴࡵࡳࡷࠦࡩ࡯ࠢࡪࡩࡹࡺࡩ࡯ࡩࠣࡷࡹࡧࡴࡦࠢ࡬ࡲࠥࡶࡹࡵࡧࡶࡸ࠲ࡨࡤࡥࠢࡷࡩࡸࡺࠠࡴࡶࡤࡸࡺࡹ࠺ࠡࡽࢀࠫ᪛").format(str(e)))
    bstack1l1l1l1lll_opy_(item, call, rep)
notset = Notset()
def bstack111lll11_opy_(self, name: str, default=notset, skip: bool = False):
    global bstack111111l1l_opy_
    if str(name).lower() == bstack1ll1_opy_ (u"ࠨࡦࡵ࡭ࡻ࡫ࡲࠨ᪜"):
        return bstack1ll1_opy_ (u"ࠤࡅࡶࡴࡽࡳࡦࡴࡖࡸࡦࡩ࡫ࠣ᪝")
    else:
        return bstack111111l1l_opy_(self, name, default, skip)
def bstack1ll111lll_opy_(self):
    global CONFIG
    global bstack1lll111111_opy_
    try:
        proxy = bstack1ll1llllll_opy_(CONFIG)
        if proxy:
            if proxy.endswith(bstack1ll1_opy_ (u"ࠪ࠲ࡵࡧࡣࠨ᪞")):
                proxies = bstack1lll11ll_opy_(proxy, bstack1ll11lll_opy_())
                if len(proxies) > 0:
                    protocol, bstack1l1ll11l_opy_ = proxies.popitem()
                    if bstack1ll1_opy_ (u"ࠦ࠿࠵࠯ࠣ᪟") in bstack1l1ll11l_opy_:
                        return bstack1l1ll11l_opy_
                    else:
                        return bstack1ll1_opy_ (u"ࠧ࡮ࡴࡵࡲ࠽࠳࠴ࠨ᪠") + bstack1l1ll11l_opy_
            else:
                return proxy
    except Exception as e:
        logger.error(bstack1ll1_opy_ (u"ࠨࡅࡳࡴࡲࡶࠥ࡯࡮ࠡࡵࡨࡸࡹ࡯࡮ࡨࠢࡳࡶࡴࡾࡹࠡࡷࡵࡰࠥࡀࠠࡼࡿࠥ᪡").format(str(e)))
    return bstack1lll111111_opy_(self)
def bstack11lll11l11_opy_():
    return (bstack1ll1_opy_ (u"ࠧࡩࡶࡷࡴࡕࡸ࡯ࡹࡻࠪ᪢") in CONFIG or bstack1ll1_opy_ (u"ࠨࡪࡷࡸࡵࡹࡐࡳࡱࡻࡽࠬ᪣") in CONFIG) and bstack1l1l111l1_opy_() and bstack1l1111l11_opy_() >= version.parse(
        bstack1l11l11l_opy_)
def bstack111l1l11l_opy_(self,
               executablePath=None,
               channel=None,
               args=None,
               ignoreDefaultArgs=None,
               handleSIGINT=None,
               handleSIGTERM=None,
               handleSIGHUP=None,
               timeout=None,
               env=None,
               headless=None,
               devtools=None,
               proxy=None,
               downloadsPath=None,
               slowMo=None,
               tracesDir=None,
               chromiumSandbox=None,
               firefoxUserPrefs=None
               ):
    global CONFIG
    global bstack1l1l11111l_opy_
    global bstack1lllllllll_opy_
    global bstack111111l11_opy_
    CONFIG[bstack1ll1_opy_ (u"ࠩࡥࡶࡴࡽࡳࡦࡴࡶࡸࡦࡩ࡫ࡔࡆࡎࠫ᪤")] = str(bstack111111l11_opy_) + str(__version__)
    bstack1lll1l111l_opy_ = 0
    try:
        if bstack1lllllllll_opy_ is True:
            bstack1lll1l111l_opy_ = int(os.environ.get(bstack1ll1_opy_ (u"ࠪࡆࡗࡕࡗࡔࡇࡕࡗ࡙ࡇࡃࡌࡡࡓࡐࡆ࡚ࡆࡐࡔࡐࡣࡎࡔࡄࡆ࡚ࠪ᪥")))
    except:
        bstack1lll1l111l_opy_ = 0
    CONFIG[bstack1ll1_opy_ (u"ࠦ࡮ࡹࡐ࡭ࡣࡼࡻࡷ࡯ࡧࡩࡶࠥ᪦")] = True
    bstack11lll1ll1l_opy_ = bstack1111ll1ll_opy_(CONFIG, bstack1lll1l111l_opy_)
    logger.debug(bstack1llll11ll1_opy_.format(str(bstack11lll1ll1l_opy_)))
    if CONFIG.get(bstack1ll1_opy_ (u"ࠬࡨࡲࡰࡹࡶࡩࡷࡹࡴࡢࡥ࡮ࡐࡴࡩࡡ࡭ࠩᪧ")):
        bstack1l1l11l1_opy_(bstack11lll1ll1l_opy_, bstack1ll11lll1_opy_)
    if bstack1ll1_opy_ (u"࠭ࡰ࡭ࡣࡷࡪࡴࡸ࡭ࡴࠩ᪨") in CONFIG and bstack1ll1_opy_ (u"ࠧࡴࡧࡶࡷ࡮ࡵ࡮ࡏࡣࡰࡩࠬ᪩") in CONFIG[bstack1ll1_opy_ (u"ࠨࡲ࡯ࡥࡹ࡬࡯ࡳ࡯ࡶࠫ᪪")][bstack1lll1l111l_opy_]:
        bstack1l1l11111l_opy_ = CONFIG[bstack1ll1_opy_ (u"ࠩࡳࡰࡦࡺࡦࡰࡴࡰࡷࠬ᪫")][bstack1lll1l111l_opy_][bstack1ll1_opy_ (u"ࠪࡷࡪࡹࡳࡪࡱࡱࡒࡦࡳࡥࠨ᪬")]
    import urllib
    import json
    if bstack1ll1_opy_ (u"ࠫࡹࡻࡲࡣࡱࡖࡧࡦࡲࡥࠨ᪭") in CONFIG and str(CONFIG[bstack1ll1_opy_ (u"ࠬࡺࡵࡳࡤࡲࡗࡨࡧ࡬ࡦࠩ᪮")]).lower() != bstack1ll1_opy_ (u"࠭ࡦࡢ࡮ࡶࡩࠬ᪯"):
        bstack1ll1ll11_opy_ = bstack1ll1ll1ll1_opy_()
        bstack11lll1l1_opy_ = bstack1ll1ll11_opy_ + urllib.parse.quote(json.dumps(bstack11lll1ll1l_opy_))
    else:
        bstack11lll1l1_opy_ = bstack1ll1_opy_ (u"ࠧࡸࡵࡶ࠾࠴࠵ࡣࡥࡲ࠱ࡦࡷࡵࡷࡴࡧࡵࡷࡹࡧࡣ࡬࠰ࡦࡳࡲ࠵ࡰ࡭ࡣࡼࡻࡷ࡯ࡧࡩࡶࡂࡧࡦࡶࡳ࠾ࠩ᪰") + urllib.parse.quote(json.dumps(bstack11lll1ll1l_opy_))
    browser = self.connect(bstack11lll1l1_opy_)
    return browser
def bstack1ll1ll1ll_opy_():
    global bstack1ll111l1l_opy_
    global bstack111111l11_opy_
    try:
        from playwright._impl._browser_type import BrowserType
        from bstack_utils.helper import bstack11l111ll_opy_
        if not bstack1lllll1l111_opy_():
            global bstack11l11ll11_opy_
            if not bstack11l11ll11_opy_:
                from bstack_utils.helper import bstack1l11l111l_opy_, bstack11llll1l11_opy_
                bstack11l11ll11_opy_ = bstack1l11l111l_opy_()
                bstack11llll1l11_opy_(bstack111111l11_opy_)
            BrowserType.connect = bstack11l111ll_opy_
            return
        BrowserType.launch = bstack111l1l11l_opy_
        bstack1ll111l1l_opy_ = True
    except Exception as e:
        pass
def bstack1l1ll111l1l_opy_():
    global CONFIG
    global bstack111l11l11_opy_
    global bstack11lll1l1ll_opy_
    global bstack1ll11lll1_opy_
    global bstack1lllllllll_opy_
    global bstack1ll1l11l11_opy_
    CONFIG = json.loads(os.environ.get(bstack1ll1_opy_ (u"ࠨࡄࡕࡓ࡜࡙ࡅࡓࡕࡗࡅࡈࡑ࡟ࡄࡑࡑࡊࡎࡍࠧ᪱")))
    bstack111l11l11_opy_ = eval(os.environ.get(bstack1ll1_opy_ (u"ࠩࡅࡖࡔ࡝ࡓࡆࡔࡖࡘࡆࡉࡋࡠࡋࡖࡣࡆࡖࡐࡠࡃࡘࡘࡔࡓࡁࡕࡇࠪ᪲")))
    bstack11lll1l1ll_opy_ = os.environ.get(bstack1ll1_opy_ (u"ࠪࡆࡗࡕࡗࡔࡇࡕࡗ࡙ࡇࡃࡌࡡࡋ࡙ࡇࡥࡕࡓࡎࠪ᪳"))
    bstack1l11l11111_opy_(CONFIG, bstack111l11l11_opy_)
    bstack1ll1l11l11_opy_ = bstack1ll1l111_opy_.bstack111llll11_opy_(CONFIG, bstack1ll1l11l11_opy_)
    global bstack1lll11ll1_opy_
    global bstack11ll1llll1_opy_
    global bstack1l1l1l1l1_opy_
    global bstack11llllllll_opy_
    global bstack1lllll1ll1_opy_
    global bstack11ll1l1ll_opy_
    global bstack1l1l11lll_opy_
    global bstack1l11l1l1_opy_
    global bstack1lll111111_opy_
    global bstack111111l1l_opy_
    global bstack1ll111111_opy_
    global bstack1l1l1l1lll_opy_
    try:
        from selenium import webdriver
        from selenium.webdriver.remote.webdriver import WebDriver
        bstack1lll11ll1_opy_ = webdriver.Remote.__init__
        bstack11ll1llll1_opy_ = WebDriver.quit
        bstack1l1l11lll_opy_ = WebDriver.close
        bstack1l11l1l1_opy_ = WebDriver.get
    except Exception as e:
        pass
    if (bstack1ll1_opy_ (u"ࠫ࡭ࡺࡴࡱࡒࡵࡳࡽࡿࠧ᪴") in CONFIG or bstack1ll1_opy_ (u"ࠬ࡮ࡴࡵࡲࡶࡔࡷࡵࡸࡺ᪵ࠩ") in CONFIG) and bstack1l1l111l1_opy_():
        if bstack1l1111l11_opy_() < version.parse(bstack1l11l11l_opy_):
            logger.error(bstack1lll1llll1_opy_.format(bstack1l1111l11_opy_()))
        else:
            try:
                from selenium.webdriver.remote.remote_connection import RemoteConnection
                bstack1lll111111_opy_ = RemoteConnection._111l1llll_opy_
            except Exception as e:
                logger.error(bstack1ll11l11l1_opy_.format(str(e)))
    try:
        from _pytest.config import Config
        bstack111111l1l_opy_ = Config.getoption
        from _pytest import runner
        bstack1ll111111_opy_ = runner._update_current_test_var
    except Exception as e:
        logger.warn(e, bstack1ll1l1llll_opy_)
    try:
        from pytest_bdd import reporting
        bstack1l1l1l1lll_opy_ = reporting.runtest_makereport
    except Exception as e:
        logger.debug(bstack1ll1_opy_ (u"࠭ࡐ࡭ࡧࡤࡷࡪࠦࡩ࡯ࡵࡷࡥࡱࡲࠠࡱࡻࡷࡩࡸࡺ࠭ࡣࡦࡧࠤࡹࡵࠠࡳࡷࡱࠤࡵࡿࡴࡦࡵࡷ࠱ࡧࡪࡤࠡࡶࡨࡷࡹࡹ᪶ࠧ"))
    bstack1ll11lll1_opy_ = CONFIG.get(bstack1ll1_opy_ (u"ࠧࡣࡴࡲࡻࡸ࡫ࡲࡔࡶࡤࡧࡰࡒ࡯ࡤࡣ࡯ࡓࡵࡺࡩࡰࡰࡶ᪷ࠫ"), {}).get(bstack1ll1_opy_ (u"ࠨ࡮ࡲࡧࡦࡲࡉࡥࡧࡱࡸ࡮࡬ࡩࡦࡴ᪸ࠪ"))
    bstack1lllllllll_opy_ = True
    bstack1llll111_opy_(bstack1llllllll_opy_)
if (bstack1llll11l111_opy_()):
    bstack1l1ll111l1l_opy_()
@bstack11l11llll1_opy_(class_method=False)
def bstack1l1ll11lll1_opy_(hook_name, event, bstack1l1ll11l111_opy_=None):
    if hook_name not in [bstack1ll1_opy_ (u"ࠩࡶࡩࡹࡻࡰࡠࡨࡸࡲࡨࡺࡩࡰࡰ᪹ࠪ"), bstack1ll1_opy_ (u"ࠪࡸࡪࡧࡲࡥࡱࡺࡲࡤ࡬ࡵ࡯ࡥࡷ࡭ࡴࡴ᪺ࠧ"), bstack1ll1_opy_ (u"ࠫࡸ࡫ࡴࡶࡲࡢࡱࡴࡪࡵ࡭ࡧࠪ᪻"), bstack1ll1_opy_ (u"ࠬࡺࡥࡢࡴࡧࡳࡼࡴ࡟࡮ࡱࡧࡹࡱ࡫ࠧ᪼"), bstack1ll1_opy_ (u"࠭ࡳࡦࡶࡸࡴࡤࡩ࡬ࡢࡵࡶ᪽ࠫ"), bstack1ll1_opy_ (u"ࠧࡵࡧࡤࡶࡩࡵࡷ࡯ࡡࡦࡰࡦࡹࡳࠨ᪾"), bstack1ll1_opy_ (u"ࠨࡵࡨࡸࡺࡶ࡟࡮ࡧࡷ࡬ࡴࡪᪿࠧ"), bstack1ll1_opy_ (u"ࠩࡷࡩࡦࡸࡤࡰࡹࡱࡣࡲ࡫ࡴࡩࡱࡧᫀࠫ")]:
        return
    node = store[bstack1ll1_opy_ (u"ࠪࡧࡺࡸࡲࡦࡰࡷࡣࡹ࡫ࡳࡵࡡ࡬ࡸࡪࡳࠧ᫁")]
    if hook_name in [bstack1ll1_opy_ (u"ࠫࡸ࡫ࡴࡶࡲࡢࡱࡴࡪࡵ࡭ࡧࠪ᫂"), bstack1ll1_opy_ (u"ࠬࡺࡥࡢࡴࡧࡳࡼࡴ࡟࡮ࡱࡧࡹࡱ࡫᫃ࠧ")]:
        node = store[bstack1ll1_opy_ (u"࠭ࡣࡶࡴࡵࡩࡳࡺ࡟࡮ࡱࡧࡹࡱ࡫࡟ࡪࡶࡨࡱ᫄ࠬ")]
    elif hook_name in [bstack1ll1_opy_ (u"ࠧࡴࡧࡷࡹࡵࡥࡣ࡭ࡣࡶࡷࠬ᫅"), bstack1ll1_opy_ (u"ࠨࡶࡨࡥࡷࡪ࡯ࡸࡰࡢࡧࡱࡧࡳࡴࠩ᫆")]:
        node = store[bstack1ll1_opy_ (u"ࠩࡦࡹࡷࡸࡥ࡯ࡶࡢࡧࡱࡧࡳࡴࡡ࡬ࡸࡪࡳࠧ᫇")]
    if event == bstack1ll1_opy_ (u"ࠪࡦࡪ࡬࡯ࡳࡧࠪ᫈"):
        hook_type = bstack1ll11llll11_opy_(hook_name)
        uuid = uuid4().__str__()
        bstack11l11l111l_opy_ = {
            bstack1ll1_opy_ (u"ࠫࡺࡻࡩࡥࠩ᫉"): uuid,
            bstack1ll1_opy_ (u"ࠬࡹࡴࡢࡴࡷࡩࡩࡥࡡࡵ᫊ࠩ"): bstack1l11l1ll1l_opy_(),
            bstack1ll1_opy_ (u"࠭ࡴࡺࡲࡨࠫ᫋"): bstack1ll1_opy_ (u"ࠧࡩࡱࡲ࡯ࠬᫌ"),
            bstack1ll1_opy_ (u"ࠨࡪࡲࡳࡰࡥࡴࡺࡲࡨࠫᫍ"): hook_type,
            bstack1ll1_opy_ (u"ࠩ࡫ࡳࡴࡱ࡟࡯ࡣࡰࡩࠬᫎ"): hook_name
        }
        store[bstack1ll1_opy_ (u"ࠪࡧࡺࡸࡲࡦࡰࡷࡣ࡭ࡵ࡯࡬ࡡࡸࡹ࡮ࡪࠧ᫏")].append(uuid)
        bstack1l1ll1ll11l_opy_ = node.nodeid
        if hook_type == bstack1ll1_opy_ (u"ࠫࡇࡋࡆࡐࡔࡈࡣࡊࡇࡃࡉࠩ᫐"):
            if not _111lll1lll_opy_.get(bstack1l1ll1ll11l_opy_, None):
                _111lll1lll_opy_[bstack1l1ll1ll11l_opy_] = {bstack1ll1_opy_ (u"ࠬ࡮࡯ࡰ࡭ࡶࠫ᫑"): []}
            _111lll1lll_opy_[bstack1l1ll1ll11l_opy_][bstack1ll1_opy_ (u"࠭ࡨࡰࡱ࡮ࡷࠬ᫒")].append(bstack11l11l111l_opy_[bstack1ll1_opy_ (u"ࠧࡶࡷ࡬ࡨࠬ᫓")])
        _111lll1lll_opy_[bstack1l1ll1ll11l_opy_ + bstack1ll1_opy_ (u"ࠨ࠯ࠪ᫔") + hook_name] = bstack11l11l111l_opy_
        bstack1l1ll11l1ll_opy_(node, bstack11l11l111l_opy_, bstack1ll1_opy_ (u"ࠩࡋࡳࡴࡱࡒࡶࡰࡖࡸࡦࡸࡴࡦࡦࠪ᫕"))
    elif event == bstack1ll1_opy_ (u"ࠪࡥ࡫ࡺࡥࡳࠩ᫖"):
        bstack11l1l1l111_opy_ = node.nodeid + bstack1ll1_opy_ (u"ࠫ࠲࠭᫗") + hook_name
        _111lll1lll_opy_[bstack11l1l1l111_opy_][bstack1ll1_opy_ (u"ࠬ࡬ࡩ࡯࡫ࡶ࡬ࡪࡪ࡟ࡢࡶࠪ᫘")] = bstack1l11l1ll1l_opy_()
        bstack1l1ll11ll1l_opy_(_111lll1lll_opy_[bstack11l1l1l111_opy_][bstack1ll1_opy_ (u"࠭ࡵࡶ࡫ࡧࠫ᫙")])
        bstack1l1ll11l1ll_opy_(node, _111lll1lll_opy_[bstack11l1l1l111_opy_], bstack1ll1_opy_ (u"ࠧࡉࡱࡲ࡯ࡗࡻ࡮ࡇ࡫ࡱ࡭ࡸ࡮ࡥࡥࠩ᫚"), bstack1l1ll1l11l1_opy_=bstack1l1ll11l111_opy_)
def bstack1l1ll111111_opy_():
    global bstack1l1ll1l1l11_opy_
    if bstack1l1l1l111l_opy_():
        bstack1l1ll1l1l11_opy_ = bstack1ll1_opy_ (u"ࠨࡲࡼࡸࡪࡹࡴ࠮ࡤࡧࡨࠬ᫛")
    else:
        bstack1l1ll1l1l11_opy_ = bstack1ll1_opy_ (u"ࠩࡳࡽࡹ࡫ࡳࡵࠩ᫜")
@bstack11lll111_opy_.bstack1l1lllll1l1_opy_
def bstack1l1ll11111l_opy_():
    bstack1l1ll111111_opy_()
    if bstack1l1l111l1_opy_():
        bstack111l1l11_opy_ = Config.bstack1lll1lll_opy_()
        if bstack111l1l11_opy_.get_property(bstack1ll1_opy_ (u"ࠪࡦࡸࡺࡡࡤ࡭ࡢࡱࡴࡪ࡟ࡤࡣ࡯ࡰࡪࡪࠧ᫝")):
            return
        bstack1llll11lll_opy_(bstack1ll1llll_opy_)
    try:
        bstack1lll1ll1ll1_opy_(bstack1l1ll11lll1_opy_)
    except Exception as e:
        logger.debug(bstack1ll1_opy_ (u"ࠦࡊࡾࡣࡦࡲࡷ࡭ࡴࡴࠠࡪࡰࠣ࡬ࡴࡵ࡫ࡴࠢࡳࡥࡹࡩࡨ࠻ࠢࡾࢁࠧ᫞").format(e))
bstack1l1ll11111l_opy_()