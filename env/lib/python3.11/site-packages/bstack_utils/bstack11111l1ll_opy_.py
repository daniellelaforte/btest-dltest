# coding: UTF-8
import sys
bstack1l11ll1_opy_ = sys.version_info [0] == 2
bstack1llll1_opy_ = 2048
bstack11l_opy_ = 7
def bstack1ll1_opy_ (bstack1l11l11_opy_):
    global bstack11l11l1_opy_
    bstack1ll1111_opy_ = ord (bstack1l11l11_opy_ [-1])
    bstack1111l_opy_ = bstack1l11l11_opy_ [:-1]
    bstack111lll1_opy_ = bstack1ll1111_opy_ % len (bstack1111l_opy_)
    bstackl_opy_ = bstack1111l_opy_ [:bstack111lll1_opy_] + bstack1111l_opy_ [bstack111lll1_opy_:]
    if bstack1l11ll1_opy_:
        bstack1ll1l1l_opy_ = unicode () .join ([unichr (ord (char) - bstack1llll1_opy_ - (bstack1lll11l_opy_ + bstack1ll1111_opy_) % bstack11l_opy_) for bstack1lll11l_opy_, char in enumerate (bstackl_opy_)])
    else:
        bstack1ll1l1l_opy_ = str () .join ([chr (ord (char) - bstack1llll1_opy_ - (bstack1lll11l_opy_ + bstack1ll1111_opy_) % bstack11l_opy_) for bstack1lll11l_opy_, char in enumerate (bstackl_opy_)])
    return eval (bstack1ll1l1l_opy_)
import json
import os
import threading
from bstack_utils.config import Config
from bstack_utils.constants import EVENTS, STAGE
from bstack_utils.helper import bstack1lllll11lll_opy_, bstack1l11ll11l_opy_, bstack111lllll1_opy_, bstack1l1lll1lll_opy_, \
    bstack1llll11l1l1_opy_
from bstack_utils.measure import measure
def bstack11ll111ll_opy_(bstack1ll11l1111l_opy_):
    for driver in bstack1ll11l1111l_opy_:
        try:
            driver.quit()
        except Exception as e:
            pass
@measure(event_name=EVENTS.bstack11ll11ll1_opy_, stage=STAGE.SINGLE)
def bstack1111ll1l_opy_(driver, status, reason=bstack1ll1_opy_ (u"ࠫࠬᛧ")):
    bstack111l1l11_opy_ = Config.bstack1lll1lll_opy_()
    if bstack111l1l11_opy_.bstack111lll1111_opy_():
        return
    bstack1l1ll1l11_opy_ = bstack1lll1111l1_opy_(bstack1ll1_opy_ (u"ࠬࡹࡥࡵࡕࡨࡷࡸ࡯࡯࡯ࡕࡷࡥࡹࡻࡳࠨᛨ"), bstack1ll1_opy_ (u"࠭ࠧᛩ"), status, reason, bstack1ll1_opy_ (u"ࠧࠨᛪ"), bstack1ll1_opy_ (u"ࠨࠩ᛫"))
    driver.execute_script(bstack1l1ll1l11_opy_)
@measure(event_name=EVENTS.bstack11ll11ll1_opy_, stage=STAGE.SINGLE)
def bstack111lll11l_opy_(page, status, reason=bstack1ll1_opy_ (u"ࠩࠪ᛬")):
    try:
        if page is None:
            return
        bstack111l1l11_opy_ = Config.bstack1lll1lll_opy_()
        if bstack111l1l11_opy_.bstack111lll1111_opy_():
            return
        bstack1l1ll1l11_opy_ = bstack1lll1111l1_opy_(bstack1ll1_opy_ (u"ࠪࡷࡪࡺࡓࡦࡵࡶ࡭ࡴࡴࡓࡵࡣࡷࡹࡸ࠭᛭"), bstack1ll1_opy_ (u"ࠫࠬᛮ"), status, reason, bstack1ll1_opy_ (u"ࠬ࠭ᛯ"), bstack1ll1_opy_ (u"࠭ࠧᛰ"))
        page.evaluate(bstack1ll1_opy_ (u"ࠢࡠࠢࡀࡂࠥࢁࡽࠣᛱ"), bstack1l1ll1l11_opy_)
    except Exception as e:
        print(bstack1ll1_opy_ (u"ࠣࡇࡻࡧࡪࡶࡴࡪࡱࡱࠤ࡮ࡴࠠࡴࡧࡷࡸ࡮ࡴࡧࠡࡵࡨࡷࡸ࡯࡯࡯ࠢࡶࡸࡦࡺࡵࡴࠢࡩࡳࡷࠦࡰ࡭ࡣࡼࡻࡷ࡯ࡧࡩࡶࠣࡿࢂࠨᛲ"), e)
def bstack1lll1111l1_opy_(type, name, status, reason, bstack1l1l111l11_opy_, bstack11l111l11_opy_):
    bstack1lll1l1lll_opy_ = {
        bstack1ll1_opy_ (u"ࠩࡤࡧࡹ࡯࡯࡯ࠩᛳ"): type,
        bstack1ll1_opy_ (u"ࠪࡥࡷ࡭ࡵ࡮ࡧࡱࡸࡸ࠭ᛴ"): {}
    }
    if type == bstack1ll1_opy_ (u"ࠫࡦࡴ࡮ࡰࡶࡤࡸࡪ࠭ᛵ"):
        bstack1lll1l1lll_opy_[bstack1ll1_opy_ (u"ࠬࡧࡲࡨࡷࡰࡩࡳࡺࡳࠨᛶ")][bstack1ll1_opy_ (u"࠭࡬ࡦࡸࡨࡰࠬᛷ")] = bstack1l1l111l11_opy_
        bstack1lll1l1lll_opy_[bstack1ll1_opy_ (u"ࠧࡢࡴࡪࡹࡲ࡫࡮ࡵࡵࠪᛸ")][bstack1ll1_opy_ (u"ࠨࡦࡤࡸࡦ࠭᛹")] = json.dumps(str(bstack11l111l11_opy_))
    if type == bstack1ll1_opy_ (u"ࠩࡶࡩࡹ࡙ࡥࡴࡵ࡬ࡳࡳࡔࡡ࡮ࡧࠪ᛺"):
        bstack1lll1l1lll_opy_[bstack1ll1_opy_ (u"ࠪࡥࡷ࡭ࡵ࡮ࡧࡱࡸࡸ࠭᛻")][bstack1ll1_opy_ (u"ࠫࡳࡧ࡭ࡦࠩ᛼")] = name
    if type == bstack1ll1_opy_ (u"ࠬࡹࡥࡵࡕࡨࡷࡸ࡯࡯࡯ࡕࡷࡥࡹࡻࡳࠨ᛽"):
        bstack1lll1l1lll_opy_[bstack1ll1_opy_ (u"࠭ࡡࡳࡩࡸࡱࡪࡴࡴࡴࠩ᛾")][bstack1ll1_opy_ (u"ࠧࡴࡶࡤࡸࡺࡹࠧ᛿")] = status
        if status == bstack1ll1_opy_ (u"ࠨࡨࡤ࡭ࡱ࡫ࡤࠨᜀ") and str(reason) != bstack1ll1_opy_ (u"ࠤࠥᜁ"):
            bstack1lll1l1lll_opy_[bstack1ll1_opy_ (u"ࠪࡥࡷ࡭ࡵ࡮ࡧࡱࡸࡸ࠭ᜂ")][bstack1ll1_opy_ (u"ࠫࡷ࡫ࡡࡴࡱࡱࠫᜃ")] = json.dumps(str(reason))
    bstack1111l1ll1_opy_ = bstack1ll1_opy_ (u"ࠬࡨࡲࡰࡹࡶࡩࡷࡹࡴࡢࡥ࡮ࡣࡪࡾࡥࡤࡷࡷࡳࡷࡀࠠࡼࡿࠪᜄ").format(json.dumps(bstack1lll1l1lll_opy_))
    return bstack1111l1ll1_opy_
def bstack11ll1l111l_opy_(url, config, logger, bstack1ll11lll1l_opy_=False):
    hostname = bstack1l11ll11l_opy_(url)
    is_private = bstack1l1lll1lll_opy_(hostname)
    try:
        if is_private or bstack1ll11lll1l_opy_:
            file_path = bstack1lllll11lll_opy_(bstack1ll1_opy_ (u"࠭࠮ࡣࡴࡲࡻࡸ࡫ࡲࡴࡶࡤࡧࡰ࠭ᜅ"), bstack1ll1_opy_ (u"ࠧ࠯ࡤࡶࡸࡦࡩ࡫࠮ࡥࡲࡲ࡫࡯ࡧ࠯࡬ࡶࡳࡳ࠭ᜆ"), logger)
            if os.environ.get(bstack1ll1_opy_ (u"ࠨࡄࡕࡓ࡜࡙ࡅࡓࡕࡗࡅࡈࡑ࡟ࡍࡑࡆࡅࡑࡥࡎࡐࡖࡢࡗࡊ࡚࡟ࡆࡔࡕࡓࡗ࠭ᜇ")) and eval(
                    os.environ.get(bstack1ll1_opy_ (u"ࠩࡅࡖࡔ࡝ࡓࡆࡔࡖࡘࡆࡉࡋࡠࡎࡒࡇࡆࡒ࡟ࡏࡑࡗࡣࡘࡋࡔࡠࡇࡕࡖࡔࡘࠧᜈ"))):
                return
            if (bstack1ll1_opy_ (u"ࠪࡦࡷࡵࡷࡴࡧࡵࡷࡹࡧࡣ࡬ࡎࡲࡧࡦࡲࠧᜉ") in config and not config[bstack1ll1_opy_ (u"ࠫࡧࡸ࡯ࡸࡵࡨࡶࡸࡺࡡࡤ࡭ࡏࡳࡨࡧ࡬ࠨᜊ")]):
                os.environ[bstack1ll1_opy_ (u"ࠬࡈࡒࡐ࡙ࡖࡉࡗ࡙ࡔࡂࡅࡎࡣࡑࡕࡃࡂࡎࡢࡒࡔ࡚࡟ࡔࡇࡗࡣࡊࡘࡒࡐࡔࠪᜋ")] = str(True)
                bstack1ll11l11l11_opy_ = {bstack1ll1_opy_ (u"࠭ࡨࡰࡵࡷࡲࡦࡳࡥࠨᜌ"): hostname}
                bstack1llll11l1l1_opy_(bstack1ll1_opy_ (u"ࠧ࠯ࡤࡶࡸࡦࡩ࡫࠮ࡥࡲࡲ࡫࡯ࡧ࠯࡬ࡶࡳࡳ࠭ᜍ"), bstack1ll1_opy_ (u"ࠨࡰࡸࡨ࡬࡫࡟࡭ࡱࡦࡥࡱ࠭ᜎ"), bstack1ll11l11l11_opy_, logger)
    except Exception as e:
        pass
def bstack1l1l11l1_opy_(caps, bstack1ll11l111ll_opy_):
    if bstack1ll1_opy_ (u"ࠩࡥࡷࡹࡧࡣ࡬࠼ࡲࡴࡹ࡯࡯࡯ࡵࠪᜏ") in caps:
        caps[bstack1ll1_opy_ (u"ࠪࡦࡸࡺࡡࡤ࡭࠽ࡳࡵࡺࡩࡰࡰࡶࠫᜐ")][bstack1ll1_opy_ (u"ࠫࡱࡵࡣࡢ࡮ࠪᜑ")] = True
        if bstack1ll11l111ll_opy_:
            caps[bstack1ll1_opy_ (u"ࠬࡨࡳࡵࡣࡦ࡯࠿ࡵࡰࡵ࡫ࡲࡲࡸ࠭ᜒ")][bstack1ll1_opy_ (u"࠭࡬ࡰࡥࡤࡰࡎࡪࡥ࡯ࡶ࡬ࡪ࡮࡫ࡲࠨᜓ")] = bstack1ll11l111ll_opy_
    else:
        caps[bstack1ll1_opy_ (u"ࠧࡣࡴࡲࡻࡸ࡫ࡲࡴࡶࡤࡧࡰ࠴࡬ࡰࡥࡤࡰ᜔ࠬ")] = True
        if bstack1ll11l111ll_opy_:
            caps[bstack1ll1_opy_ (u"ࠨࡤࡵࡳࡼࡹࡥࡳࡵࡷࡥࡨࡱ࠮࡭ࡱࡦࡥࡱࡏࡤࡦࡰࡷ࡭࡫࡯ࡥࡳ᜕ࠩ")] = bstack1ll11l111ll_opy_
def bstack1ll11lllll1_opy_(bstack111lllll11_opy_):
    bstack1ll11l111l1_opy_ = bstack111lllll1_opy_(threading.current_thread(), bstack1ll1_opy_ (u"ࠩࡷࡩࡸࡺࡓࡵࡣࡷࡹࡸ࠭᜖"), bstack1ll1_opy_ (u"ࠪࠫ᜗"))
    if bstack1ll11l111l1_opy_ == bstack1ll1_opy_ (u"ࠫࠬ᜘") or bstack1ll11l111l1_opy_ == bstack1ll1_opy_ (u"ࠬࡹ࡫ࡪࡲࡳࡩࡩ࠭᜙"):
        threading.current_thread().testStatus = bstack111lllll11_opy_
    else:
        if bstack111lllll11_opy_ == bstack1ll1_opy_ (u"࠭ࡦࡢ࡫࡯ࡩࡩ࠭᜚"):
            threading.current_thread().testStatus = bstack111lllll11_opy_