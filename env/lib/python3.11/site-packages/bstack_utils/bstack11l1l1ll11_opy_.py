# coding: UTF-8
import sys
bstack1l11ll1_opy_ = sys.version_info [0] == 2
bstack1llll1_opy_ = 2048
bstack11l_opy_ = 7
def bstack1ll1_opy_ (bstack1l11l11_opy_):
    global bstack11l11l1_opy_
    bstack1ll1111_opy_ = ord (bstack1l11l11_opy_ [-1])
    bstack1111l_opy_ = bstack1l11l11_opy_ [:-1]
    bstack111lll1_opy_ = bstack1ll1111_opy_ % len (bstack1111l_opy_)
    bstackl_opy_ = bstack1111l_opy_ [:bstack111lll1_opy_] + bstack1111l_opy_ [bstack111lll1_opy_:]
    if bstack1l11ll1_opy_:
        bstack1ll1l1l_opy_ = unicode () .join ([unichr (ord (char) - bstack1llll1_opy_ - (bstack1lll11l_opy_ + bstack1ll1111_opy_) % bstack11l_opy_) for bstack1lll11l_opy_, char in enumerate (bstackl_opy_)])
    else:
        bstack1ll1l1l_opy_ = str () .join ([chr (ord (char) - bstack1llll1_opy_ - (bstack1lll11l_opy_ + bstack1ll1111_opy_) % bstack11l_opy_) for bstack1lll11l_opy_, char in enumerate (bstackl_opy_)])
    return eval (bstack1ll1l1l_opy_)
import os
from uuid import uuid4
from bstack_utils.helper import bstack1l11l1ll1l_opy_, bstack1lllll11111_opy_
from bstack_utils.bstack11lll1ll_opy_ import bstack1ll1l11111l_opy_
class bstack11l111l111_opy_:
    def __init__(self, name=None, code=None, uuid=None, file_path=None, bstack11l1lll11l_opy_=None, framework=None, tags=[], scope=[], bstack1ll111ll1ll_opy_=None, bstack1ll111ll111_opy_=True, bstack1ll111l1l1l_opy_=None, bstack1ll11l111l_opy_=None, result=None, duration=None, bstack11l11l1111_opy_=None, meta={}):
        self.bstack11l11l1111_opy_ = bstack11l11l1111_opy_
        self.name = name
        self.code = code
        self.file_path = file_path
        self.uuid = uuid
        if not self.uuid and bstack1ll111ll111_opy_:
            self.uuid = uuid4().__str__()
        self.bstack11l1lll11l_opy_ = bstack11l1lll11l_opy_
        self.framework = framework
        self.tags = tags
        self.scope = scope
        self.bstack1ll111ll1ll_opy_ = bstack1ll111ll1ll_opy_
        self.bstack1ll111l1l1l_opy_ = bstack1ll111l1l1l_opy_
        self.bstack1ll11l111l_opy_ = bstack1ll11l111l_opy_
        self.result = result
        self.duration = duration
        self.meta = meta
        self.hooks = []
    def bstack11l1l1111l_opy_(self):
        if self.uuid:
            return self.uuid
        self.uuid = uuid4().__str__()
        return self.uuid
    def bstack11l1l1l1ll_opy_(self, meta):
        self.meta = meta
    def bstack11l1ll1111_opy_(self, hooks):
        self.hooks = hooks
    def bstack1ll111l11l1_opy_(self):
        bstack1ll1111lll1_opy_ = os.path.relpath(self.file_path, start=os.getcwd())
        return {
            bstack1ll1_opy_ (u"ࠧࡧ࡫࡯ࡩࡤࡴࡡ࡮ࡧࠪ᜛"): bstack1ll1111lll1_opy_,
            bstack1ll1_opy_ (u"ࠨ࡮ࡲࡧࡦࡺࡩࡰࡰࠪ᜜"): bstack1ll1111lll1_opy_,
            bstack1ll1_opy_ (u"ࠩࡹࡧࡤ࡬ࡩ࡭ࡧࡳࡥࡹ࡮ࠧ᜝"): bstack1ll1111lll1_opy_
        }
    def set(self, **kwargs):
        for key, val in kwargs.items():
            if not hasattr(self, key):
                raise TypeError(bstack1ll1_opy_ (u"࡙ࠥࡳ࡫ࡸࡱࡧࡦࡸࡪࡪࠠࡢࡴࡪࡹࡲ࡫࡮ࡵ࠼ࠣࠦ᜞") + key)
            setattr(self, key, val)
    def bstack1ll111lll1l_opy_(self):
        return {
            bstack1ll1_opy_ (u"ࠫࡳࡧ࡭ࡦࠩᜟ"): self.name,
            bstack1ll1_opy_ (u"ࠬࡨ࡯ࡥࡻࠪᜠ"): {
                bstack1ll1_opy_ (u"࠭࡬ࡢࡰࡪࠫᜡ"): bstack1ll1_opy_ (u"ࠧࡱࡻࡷ࡬ࡴࡴࠧᜢ"),
                bstack1ll1_opy_ (u"ࠨࡥࡲࡨࡪ࠭ᜣ"): self.code
            },
            bstack1ll1_opy_ (u"ࠩࡶࡧࡴࡶࡥࡴࠩᜤ"): self.scope,
            bstack1ll1_opy_ (u"ࠪࡸࡦ࡭ࡳࠨᜥ"): self.tags,
            bstack1ll1_opy_ (u"ࠫ࡫ࡸࡡ࡮ࡧࡺࡳࡷࡱࠧᜦ"): self.framework,
            bstack1ll1_opy_ (u"ࠬࡹࡴࡢࡴࡷࡩࡩࡥࡡࡵࠩᜧ"): self.bstack11l1lll11l_opy_
        }
    def bstack1ll1111llll_opy_(self):
        return {
         bstack1ll1_opy_ (u"࠭࡭ࡦࡶࡤࠫᜨ"): self.meta
        }
    def bstack1ll111lllll_opy_(self):
        return {
            bstack1ll1_opy_ (u"ࠧࡤࡷࡶࡸࡴࡳࡒࡦࡴࡸࡲࡕࡧࡲࡢ࡯ࠪᜩ"): {
                bstack1ll1_opy_ (u"ࠨࡴࡨࡶࡺࡴ࡟࡯ࡣࡰࡩࠬᜪ"): self.bstack1ll111ll1ll_opy_
            }
        }
    def bstack1ll111llll1_opy_(self, bstack1ll111l1111_opy_, details):
        step = next(filter(lambda st: st[bstack1ll1_opy_ (u"ࠩ࡬ࡨࠬᜫ")] == bstack1ll111l1111_opy_, self.meta[bstack1ll1_opy_ (u"ࠪࡷࡹ࡫ࡰࡴࠩᜬ")]), None)
        step.update(details)
    def bstack1l1111l1l1_opy_(self, bstack1ll111l1111_opy_):
        step = next(filter(lambda st: st[bstack1ll1_opy_ (u"ࠫ࡮ࡪࠧᜭ")] == bstack1ll111l1111_opy_, self.meta[bstack1ll1_opy_ (u"ࠬࡹࡴࡦࡲࡶࠫᜮ")]), None)
        step.update({
            bstack1ll1_opy_ (u"࠭ࡳࡵࡣࡵࡸࡪࡪ࡟ࡢࡶࠪᜯ"): bstack1l11l1ll1l_opy_()
        })
    def bstack11l1lll1ll_opy_(self, bstack1ll111l1111_opy_, result, duration=None):
        bstack1ll111l1l1l_opy_ = bstack1l11l1ll1l_opy_()
        if bstack1ll111l1111_opy_ is not None and self.meta.get(bstack1ll1_opy_ (u"ࠧࡴࡶࡨࡴࡸ࠭ᜰ")):
            step = next(filter(lambda st: st[bstack1ll1_opy_ (u"ࠨ࡫ࡧࠫᜱ")] == bstack1ll111l1111_opy_, self.meta[bstack1ll1_opy_ (u"ࠩࡶࡸࡪࡶࡳࠨᜲ")]), None)
            step.update({
                bstack1ll1_opy_ (u"ࠪࡪ࡮ࡴࡩࡴࡪࡨࡨࡤࡧࡴࠨᜳ"): bstack1ll111l1l1l_opy_,
                bstack1ll1_opy_ (u"ࠫࡩࡻࡲࡢࡶ࡬ࡳࡳ᜴࠭"): duration if duration else bstack1lllll11111_opy_(step[bstack1ll1_opy_ (u"ࠬࡹࡴࡢࡴࡷࡩࡩࡥࡡࡵࠩ᜵")], bstack1ll111l1l1l_opy_),
                bstack1ll1_opy_ (u"࠭ࡲࡦࡵࡸࡰࡹ࠭᜶"): result.result,
                bstack1ll1_opy_ (u"ࠧࡧࡣ࡬ࡰࡺࡸࡥࠨ᜷"): str(result.exception) if result.exception else None
            })
    def add_step(self, bstack1ll111l111l_opy_):
        if self.meta.get(bstack1ll1_opy_ (u"ࠨࡵࡷࡩࡵࡹࠧ᜸")):
            self.meta[bstack1ll1_opy_ (u"ࠩࡶࡸࡪࡶࡳࠨ᜹")].append(bstack1ll111l111l_opy_)
        else:
            self.meta[bstack1ll1_opy_ (u"ࠪࡷࡹ࡫ࡰࡴࠩ᜺")] = [ bstack1ll111l111l_opy_ ]
    def bstack1ll111l1ll1_opy_(self):
        return {
            bstack1ll1_opy_ (u"ࠫࡺࡻࡩࡥࠩ᜻"): self.bstack11l1l1111l_opy_(),
            **self.bstack1ll111lll1l_opy_(),
            **self.bstack1ll111l11l1_opy_(),
            **self.bstack1ll1111llll_opy_()
        }
    def bstack1ll111ll11l_opy_(self):
        if not self.result:
            return {}
        data = {
            bstack1ll1_opy_ (u"ࠬ࡬ࡩ࡯࡫ࡶ࡬ࡪࡪ࡟ࡢࡶࠪ᜼"): self.bstack1ll111l1l1l_opy_,
            bstack1ll1_opy_ (u"࠭ࡤࡶࡴࡤࡸ࡮ࡵ࡮ࡠ࡫ࡱࡣࡲࡹࠧ᜽"): self.duration,
            bstack1ll1_opy_ (u"ࠧࡳࡧࡶࡹࡱࡺࠧ᜾"): self.result.result
        }
        if data[bstack1ll1_opy_ (u"ࠨࡴࡨࡷࡺࡲࡴࠨ᜿")] == bstack1ll1_opy_ (u"ࠩࡩࡥ࡮ࡲࡥࡥࠩᝀ"):
            data[bstack1ll1_opy_ (u"ࠪࡪࡦ࡯࡬ࡶࡴࡨࡣࡹࡿࡰࡦࠩᝁ")] = self.result.bstack111l1ll1ll_opy_()
            data[bstack1ll1_opy_ (u"ࠫ࡫ࡧࡩ࡭ࡷࡵࡩࠬᝂ")] = [{bstack1ll1_opy_ (u"ࠬࡨࡡࡤ࡭ࡷࡶࡦࡩࡥࠨᝃ"): self.result.bstack1llllll11ll_opy_()}]
        return data
    def bstack1ll111ll1l1_opy_(self):
        return {
            bstack1ll1_opy_ (u"࠭ࡵࡶ࡫ࡧࠫᝄ"): self.bstack11l1l1111l_opy_(),
            **self.bstack1ll111lll1l_opy_(),
            **self.bstack1ll111l11l1_opy_(),
            **self.bstack1ll111ll11l_opy_(),
            **self.bstack1ll1111llll_opy_()
        }
    def bstack11l11ll1l1_opy_(self, event, result=None):
        if result:
            self.result = result
        if bstack1ll1_opy_ (u"ࠧࡔࡶࡤࡶࡹ࡫ࡤࠨᝅ") in event:
            return self.bstack1ll111l1ll1_opy_()
        elif bstack1ll1_opy_ (u"ࠨࡈ࡬ࡲ࡮ࡹࡨࡦࡦࠪᝆ") in event:
            return self.bstack1ll111ll1l1_opy_()
    def bstack11l11l1l1l_opy_(self):
        pass
    def stop(self, time=None, duration=None, result=None):
        self.bstack1ll111l1l1l_opy_ = time if time else bstack1l11l1ll1l_opy_()
        self.duration = duration if duration else bstack1lllll11111_opy_(self.bstack11l1lll11l_opy_, self.bstack1ll111l1l1l_opy_)
        if result:
            self.result = result
class bstack11l1ll111l_opy_(bstack11l111l111_opy_):
    def __init__(self, hooks=[], bstack11l1ll1l1l_opy_={}, *args, **kwargs):
        self.hooks = hooks
        self.bstack11l1ll1l1l_opy_ = bstack11l1ll1l1l_opy_
        super().__init__(*args, **kwargs, bstack1ll11l111l_opy_=bstack1ll1_opy_ (u"ࠩࡷࡩࡸࡺࠧᝇ"))
    @classmethod
    def bstack1ll111l11ll_opy_(cls, scenario, feature, test, **kwargs):
        steps = []
        for step in scenario.steps:
            steps.append({
                bstack1ll1_opy_ (u"ࠪ࡭ࡩ࠭ᝈ"): id(step),
                bstack1ll1_opy_ (u"ࠫࡹ࡫ࡸࡵࠩᝉ"): step.name,
                bstack1ll1_opy_ (u"ࠬࡱࡥࡺࡹࡲࡶࡩ࠭ᝊ"): step.keyword,
            })
        return bstack11l1ll111l_opy_(
            **kwargs,
            meta={
                bstack1ll1_opy_ (u"࠭ࡦࡦࡣࡷࡹࡷ࡫ࠧᝋ"): {
                    bstack1ll1_opy_ (u"ࠧ࡯ࡣࡰࡩࠬᝌ"): feature.name,
                    bstack1ll1_opy_ (u"ࠨࡲࡤࡸ࡭࠭ᝍ"): feature.filename,
                    bstack1ll1_opy_ (u"ࠩࡧࡩࡸࡩࡲࡪࡲࡷ࡭ࡴࡴࠧᝎ"): feature.description
                },
                bstack1ll1_opy_ (u"ࠪࡷࡨ࡫࡮ࡢࡴ࡬ࡳࠬᝏ"): {
                    bstack1ll1_opy_ (u"ࠫࡳࡧ࡭ࡦࠩᝐ"): scenario.name
                },
                bstack1ll1_opy_ (u"ࠬࡹࡴࡦࡲࡶࠫᝑ"): steps,
                bstack1ll1_opy_ (u"࠭ࡥࡹࡣࡰࡴࡱ࡫ࡳࠨᝒ"): bstack1ll1l11111l_opy_(test)
            }
        )
    def bstack1ll111l1l11_opy_(self):
        return {
            bstack1ll1_opy_ (u"ࠧࡩࡱࡲ࡯ࡸ࠭ᝓ"): self.hooks
        }
    def bstack1ll111lll11_opy_(self):
        if self.bstack11l1ll1l1l_opy_:
            return {
                bstack1ll1_opy_ (u"ࠨ࡫ࡱࡸࡪ࡭ࡲࡢࡶ࡬ࡳࡳࡹࠧ᝔"): self.bstack11l1ll1l1l_opy_
            }
        return {}
    def bstack1ll111ll1l1_opy_(self):
        return {
            **super().bstack1ll111ll1l1_opy_(),
            **self.bstack1ll111l1l11_opy_()
        }
    def bstack1ll111l1ll1_opy_(self):
        return {
            **super().bstack1ll111l1ll1_opy_(),
            **self.bstack1ll111lll11_opy_()
        }
    def bstack11l11l1l1l_opy_(self):
        return bstack1ll1_opy_ (u"ࠩࡷࡩࡸࡺ࡟ࡳࡷࡱࠫ᝕")
class bstack11l1ll1lll_opy_(bstack11l111l111_opy_):
    def __init__(self, hook_type, *args,bstack11l1ll1l1l_opy_={}, **kwargs):
        self.hook_type = hook_type
        self.bstack1ll111l1lll_opy_ = None
        self.bstack11l1ll1l1l_opy_ = bstack11l1ll1l1l_opy_
        super().__init__(*args, **kwargs, bstack1ll11l111l_opy_=bstack1ll1_opy_ (u"ࠪ࡬ࡴࡵ࡫ࠨ᝖"))
    def bstack111llll1ll_opy_(self):
        return self.hook_type
    def bstack1ll11l11111_opy_(self):
        return {
            bstack1ll1_opy_ (u"ࠫ࡭ࡵ࡯࡬ࡡࡷࡽࡵ࡫ࠧ᝗"): self.hook_type
        }
    def bstack1ll111ll1l1_opy_(self):
        return {
            **super().bstack1ll111ll1l1_opy_(),
            **self.bstack1ll11l11111_opy_()
        }
    def bstack1ll111l1ll1_opy_(self):
        return {
            **super().bstack1ll111l1ll1_opy_(),
            bstack1ll1_opy_ (u"ࠬࡺࡥࡴࡶࡢࡶࡺࡴ࡟ࡪࡦࠪ᝘"): self.bstack1ll111l1lll_opy_,
            **self.bstack1ll11l11111_opy_()
        }
    def bstack11l11l1l1l_opy_(self):
        return bstack1ll1_opy_ (u"࠭ࡨࡰࡱ࡮ࡣࡷࡻ࡮ࠨ᝙")
    def bstack11l1lll111_opy_(self, bstack1ll111l1lll_opy_):
        self.bstack1ll111l1lll_opy_ = bstack1ll111l1lll_opy_