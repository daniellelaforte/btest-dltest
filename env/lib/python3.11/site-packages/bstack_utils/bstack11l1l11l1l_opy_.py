# coding: UTF-8
import sys
bstack1l11ll1_opy_ = sys.version_info [0] == 2
bstack1llll1_opy_ = 2048
bstack11l_opy_ = 7
def bstack1ll1_opy_ (bstack1l11l11_opy_):
    global bstack11l11l1_opy_
    bstack1ll1111_opy_ = ord (bstack1l11l11_opy_ [-1])
    bstack1111l_opy_ = bstack1l11l11_opy_ [:-1]
    bstack111lll1_opy_ = bstack1ll1111_opy_ % len (bstack1111l_opy_)
    bstackl_opy_ = bstack1111l_opy_ [:bstack111lll1_opy_] + bstack1111l_opy_ [bstack111lll1_opy_:]
    if bstack1l11ll1_opy_:
        bstack1ll1l1l_opy_ = unicode () .join ([unichr (ord (char) - bstack1llll1_opy_ - (bstack1lll11l_opy_ + bstack1ll1111_opy_) % bstack11l_opy_) for bstack1lll11l_opy_, char in enumerate (bstackl_opy_)])
    else:
        bstack1ll1l1l_opy_ = str () .join ([chr (ord (char) - bstack1llll1_opy_ - (bstack1lll11l_opy_ + bstack1ll1111_opy_) % bstack11l_opy_) for bstack1lll11l_opy_, char in enumerate (bstackl_opy_)])
    return eval (bstack1ll1l1l_opy_)
import os
import threading
from bstack_utils.helper import bstack1l1lll1l_opy_
from bstack_utils.constants import bstack11111lllll_opy_, EVENTS, STAGE
from bstack_utils.bstack1ll1l111_opy_ import get_logger
logger = get_logger(__name__)
class bstack1lll11l1_opy_:
    bstack1ll11l1llll_opy_ = None
    @classmethod
    def bstack1ll11111l_opy_(cls):
        if cls.on():
            logger.info(
                bstack1ll1_opy_ (u"࡛ࠫ࡯ࡳࡪࡶࠣ࡬ࡹࡺࡰࡴ࠼࠲࠳ࡴࡨࡳࡦࡴࡹࡥࡧ࡯࡬ࡪࡶࡼ࠲ࡧࡸ࡯ࡸࡵࡨࡶࡸࡺࡡࡤ࡭࠱ࡧࡴࡳ࠯ࡣࡷ࡬ࡰࡩࡹ࠯ࡼࡿࠣࡸࡴࠦࡶࡪࡧࡺࠤࡧࡻࡩ࡭ࡦࠣࡶࡪࡶ࡯ࡳࡶ࠯ࠤ࡮ࡴࡳࡪࡩ࡫ࡸࡸ࠲ࠠࡢࡰࡧࠤࡲࡧ࡮ࡺࠢࡰࡳࡷ࡫ࠠࡥࡧࡥࡹ࡬࡭ࡩ࡯ࡩࠣ࡭ࡳ࡬࡯ࡳ࡯ࡤࡸ࡮ࡵ࡮ࠡࡣ࡯ࡰࠥࡧࡴࠡࡱࡱࡩࠥࡶ࡬ࡢࡥࡨࠥࡡࡴࠧᢒ").format(os.environ[bstack1ll1_opy_ (u"ࠧࡈࡓࡠࡖࡈࡗ࡙ࡕࡐࡔࡡࡅ࡙ࡎࡒࡄࡠࡊࡄࡗࡍࡋࡄࡠࡋࡇࠦᢓ")]))
    @classmethod
    def on(cls):
        if os.environ.get(bstack1ll1_opy_ (u"࠭ࡂࡔࡡࡗࡉࡘ࡚ࡏࡑࡕࡢࡎ࡜࡚ࠧᢔ"), None) is None or os.environ[bstack1ll1_opy_ (u"ࠧࡃࡕࡢࡘࡊ࡙ࡔࡐࡒࡖࡣࡏ࡝ࡔࠨᢕ")] == bstack1ll1_opy_ (u"ࠣࡰࡸࡰࡱࠨᢖ"):
            return False
        return True
    @classmethod
    def bstack1l1lll1ll11_opy_(cls, bs_config, framework=bstack1ll1_opy_ (u"ࠤࠥᢗ")):
        bstack1l1lll111ll_opy_ = False
        for fw in bstack11111lllll_opy_:
            if fw in framework:
                bstack1l1lll111ll_opy_ = True
        return bstack1l1lll1l_opy_(bs_config.get(bstack1ll1_opy_ (u"ࠪࡸࡪࡹࡴࡐࡤࡶࡩࡷࡼࡡࡣ࡫࡯࡭ࡹࡿࠧᢘ"), bstack1l1lll111ll_opy_))
    @classmethod
    def bstack1l1lll1111l_opy_(cls, framework):
        return framework in bstack11111lllll_opy_
    @classmethod
    def bstack1ll1111l111_opy_(cls, bs_config, framework):
        return cls.bstack1l1lll1ll11_opy_(bs_config, framework) is True and cls.bstack1l1lll1111l_opy_(framework)
    @staticmethod
    def current_hook_uuid():
        return getattr(threading.current_thread(), bstack1ll1_opy_ (u"ࠫࡨࡻࡲࡳࡧࡱࡸࡤ࡮࡯ࡰ࡭ࡢࡹࡺ࡯ࡤࠨᢙ"), None)
    @staticmethod
    def bstack11l1l111l1_opy_():
        if getattr(threading.current_thread(), bstack1ll1_opy_ (u"ࠬࡩࡵࡳࡴࡨࡲࡹࡥࡴࡦࡵࡷࡣࡺࡻࡩࡥࠩᢚ"), None):
            return {
                bstack1ll1_opy_ (u"࠭ࡴࡺࡲࡨࠫᢛ"): bstack1ll1_opy_ (u"ࠧࡵࡧࡶࡸࠬᢜ"),
                bstack1ll1_opy_ (u"ࠨࡶࡨࡷࡹࡥࡲࡶࡰࡢࡹࡺ࡯ࡤࠨᢝ"): getattr(threading.current_thread(), bstack1ll1_opy_ (u"ࠩࡦࡹࡷࡸࡥ࡯ࡶࡢࡸࡪࡹࡴࡠࡷࡸ࡭ࡩ࠭ᢞ"), None)
            }
        if getattr(threading.current_thread(), bstack1ll1_opy_ (u"ࠪࡧࡺࡸࡲࡦࡰࡷࡣ࡭ࡵ࡯࡬ࡡࡸࡹ࡮ࡪࠧᢟ"), None):
            return {
                bstack1ll1_opy_ (u"ࠫࡹࡿࡰࡦࠩᢠ"): bstack1ll1_opy_ (u"ࠬ࡮࡯ࡰ࡭ࠪᢡ"),
                bstack1ll1_opy_ (u"࠭ࡨࡰࡱ࡮ࡣࡷࡻ࡮ࡠࡷࡸ࡭ࡩ࠭ᢢ"): getattr(threading.current_thread(), bstack1ll1_opy_ (u"ࠧࡤࡷࡵࡶࡪࡴࡴࡠࡪࡲࡳࡰࡥࡵࡶ࡫ࡧࠫᢣ"), None)
            }
        return None
    @staticmethod
    def bstack1l1ll1lllll_opy_(func):
        def wrap(*args, **kwargs):
            if bstack1lll11l1_opy_.on():
                return func(*args, **kwargs)
            return
        return wrap
    @staticmethod
    def bstack11l111lll1_opy_(test, hook_name=None):
        bstack1l1ll1lll1l_opy_ = test.parent
        if hook_name in [bstack1ll1_opy_ (u"ࠨࡵࡨࡸࡺࡶ࡟ࡤ࡮ࡤࡷࡸ࠭ᢤ"), bstack1ll1_opy_ (u"ࠩࡷࡩࡦࡸࡤࡰࡹࡱࡣࡨࡲࡡࡴࡵࠪᢥ"), bstack1ll1_opy_ (u"ࠪࡷࡪࡺࡵࡱࡡࡰࡳࡩࡻ࡬ࡦࠩᢦ"), bstack1ll1_opy_ (u"ࠫࡹ࡫ࡡࡳࡦࡲࡻࡳࡥ࡭ࡰࡦࡸࡰࡪ࠭ᢧ")]:
            bstack1l1ll1lll1l_opy_ = test
        scope = []
        while bstack1l1ll1lll1l_opy_ is not None:
            scope.append(bstack1l1ll1lll1l_opy_.name)
            bstack1l1ll1lll1l_opy_ = bstack1l1ll1lll1l_opy_.parent
        scope.reverse()
        return scope[2:]
    @staticmethod
    def bstack1l1ll1llll1_opy_(hook_type):
        if hook_type == bstack1ll1_opy_ (u"ࠧࡈࡅࡇࡑࡕࡉࡤࡋࡁࡄࡊࠥᢨ"):
            return bstack1ll1_opy_ (u"ࠨࡓࡦࡶࡸࡴࠥ࡮࡯ࡰ࡭ᢩࠥ")
        elif hook_type == bstack1ll1_opy_ (u"ࠢࡂࡈࡗࡉࡗࡥࡅࡂࡅࡋࠦᢪ"):
            return bstack1ll1_opy_ (u"ࠣࡖࡨࡥࡷࡪ࡯ࡸࡰࠣ࡬ࡴࡵ࡫ࠣ᢫")
    @staticmethod
    def bstack1l1lll11111_opy_(bstack1l1ll1111_opy_):
        try:
            if not bstack1lll11l1_opy_.on():
                return bstack1l1ll1111_opy_
            if os.environ.get(bstack1ll1_opy_ (u"ࠤࡅࡖࡔ࡝ࡓࡆࡔࡖࡘࡆࡉࡋࡠࡔࡈࡖ࡚ࡔࠢ᢬"), None) == bstack1ll1_opy_ (u"ࠥࡸࡷࡻࡥࠣ᢭"):
                tests = os.environ.get(bstack1ll1_opy_ (u"ࠦࡇࡘࡏࡘࡕࡈࡖࡘ࡚ࡁࡄࡍࡢࡖࡊࡘࡕࡏࡡࡗࡉࡘ࡚ࡓࠣ᢮"), None)
                if tests is None or tests == bstack1ll1_opy_ (u"ࠧࡴࡵ࡭࡮ࠥ᢯"):
                    return bstack1l1ll1111_opy_
                bstack1l1ll1111_opy_ = tests.split(bstack1ll1_opy_ (u"࠭ࠬࠨᢰ"))
                return bstack1l1ll1111_opy_
        except Exception as exc:
            logger.debug(bstack1l1lll111l1_opy_ (u"ࠢࡆࡺࡦࡩࡵࡺࡩࡰࡰࠣ࡭ࡳࠦࡲࡦࡴࡸࡲࠥ࡮ࡡ࡯ࡦ࡯ࡩࡷࡀࠠࡼࡵࡷࡶ࠭࡫ࡸࡤࠫࢀࠦᢱ"))
        return bstack1l1ll1111_opy_