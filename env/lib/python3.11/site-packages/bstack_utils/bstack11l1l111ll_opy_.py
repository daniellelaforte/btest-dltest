# coding: UTF-8
import sys
bstack1l11ll1_opy_ = sys.version_info [0] == 2
bstack1llll1_opy_ = 2048
bstack11l_opy_ = 7
def bstack1ll1_opy_ (bstack1l11l11_opy_):
    global bstack11l11l1_opy_
    bstack1ll1111_opy_ = ord (bstack1l11l11_opy_ [-1])
    bstack1111l_opy_ = bstack1l11l11_opy_ [:-1]
    bstack111lll1_opy_ = bstack1ll1111_opy_ % len (bstack1111l_opy_)
    bstackl_opy_ = bstack1111l_opy_ [:bstack111lll1_opy_] + bstack1111l_opy_ [bstack111lll1_opy_:]
    if bstack1l11ll1_opy_:
        bstack1ll1l1l_opy_ = unicode () .join ([unichr (ord (char) - bstack1llll1_opy_ - (bstack1lll11l_opy_ + bstack1ll1111_opy_) % bstack11l_opy_) for bstack1lll11l_opy_, char in enumerate (bstackl_opy_)])
    else:
        bstack1ll1l1l_opy_ = str () .join ([chr (ord (char) - bstack1llll1_opy_ - (bstack1lll11l_opy_ + bstack1ll1111_opy_) % bstack11l_opy_) for bstack1lll11l_opy_, char in enumerate (bstackl_opy_)])
    return eval (bstack1ll1l1l_opy_)
import json
import logging
import os
import datetime
import threading
from bstack_utils.constants import EVENTS, STAGE
from bstack_utils.helper import bstack1111lll1l1_opy_, bstack111l11ll11_opy_, bstack1lll1l11l_opy_, bstack11l11llll1_opy_, bstack1llll1ll1ll_opy_, bstack1llll11llll_opy_, bstack1llll1llll1_opy_, bstack1l11l1ll1l_opy_
from bstack_utils.measure import measure
from bstack_utils.bstack1ll11l1llll_opy_ import bstack1ll11l1l1l1_opy_
import bstack_utils.bstack1lll11l1ll_opy_ as bstack1111l1l1l_opy_
from bstack_utils.bstack11l1l11l1l_opy_ import bstack1lll11l1_opy_
import bstack_utils.bstack111ll1l111_opy_ as bstack111lll1l1_opy_
from bstack_utils.bstack1llll11111_opy_ import bstack1llll11111_opy_
from bstack_utils.bstack11l1l1ll11_opy_ import bstack11l111l111_opy_
bstack1ll11111lll_opy_ = bstack1ll1_opy_ (u"ࠧࡩࡶࡷࡴࡸࡀ࠯࠰ࡥࡲࡰࡱ࡫ࡣࡵࡱࡵ࠱ࡴࡨࡳࡦࡴࡹࡥࡧ࡯࡬ࡪࡶࡼ࠲ࡧࡸ࡯ࡸࡵࡨࡶࡸࡺࡡࡤ࡭࠱ࡧࡴࡳࠧ᝚")
logger = logging.getLogger(__name__)
class bstack11lll111_opy_:
    bstack1ll11l1llll_opy_ = None
    bs_config = None
    bstack1ll111l1_opy_ = None
    @classmethod
    @bstack11l11llll1_opy_(class_method=True)
    @measure(event_name=EVENTS.bstack11111l1lll_opy_, stage=STAGE.SINGLE)
    def launch(cls, bs_config, bstack1ll111l1_opy_):
        cls.bs_config = bs_config
        cls.bstack1ll111l1_opy_ = bstack1ll111l1_opy_
        try:
            cls.bstack1l1lllll1ll_opy_()
            bstack111l1l11l1_opy_ = bstack1111lll1l1_opy_(bs_config)
            bstack1111lllll1_opy_ = bstack111l11ll11_opy_(bs_config)
            data = bstack1111l1l1l_opy_.bstack1ll11111l11_opy_(bs_config, bstack1ll111l1_opy_)
            config = {
                bstack1ll1_opy_ (u"ࠨࡣࡸࡸ࡭࠭᝛"): (bstack111l1l11l1_opy_, bstack1111lllll1_opy_),
                bstack1ll1_opy_ (u"ࠩ࡫ࡩࡦࡪࡥࡳࡵࠪ᝜"): cls.default_headers()
            }
            response = bstack1lll1l11l_opy_(bstack1ll1_opy_ (u"ࠪࡔࡔ࡙ࡔࠨ᝝"), cls.request_url(bstack1ll1_opy_ (u"ࠫࡦࡶࡩ࠰ࡸ࠵࠳ࡧࡻࡩ࡭ࡦࡶࠫ᝞")), data, config)
            if response.status_code != 200:
                bstack1l1llll1l11_opy_ = response.json()
                if bstack1l1llll1l11_opy_[bstack1ll1_opy_ (u"ࠬࡹࡵࡤࡥࡨࡷࡸ࠭᝟")] == False:
                    cls.bstack1l1llll1lll_opy_(bstack1l1llll1l11_opy_)
                    return
                cls.bstack1ll1111l1ll_opy_(bstack1l1llll1l11_opy_[bstack1ll1_opy_ (u"࠭࡯ࡣࡵࡨࡶࡻࡧࡢࡪ࡮࡬ࡸࡾ࠭ᝠ")])
                cls.bstack1ll111111l1_opy_(bstack1l1llll1l11_opy_[bstack1ll1_opy_ (u"ࠧࡢࡥࡦࡩࡸࡹࡩࡣ࡫࡯࡭ࡹࡿࠧᝡ")])
                return None
            bstack1l1llllll11_opy_ = cls.bstack1l1llllllll_opy_(response)
            return bstack1l1llllll11_opy_
        except Exception as error:
            logger.error(bstack1ll1_opy_ (u"ࠣࡇࡻࡧࡪࡶࡴࡪࡱࡱࠤࡼ࡮ࡩ࡭ࡧࠣࡧࡷ࡫ࡡࡵ࡫ࡱ࡫ࠥࡨࡵࡪ࡮ࡧࠤ࡫ࡵࡲࠡࡖࡨࡷࡹࡎࡵࡣ࠼ࠣࡿࢂࠨᝢ").format(str(error)))
            return None
    @classmethod
    @bstack11l11llll1_opy_(class_method=True)
    def stop(cls, bstack1l1llll1111_opy_=None):
        if not bstack1lll11l1_opy_.on() and not bstack111lll1l1_opy_.on():
            return
        if os.environ.get(bstack1ll1_opy_ (u"ࠩࡅࡗࡤ࡚ࡅࡔࡖࡋ࡙ࡇࡥࡊࡘࡖࠪᝣ")) == bstack1ll1_opy_ (u"ࠥࡲࡺࡲ࡬ࠣᝤ") or os.environ.get(bstack1ll1_opy_ (u"ࠫࡇࡘࡏࡘࡕࡈࡖࡘ࡚ࡁࡄࡍࡢࡘࡊ࡙ࡔࡉࡗࡅࡣ࡚࡛ࡉࡅࠩᝥ")) == bstack1ll1_opy_ (u"ࠧࡴࡵ࡭࡮ࠥᝦ"):
            logger.error(bstack1ll1_opy_ (u"࠭ࡅࡹࡥࡨࡴࡹ࡯࡯࡯ࠢ࡬ࡲࠥࡹࡴࡰࡲࠣࡦࡺ࡯࡬ࡥࠢࡵࡩࡶࡻࡥࡴࡶࠣࡸࡴࠦࡔࡦࡵࡷࡌࡺࡨ࠺ࠡࡏ࡬ࡷࡸ࡯࡮ࡨࠢࡤࡹࡹ࡮ࡥ࡯ࡶ࡬ࡧࡦࡺࡩࡰࡰࠣࡸࡴࡱࡥ࡯ࠩᝧ"))
            return {
                bstack1ll1_opy_ (u"ࠧࡴࡶࡤࡸࡺࡹࠧᝨ"): bstack1ll1_opy_ (u"ࠨࡧࡵࡶࡴࡸࠧᝩ"),
                bstack1ll1_opy_ (u"ࠩࡰࡩࡸࡹࡡࡨࡧࠪᝪ"): bstack1ll1_opy_ (u"ࠪࡘࡴࡱࡥ࡯࠱ࡥࡹ࡮ࡲࡤࡊࡆࠣ࡭ࡸࠦࡵ࡯ࡦࡨࡪ࡮ࡴࡥࡥ࠮ࠣࡦࡺ࡯࡬ࡥࠢࡦࡶࡪࡧࡴࡪࡱࡱࠤࡲ࡯ࡧࡩࡶࠣ࡬ࡦࡼࡥࠡࡨࡤ࡭ࡱ࡫ࡤࠨᝫ")
            }
        try:
            cls.bstack1ll11l1llll_opy_.shutdown()
            data = {
                bstack1ll1_opy_ (u"ࠫ࡫࡯࡮ࡪࡵ࡫ࡩࡩࡥࡡࡵࠩᝬ"): bstack1l11l1ll1l_opy_()
            }
            if not bstack1l1llll1111_opy_ is None:
                data[bstack1ll1_opy_ (u"ࠬ࡬ࡩ࡯࡫ࡶ࡬ࡪࡪ࡟࡮ࡧࡷࡥࡩࡧࡴࡢࠩ᝭")] = [{
                    bstack1ll1_opy_ (u"࠭ࡲࡦࡣࡶࡳࡳ࠭ᝮ"): bstack1ll1_opy_ (u"ࠧࡶࡵࡨࡶࡤࡱࡩ࡭࡮ࡨࡨࠬᝯ"),
                    bstack1ll1_opy_ (u"ࠨࡵ࡬࡫ࡳࡧ࡬ࠨᝰ"): bstack1l1llll1111_opy_
                }]
            config = {
                bstack1ll1_opy_ (u"ࠩ࡫ࡩࡦࡪࡥࡳࡵࠪ᝱"): cls.default_headers()
            }
            bstack111111l1l1_opy_ = bstack1ll1_opy_ (u"ࠪࡥࡵ࡯࠯ࡷ࠳࠲ࡦࡺ࡯࡬ࡥࡵ࠲ࡿࢂ࠵ࡳࡵࡱࡳࠫᝲ").format(os.environ[bstack1ll1_opy_ (u"ࠦࡇࡘࡏࡘࡕࡈࡖࡘ࡚ࡁࡄࡍࡢࡘࡊ࡙ࡔࡉࡗࡅࡣ࡚࡛ࡉࡅࠤᝳ")])
            bstack1l1lll1llll_opy_ = cls.request_url(bstack111111l1l1_opy_)
            response = bstack1lll1l11l_opy_(bstack1ll1_opy_ (u"ࠬࡖࡕࡕࠩ᝴"), bstack1l1lll1llll_opy_, data, config)
            if not response.ok:
                raise Exception(bstack1ll1_opy_ (u"ࠨࡓࡵࡱࡳࠤࡷ࡫ࡱࡶࡧࡶࡸࠥࡴ࡯ࡵࠢࡲ࡯ࠧ᝵"))
        except Exception as error:
            logger.error(bstack1ll1_opy_ (u"ࠢࡆࡺࡦࡩࡵࡺࡩࡰࡰࠣ࡭ࡳࠦࡳࡵࡱࡳࠤࡧࡻࡩ࡭ࡦࠣࡶࡪࡷࡵࡦࡵࡷࠤࡹࡵࠠࡕࡧࡶࡸࡍࡻࡢ࠻࠼ࠣࠦ᝶") + str(error))
            return {
                bstack1ll1_opy_ (u"ࠨࡵࡷࡥࡹࡻࡳࠨ᝷"): bstack1ll1_opy_ (u"ࠩࡨࡶࡷࡵࡲࠨ᝸"),
                bstack1ll1_opy_ (u"ࠪࡱࡪࡹࡳࡢࡩࡨࠫ᝹"): str(error)
            }
    @classmethod
    @bstack11l11llll1_opy_(class_method=True)
    def bstack1l1llllllll_opy_(cls, response):
        bstack1l1llll1l11_opy_ = response.json()
        bstack1l1llllll11_opy_ = {}
        if bstack1l1llll1l11_opy_.get(bstack1ll1_opy_ (u"ࠫ࡯ࡽࡴࠨ᝺")) is None:
            os.environ[bstack1ll1_opy_ (u"ࠬࡈࡓࡠࡖࡈࡗ࡙ࡎࡕࡃࡡࡍ࡛࡙࠭᝻")] = bstack1ll1_opy_ (u"࠭࡮ࡶ࡮࡯ࠫ᝼")
        else:
            os.environ[bstack1ll1_opy_ (u"ࠧࡃࡕࡢࡘࡊ࡙ࡔࡉࡗࡅࡣࡏ࡝ࡔࠨ᝽")] = bstack1l1llll1l11_opy_.get(bstack1ll1_opy_ (u"ࠨ࡬ࡺࡸࠬ᝾"), bstack1ll1_opy_ (u"ࠩࡱࡹࡱࡲࠧ᝿"))
        os.environ[bstack1ll1_opy_ (u"ࠪࡆࡗࡕࡗࡔࡇࡕࡗ࡙ࡇࡃࡌࡡࡗࡉࡘ࡚ࡈࡖࡄࡢ࡙࡚ࡏࡄࠨក")] = bstack1l1llll1l11_opy_.get(bstack1ll1_opy_ (u"ࠫࡧࡻࡩ࡭ࡦࡢ࡬ࡦࡹࡨࡦࡦࡢ࡭ࡩ࠭ខ"), bstack1ll1_opy_ (u"ࠬࡴࡵ࡭࡮ࠪគ"))
        if bstack1lll11l1_opy_.bstack1ll1111l111_opy_(cls.bs_config, cls.bstack1ll111l1_opy_.get(bstack1ll1_opy_ (u"࠭ࡦࡳࡣࡰࡩࡼࡵࡲ࡬ࡡࡸࡷࡪࡪࠧឃ"), bstack1ll1_opy_ (u"ࠧࠨង"))) is True:
            bstack1ll11111ll1_opy_, bstack11ll11lll1_opy_, bstack1l1lllllll1_opy_ = cls.bstack1ll1111ll1l_opy_(bstack1l1llll1l11_opy_)
            if bstack1ll11111ll1_opy_ != None and bstack11ll11lll1_opy_ != None:
                bstack1l1llllll11_opy_[bstack1ll1_opy_ (u"ࠨࡱࡥࡷࡪࡸࡶࡢࡤ࡬ࡰ࡮ࡺࡹࠨច")] = {
                    bstack1ll1_opy_ (u"ࠩ࡭ࡻࡹࡥࡴࡰ࡭ࡨࡲࠬឆ"): bstack1ll11111ll1_opy_,
                    bstack1ll1_opy_ (u"ࠪࡦࡺ࡯࡬ࡥࡡ࡫ࡥࡸ࡮ࡥࡥࡡ࡬ࡨࠬជ"): bstack11ll11lll1_opy_,
                    bstack1ll1_opy_ (u"ࠫࡦࡲ࡬ࡰࡹࡢࡷࡨࡸࡥࡦࡰࡶ࡬ࡴࡺࡳࠨឈ"): bstack1l1lllllll1_opy_
                }
            else:
                bstack1l1llllll11_opy_[bstack1ll1_opy_ (u"ࠬࡵࡢࡴࡧࡵࡺࡦࡨࡩ࡭࡫ࡷࡽࠬញ")] = {}
        else:
            bstack1l1llllll11_opy_[bstack1ll1_opy_ (u"࠭࡯ࡣࡵࡨࡶࡻࡧࡢࡪ࡮࡬ࡸࡾ࠭ដ")] = {}
        if bstack111lll1l1_opy_.bstack1111llll11_opy_(cls.bs_config) is True:
            bstack1l1llll11l1_opy_, bstack11ll11lll1_opy_ = cls.bstack1l1llll1l1l_opy_(bstack1l1llll1l11_opy_)
            if bstack1l1llll11l1_opy_ != None and bstack11ll11lll1_opy_ != None:
                bstack1l1llllll11_opy_[bstack1ll1_opy_ (u"ࠧࡢࡥࡦࡩࡸࡹࡩࡣ࡫࡯࡭ࡹࡿࠧឋ")] = {
                    bstack1ll1_opy_ (u"ࠨࡣࡸࡸ࡭ࡥࡴࡰ࡭ࡨࡲࠬឌ"): bstack1l1llll11l1_opy_,
                    bstack1ll1_opy_ (u"ࠩࡥࡹ࡮ࡲࡤࡠࡪࡤࡷ࡭࡫ࡤࡠ࡫ࡧࠫឍ"): bstack11ll11lll1_opy_,
                }
            else:
                bstack1l1llllll11_opy_[bstack1ll1_opy_ (u"ࠪࡥࡨࡩࡥࡴࡵ࡬ࡦ࡮ࡲࡩࡵࡻࠪណ")] = {}
        else:
            bstack1l1llllll11_opy_[bstack1ll1_opy_ (u"ࠫࡦࡩࡣࡦࡵࡶ࡭ࡧ࡯࡬ࡪࡶࡼࠫត")] = {}
        if bstack1l1llllll11_opy_[bstack1ll1_opy_ (u"ࠬࡵࡢࡴࡧࡵࡺࡦࡨࡩ࡭࡫ࡷࡽࠬថ")].get(bstack1ll1_opy_ (u"࠭ࡢࡶ࡫࡯ࡨࡤ࡮ࡡࡴࡪࡨࡨࡤ࡯ࡤࠨទ")) != None or bstack1l1llllll11_opy_[bstack1ll1_opy_ (u"ࠧࡢࡥࡦࡩࡸࡹࡩࡣ࡫࡯࡭ࡹࡿࠧធ")].get(bstack1ll1_opy_ (u"ࠨࡤࡸ࡭ࡱࡪ࡟ࡩࡣࡶ࡬ࡪࡪ࡟ࡪࡦࠪន")) != None:
            cls.bstack1l1lllll11l_opy_(bstack1l1llll1l11_opy_.get(bstack1ll1_opy_ (u"ࠩ࡭ࡻࡹ࠭ប")), bstack1l1llll1l11_opy_.get(bstack1ll1_opy_ (u"ࠪࡦࡺ࡯࡬ࡥࡡ࡫ࡥࡸ࡮ࡥࡥࡡ࡬ࡨࠬផ")))
        return bstack1l1llllll11_opy_
    @classmethod
    def bstack1ll1111ll1l_opy_(cls, bstack1l1llll1l11_opy_):
        if bstack1l1llll1l11_opy_.get(bstack1ll1_opy_ (u"ࠫࡴࡨࡳࡦࡴࡹࡥࡧ࡯࡬ࡪࡶࡼࠫព")) == None:
            cls.bstack1ll1111l1ll_opy_()
            return [None, None, None]
        if bstack1l1llll1l11_opy_[bstack1ll1_opy_ (u"ࠬࡵࡢࡴࡧࡵࡺࡦࡨࡩ࡭࡫ࡷࡽࠬភ")][bstack1ll1_opy_ (u"࠭ࡳࡶࡥࡦࡩࡸࡹࠧម")] != True:
            cls.bstack1ll1111l1ll_opy_(bstack1l1llll1l11_opy_[bstack1ll1_opy_ (u"ࠧࡰࡤࡶࡩࡷࡼࡡࡣ࡫࡯࡭ࡹࡿࠧយ")])
            return [None, None, None]
        logger.debug(bstack1ll1_opy_ (u"ࠨࡖࡨࡷࡹࠦࡏࡣࡵࡨࡶࡻࡧࡢࡪ࡮࡬ࡸࡾࠦࡂࡶ࡫࡯ࡨࠥࡩࡲࡦࡣࡷ࡭ࡴࡴࠠࡔࡷࡦࡧࡪࡹࡳࡧࡷ࡯ࠥࠬរ"))
        os.environ[bstack1ll1_opy_ (u"ࠩࡅࡗࡤ࡚ࡅࡔࡖࡒࡔࡘࡥࡂࡖࡋࡏࡈࡤࡉࡏࡎࡒࡏࡉ࡙ࡋࡄࠨល")] = bstack1ll1_opy_ (u"ࠪࡸࡷࡻࡥࠨវ")
        if bstack1l1llll1l11_opy_.get(bstack1ll1_opy_ (u"ࠫ࡯ࡽࡴࠨឝ")):
            os.environ[bstack1ll1_opy_ (u"ࠬࡈࡓࡠࡖࡈࡗ࡙ࡕࡐࡔࡡࡍ࡛࡙࠭ឞ")] = bstack1l1llll1l11_opy_[bstack1ll1_opy_ (u"࠭ࡪࡸࡶࠪស")]
            os.environ[bstack1ll1_opy_ (u"ࠧࡄࡔࡈࡈࡊࡔࡔࡊࡃࡏࡗࡤࡌࡏࡓࡡࡆࡖࡆ࡙ࡈࡠࡔࡈࡔࡔࡘࡔࡊࡐࡊࠫហ")] = json.dumps({
                bstack1ll1_opy_ (u"ࠨࡷࡶࡩࡷࡴࡡ࡮ࡧࠪឡ"): bstack1111lll1l1_opy_(cls.bs_config),
                bstack1ll1_opy_ (u"ࠩࡳࡥࡸࡹࡷࡰࡴࡧࠫអ"): bstack111l11ll11_opy_(cls.bs_config)
            })
        if bstack1l1llll1l11_opy_.get(bstack1ll1_opy_ (u"ࠪࡦࡺ࡯࡬ࡥࡡ࡫ࡥࡸ࡮ࡥࡥࡡ࡬ࡨࠬឣ")):
            os.environ[bstack1ll1_opy_ (u"ࠫࡇ࡙࡟ࡕࡇࡖࡘࡔࡖࡓࡠࡄࡘࡍࡑࡊ࡟ࡉࡃࡖࡌࡊࡊ࡟ࡊࡆࠪឤ")] = bstack1l1llll1l11_opy_[bstack1ll1_opy_ (u"ࠬࡨࡵࡪ࡮ࡧࡣ࡭ࡧࡳࡩࡧࡧࡣ࡮ࡪࠧឥ")]
        if bstack1l1llll1l11_opy_[bstack1ll1_opy_ (u"࠭࡯ࡣࡵࡨࡶࡻࡧࡢࡪ࡮࡬ࡸࡾ࠭ឦ")].get(bstack1ll1_opy_ (u"ࠧࡰࡲࡷ࡭ࡴࡴࡳࠨឧ"), {}).get(bstack1ll1_opy_ (u"ࠨࡣ࡯ࡰࡴࡽ࡟ࡴࡥࡵࡩࡪࡴࡳࡩࡱࡷࡷࠬឨ")):
            os.environ[bstack1ll1_opy_ (u"ࠩࡅࡗࡤ࡚ࡅࡔࡖࡒࡔࡘࡥࡁࡍࡎࡒ࡛ࡤ࡙ࡃࡓࡇࡈࡒࡘࡎࡏࡕࡕࠪឩ")] = str(bstack1l1llll1l11_opy_[bstack1ll1_opy_ (u"ࠪࡳࡧࡹࡥࡳࡸࡤࡦ࡮ࡲࡩࡵࡻࠪឪ")][bstack1ll1_opy_ (u"ࠫࡴࡶࡴࡪࡱࡱࡷࠬឫ")][bstack1ll1_opy_ (u"ࠬࡧ࡬࡭ࡱࡺࡣࡸࡩࡲࡦࡧࡱࡷ࡭ࡵࡴࡴࠩឬ")])
        return [bstack1l1llll1l11_opy_[bstack1ll1_opy_ (u"࠭ࡪࡸࡶࠪឭ")], bstack1l1llll1l11_opy_[bstack1ll1_opy_ (u"ࠧࡣࡷ࡬ࡰࡩࡥࡨࡢࡵ࡫ࡩࡩࡥࡩࡥࠩឮ")], os.environ[bstack1ll1_opy_ (u"ࠨࡄࡖࡣ࡙ࡋࡓࡕࡑࡓࡗࡤࡇࡌࡍࡑ࡚ࡣࡘࡉࡒࡆࡇࡑࡗࡍࡕࡔࡔࠩឯ")]]
    @classmethod
    def bstack1l1llll1l1l_opy_(cls, bstack1l1llll1l11_opy_):
        if bstack1l1llll1l11_opy_.get(bstack1ll1_opy_ (u"ࠩࡤࡧࡨ࡫ࡳࡴ࡫ࡥ࡭ࡱ࡯ࡴࡺࠩឰ")) == None:
            cls.bstack1ll111111l1_opy_()
            return [None, None]
        if bstack1l1llll1l11_opy_[bstack1ll1_opy_ (u"ࠪࡥࡨࡩࡥࡴࡵ࡬ࡦ࡮ࡲࡩࡵࡻࠪឱ")][bstack1ll1_opy_ (u"ࠫࡸࡻࡣࡤࡧࡶࡷࠬឲ")] != True:
            cls.bstack1ll111111l1_opy_(bstack1l1llll1l11_opy_[bstack1ll1_opy_ (u"ࠬࡧࡣࡤࡧࡶࡷ࡮ࡨࡩ࡭࡫ࡷࡽࠬឳ")])
            return [None, None]
        if bstack1l1llll1l11_opy_[bstack1ll1_opy_ (u"࠭ࡡࡤࡥࡨࡷࡸ࡯ࡢࡪ࡮࡬ࡸࡾ࠭឴")].get(bstack1ll1_opy_ (u"ࠧࡰࡲࡷ࡭ࡴࡴࡳࠨ឵")):
            logger.debug(bstack1ll1_opy_ (u"ࠨࡖࡨࡷࡹࠦࡁࡤࡥࡨࡷࡸ࡯ࡢࡪ࡮࡬ࡸࡾࠦࡂࡶ࡫࡯ࡨࠥࡩࡲࡦࡣࡷ࡭ࡴࡴࠠࡔࡷࡦࡧࡪࡹࡳࡧࡷ࡯ࠥࠬា"))
            parsed = json.loads(os.getenv(bstack1ll1_opy_ (u"ࠩࡅࡖࡔ࡝ࡓࡆࡔࡖࡘࡆࡉࡋࡠࡖࡈࡗ࡙ࡥࡁࡄࡅࡈࡗࡘࡏࡂࡊࡎࡌࡘ࡞ࡥࡃࡐࡐࡉࡍࡌ࡛ࡒࡂࡖࡌࡓࡓࡥ࡙ࡎࡎࠪិ"), bstack1ll1_opy_ (u"ࠪࡿࢂ࠭ី")))
            capabilities = bstack1111l1l1l_opy_.bstack1ll1111l1l1_opy_(bstack1l1llll1l11_opy_[bstack1ll1_opy_ (u"ࠫࡦࡩࡣࡦࡵࡶ࡭ࡧ࡯࡬ࡪࡶࡼࠫឹ")][bstack1ll1_opy_ (u"ࠬࡵࡰࡵ࡫ࡲࡲࡸ࠭ឺ")][bstack1ll1_opy_ (u"࠭ࡣࡢࡲࡤࡦ࡮ࡲࡩࡵ࡫ࡨࡷࠬុ")], bstack1ll1_opy_ (u"ࠧ࡯ࡣࡰࡩࠬូ"), bstack1ll1_opy_ (u"ࠨࡸࡤࡰࡺ࡫ࠧួ"))
            bstack1l1llll11l1_opy_ = capabilities[bstack1ll1_opy_ (u"ࠩࡤࡧࡨ࡫ࡳࡴ࡫ࡥ࡭ࡱ࡯ࡴࡺࡖࡲ࡯ࡪࡴࠧើ")]
            os.environ[bstack1ll1_opy_ (u"ࠪࡆࡘࡥࡁ࠲࠳࡜ࡣࡏ࡝ࡔࠨឿ")] = bstack1l1llll11l1_opy_
            parsed[bstack1ll1_opy_ (u"ࠫࡸࡩࡡ࡯ࡰࡨࡶ࡛࡫ࡲࡴ࡫ࡲࡲࠬៀ")] = capabilities[bstack1ll1_opy_ (u"ࠬࡹࡣࡢࡰࡱࡩࡷ࡜ࡥࡳࡵ࡬ࡳࡳ࠭េ")]
            os.environ[bstack1ll1_opy_ (u"࠭ࡂࡓࡑ࡚ࡗࡊࡘࡓࡕࡃࡆࡏࡤ࡚ࡅࡔࡖࡢࡅࡈࡉࡅࡔࡕࡌࡆࡎࡒࡉࡕ࡛ࡢࡇࡔࡔࡆࡊࡉࡘࡖࡆ࡚ࡉࡐࡐࡢ࡝ࡒࡒࠧែ")] = json.dumps(parsed)
            scripts = bstack1111l1l1l_opy_.bstack1ll1111l1l1_opy_(bstack1l1llll1l11_opy_[bstack1ll1_opy_ (u"ࠧࡢࡥࡦࡩࡸࡹࡩࡣ࡫࡯࡭ࡹࡿࠧៃ")][bstack1ll1_opy_ (u"ࠨࡱࡳࡸ࡮ࡵ࡮ࡴࠩោ")][bstack1ll1_opy_ (u"ࠩࡶࡧࡷ࡯ࡰࡵࡵࠪៅ")], bstack1ll1_opy_ (u"ࠪࡲࡦࡳࡥࠨំ"), bstack1ll1_opy_ (u"ࠫࡨࡵ࡭࡮ࡣࡱࡨࠬះ"))
            bstack1llll11111_opy_.bstack1111lll11l_opy_(scripts)
            commands = bstack1l1llll1l11_opy_[bstack1ll1_opy_ (u"ࠬࡧࡣࡤࡧࡶࡷ࡮ࡨࡩ࡭࡫ࡷࡽࠬៈ")][bstack1ll1_opy_ (u"࠭࡯ࡱࡶ࡬ࡳࡳࡹࠧ៉")][bstack1ll1_opy_ (u"ࠧࡤࡱࡰࡱࡦࡴࡤࡴࡖࡲ࡛ࡷࡧࡰࠨ៊")].get(bstack1ll1_opy_ (u"ࠨࡥࡲࡱࡲࡧ࡮ࡥࡵࠪ់"))
            bstack1llll11111_opy_.bstack111l1l1ll1_opy_(commands)
            bstack1llll11111_opy_.store()
        return [bstack1l1llll11l1_opy_, bstack1l1llll1l11_opy_[bstack1ll1_opy_ (u"ࠩࡥࡹ࡮ࡲࡤࡠࡪࡤࡷ࡭࡫ࡤࡠ࡫ࡧࠫ៌")]]
    @classmethod
    def bstack1ll1111l1ll_opy_(cls, response=None):
        os.environ[bstack1ll1_opy_ (u"ࠪࡆࡗࡕࡗࡔࡇࡕࡗ࡙ࡇࡃࡌࡡࡗࡉࡘ࡚ࡈࡖࡄࡢ࡙࡚ࡏࡄࠨ៍")] = bstack1ll1_opy_ (u"ࠫࡳࡻ࡬࡭ࠩ៎")
        os.environ[bstack1ll1_opy_ (u"ࠬࡈࡓࡠࡖࡈࡗ࡙ࡕࡐࡔࡡࡅ࡙ࡎࡒࡄࡠࡅࡒࡑࡕࡒࡅࡕࡇࡇࠫ៏")] = bstack1ll1_opy_ (u"࠭ࡦࡢ࡮ࡶࡩࠬ័")
        os.environ[bstack1ll1_opy_ (u"ࠧࡃࡕࡢࡘࡊ࡙ࡔࡉࡗࡅࡣࡏ࡝ࡔࠨ៑")] = bstack1ll1_opy_ (u"ࠨࡰࡸࡰࡱ្࠭")
        os.environ[bstack1ll1_opy_ (u"ࠩࡅࡗࡤ࡚ࡅࡔࡖࡒࡔࡘࡥࡊࡘࡖࠪ៓")] = bstack1ll1_opy_ (u"ࠪࡲࡺࡲ࡬ࠨ។")
        os.environ[bstack1ll1_opy_ (u"ࠫࡇ࡙࡟ࡕࡇࡖࡘࡔࡖࡓࡠࡄࡘࡍࡑࡊ࡟ࡉࡃࡖࡌࡊࡊ࡟ࡊࡆࠪ៕")] = bstack1ll1_opy_ (u"ࠧࡴࡵ࡭࡮ࠥ៖")
        os.environ[bstack1ll1_opy_ (u"࠭ࡂࡔࡡࡗࡉࡘ࡚ࡏࡑࡕࡢࡅࡑࡒࡏࡘࡡࡖࡇࡗࡋࡅࡏࡕࡋࡓ࡙࡙ࠧៗ")] = bstack1ll1_opy_ (u"ࠢ࡯ࡷ࡯ࡰࠧ៘")
        cls.bstack1l1llll1lll_opy_(response, bstack1ll1_opy_ (u"ࠣࡱࡥࡷࡪࡸࡶࡢࡤ࡬ࡰ࡮ࡺࡹࠣ៙"))
        return [None, None, None]
    @classmethod
    def bstack1ll111111l1_opy_(cls, response=None):
        os.environ[bstack1ll1_opy_ (u"ࠩࡅࡖࡔ࡝ࡓࡆࡔࡖࡘࡆࡉࡋࡠࡖࡈࡗ࡙ࡎࡕࡃࡡࡘ࡙ࡎࡊࠧ៚")] = bstack1ll1_opy_ (u"ࠪࡲࡺࡲ࡬ࠨ៛")
        os.environ[bstack1ll1_opy_ (u"ࠫࡇ࡙࡟ࡂ࠳࠴࡝ࡤࡐࡗࡕࠩៜ")] = bstack1ll1_opy_ (u"ࠬࡴࡵ࡭࡮ࠪ៝")
        os.environ[bstack1ll1_opy_ (u"࠭ࡂࡔࡡࡗࡉࡘ࡚ࡈࡖࡄࡢࡎ࡜࡚ࠧ៞")] = bstack1ll1_opy_ (u"ࠧ࡯ࡷ࡯ࡰࠬ៟")
        cls.bstack1l1llll1lll_opy_(response, bstack1ll1_opy_ (u"ࠣࡣࡦࡧࡪࡹࡳࡪࡤ࡬ࡰ࡮ࡺࡹࠣ០"))
        return [None, None, None]
    @classmethod
    def bstack1l1lllll11l_opy_(cls, bstack1ll1111ll11_opy_, bstack11ll11lll1_opy_):
        os.environ[bstack1ll1_opy_ (u"ࠩࡅࡗࡤ࡚ࡅࡔࡖࡋ࡙ࡇࡥࡊࡘࡖࠪ១")] = bstack1ll1111ll11_opy_
        os.environ[bstack1ll1_opy_ (u"ࠪࡆࡗࡕࡗࡔࡇࡕࡗ࡙ࡇࡃࡌࡡࡗࡉࡘ࡚ࡈࡖࡄࡢ࡙࡚ࡏࡄࠨ២")] = bstack11ll11lll1_opy_
    @classmethod
    def bstack1l1llll1lll_opy_(cls, response=None, product=bstack1ll1_opy_ (u"ࠦࠧ៣")):
        if response == None:
            logger.error(product + bstack1ll1_opy_ (u"ࠧࠦࡂࡶ࡫࡯ࡨࠥࡩࡲࡦࡣࡷ࡭ࡴࡴࠠࡧࡣ࡬ࡰࡪࡪࠢ៤"))
        for error in response[bstack1ll1_opy_ (u"࠭ࡥࡳࡴࡲࡶࡸ࠭៥")]:
            bstack1llll11111l_opy_ = error[bstack1ll1_opy_ (u"ࠧ࡬ࡧࡼࠫ៦")]
            error_message = error[bstack1ll1_opy_ (u"ࠨ࡯ࡨࡷࡸࡧࡧࡦࠩ៧")]
            if error_message:
                if bstack1llll11111l_opy_ == bstack1ll1_opy_ (u"ࠤࡈࡖࡗࡕࡒࡠࡃࡆࡇࡊ࡙ࡓࡠࡆࡈࡒࡎࡋࡄࠣ៨"):
                    logger.info(error_message)
                else:
                    logger.error(error_message)
            else:
                logger.error(bstack1ll1_opy_ (u"ࠥࡈࡦࡺࡡࠡࡷࡳࡰࡴࡧࡤࠡࡶࡲࠤࡇࡸ࡯ࡸࡵࡨࡶࡘࡺࡡࡤ࡭ࠣࠦ៩") + product + bstack1ll1_opy_ (u"ࠦࠥ࡬ࡡࡪ࡮ࡨࡨࠥࡪࡵࡦࠢࡷࡳࠥࡹ࡯࡮ࡧࠣࡩࡷࡸ࡯ࡳࠤ៪"))
    @classmethod
    def bstack1l1lllll1ll_opy_(cls):
        if cls.bstack1ll11l1llll_opy_ is not None:
            return
        cls.bstack1ll11l1llll_opy_ = bstack1ll11l1l1l1_opy_(cls.bstack1l1llll111l_opy_)
        cls.bstack1ll11l1llll_opy_.start()
    @classmethod
    def bstack11l111l1l1_opy_(cls):
        if cls.bstack1ll11l1llll_opy_ is None:
            return
        cls.bstack1ll11l1llll_opy_.shutdown()
    @classmethod
    @bstack11l11llll1_opy_(class_method=True)
    def bstack1l1llll111l_opy_(cls, bstack11l11l11ll_opy_, bstack1ll11111111_opy_=bstack1ll1_opy_ (u"ࠬࡧࡰࡪ࠱ࡹ࠵࠴ࡨࡡࡵࡥ࡫ࠫ៫")):
        config = {
            bstack1ll1_opy_ (u"࠭ࡨࡦࡣࡧࡩࡷࡹࠧ៬"): cls.default_headers()
        }
        logger.debug(bstack1ll1_opy_ (u"ࠢࡱࡱࡶࡸࡤࡪࡡࡵࡣ࠽ࠤࡘ࡫࡮ࡥ࡫ࡱ࡫ࠥࡪࡡࡵࡣࠣࡸࡴࠦࡴࡦࡵࡷ࡬ࡺࡨࠠࡧࡱࡵࠤࡪࡼࡥ࡯ࡶࡶࠤࢀࢃࠢ៭").format(bstack1ll1_opy_ (u"ࠨ࠮ࠣࠫ៮").join([event[bstack1ll1_opy_ (u"ࠩࡨࡺࡪࡴࡴࡠࡶࡼࡴࡪ࠭៯")] for event in bstack11l11l11ll_opy_])))
        response = bstack1lll1l11l_opy_(bstack1ll1_opy_ (u"ࠪࡔࡔ࡙ࡔࠨ៰"), cls.request_url(bstack1ll11111111_opy_), bstack11l11l11ll_opy_, config)
        bstack111l1l1l1l_opy_ = response.json()
    @classmethod
    def bstack11lll1llll_opy_(cls, bstack11l11l11ll_opy_, bstack1ll11111111_opy_=bstack1ll1_opy_ (u"ࠫࡦࡶࡩ࠰ࡸ࠴࠳ࡧࡧࡴࡤࡪࠪ៱")):
        logger.debug(bstack1ll1_opy_ (u"ࠧࡹࡥ࡯ࡦࡢࡨࡦࡺࡡ࠻ࠢࡄࡸࡹ࡫࡭ࡱࡶ࡬ࡲ࡬ࠦࡴࡰࠢࡤࡨࡩࠦࡤࡢࡶࡤࠤࡹࡵࠠࡣࡣࡷࡧ࡭ࠦࡷࡪࡶ࡫ࠤࡪࡼࡥ࡯ࡶࡢࡸࡾࡶࡥ࠻ࠢࡾࢁࠧ៲").format(bstack11l11l11ll_opy_[bstack1ll1_opy_ (u"࠭ࡥࡷࡧࡱࡸࡤࡺࡹࡱࡧࠪ៳")]))
        if not bstack1111l1l1l_opy_.bstack1l1llll1ll1_opy_(bstack11l11l11ll_opy_[bstack1ll1_opy_ (u"ࠧࡦࡸࡨࡲࡹࡥࡴࡺࡲࡨࠫ៴")]):
            logger.debug(bstack1ll1_opy_ (u"ࠣࡵࡨࡲࡩࡥࡤࡢࡶࡤ࠾ࠥࡔ࡯ࡵࠢࡤࡨࡩ࡯࡮ࡨࠢࡧࡥࡹࡧࠠࡸ࡫ࡷ࡬ࠥ࡫ࡶࡦࡰࡷࡣࡹࡿࡰࡦ࠼ࠣࡿࢂࠨ៵").format(bstack11l11l11ll_opy_[bstack1ll1_opy_ (u"ࠩࡨࡺࡪࡴࡴࡠࡶࡼࡴࡪ࠭៶")]))
            return
        bstack1lll1111ll_opy_ = bstack1111l1l1l_opy_.bstack1l1lllll111_opy_(bstack11l11l11ll_opy_[bstack1ll1_opy_ (u"ࠪࡩࡻ࡫࡮ࡵࡡࡷࡽࡵ࡫ࠧ៷")], bstack11l11l11ll_opy_.get(bstack1ll1_opy_ (u"ࠫࡹ࡫ࡳࡵࡡࡵࡹࡳ࠭៸")))
        if bstack1lll1111ll_opy_ != None:
            if bstack11l11l11ll_opy_.get(bstack1ll1_opy_ (u"ࠬࡺࡥࡴࡶࡢࡶࡺࡴࠧ៹")) != None:
                bstack11l11l11ll_opy_[bstack1ll1_opy_ (u"࠭ࡴࡦࡵࡷࡣࡷࡻ࡮ࠨ៺")][bstack1ll1_opy_ (u"ࠧࡱࡴࡲࡨࡺࡩࡴࡠ࡯ࡤࡴࠬ៻")] = bstack1lll1111ll_opy_
            else:
                bstack11l11l11ll_opy_[bstack1ll1_opy_ (u"ࠨࡲࡵࡳࡩࡻࡣࡵࡡࡰࡥࡵ࠭៼")] = bstack1lll1111ll_opy_
        if bstack1ll11111111_opy_ == bstack1ll1_opy_ (u"ࠩࡤࡴ࡮࠵ࡶ࠲࠱ࡥࡥࡹࡩࡨࠨ៽"):
            cls.bstack1l1lllll1ll_opy_()
            logger.debug(bstack1ll1_opy_ (u"ࠥࡷࡪࡴࡤࡠࡦࡤࡸࡦࡀࠠࡂࡦࡧ࡭ࡳ࡭ࠠࡥࡣࡷࡥࠥࡺ࡯ࠡࡤࡤࡸࡨ࡮ࠠࡸ࡫ࡷ࡬ࠥ࡫ࡶࡦࡰࡷࡣࡹࡿࡰࡦ࠼ࠣࡿࢂࠨ៾").format(bstack11l11l11ll_opy_[bstack1ll1_opy_ (u"ࠫࡪࡼࡥ࡯ࡶࡢࡸࡾࡶࡥࠨ៿")]))
            cls.bstack1ll11l1llll_opy_.add(bstack11l11l11ll_opy_)
        elif bstack1ll11111111_opy_ == bstack1ll1_opy_ (u"ࠬࡧࡰࡪ࠱ࡹ࠵࠴ࡹࡣࡳࡧࡨࡲࡸ࡮࡯ࡵࡵࠪ᠀"):
            cls.bstack1l1llll111l_opy_([bstack11l11l11ll_opy_], bstack1ll11111111_opy_)
    @classmethod
    @bstack11l11llll1_opy_(class_method=True)
    def bstack11lll1l11l_opy_(cls, bstack11l11lll1l_opy_):
        bstack1l1llll11ll_opy_ = []
        for log in bstack11l11lll1l_opy_:
            bstack1ll111111ll_opy_ = {
                bstack1ll1_opy_ (u"࠭࡫ࡪࡰࡧࠫ᠁"): bstack1ll1_opy_ (u"ࠧࡕࡇࡖࡘࡤࡒࡏࡈࠩ᠂"),
                bstack1ll1_opy_ (u"ࠨ࡮ࡨࡺࡪࡲࠧ᠃"): log[bstack1ll1_opy_ (u"ࠩ࡯ࡩࡻ࡫࡬ࠨ᠄")],
                bstack1ll1_opy_ (u"ࠪࡸ࡮ࡳࡥࡴࡶࡤࡱࡵ࠭᠅"): log[bstack1ll1_opy_ (u"ࠫࡹ࡯࡭ࡦࡵࡷࡥࡲࡶࠧ᠆")],
                bstack1ll1_opy_ (u"ࠬ࡮ࡴࡵࡲࡢࡶࡪࡹࡰࡰࡰࡶࡩࠬ᠇"): {},
                bstack1ll1_opy_ (u"࠭࡭ࡦࡵࡶࡥ࡬࡫ࠧ᠈"): log[bstack1ll1_opy_ (u"ࠧ࡮ࡧࡶࡷࡦ࡭ࡥࠨ᠉")],
            }
            if bstack1ll1_opy_ (u"ࠨࡶࡨࡷࡹࡥࡲࡶࡰࡢࡹࡺ࡯ࡤࠨ᠊") in log:
                bstack1ll111111ll_opy_[bstack1ll1_opy_ (u"ࠩࡷࡩࡸࡺ࡟ࡳࡷࡱࡣࡺࡻࡩࡥࠩ᠋")] = log[bstack1ll1_opy_ (u"ࠪࡸࡪࡹࡴࡠࡴࡸࡲࡤࡻࡵࡪࡦࠪ᠌")]
            elif bstack1ll1_opy_ (u"ࠫ࡭ࡵ࡯࡬ࡡࡵࡹࡳࡥࡵࡶ࡫ࡧࠫ᠍") in log:
                bstack1ll111111ll_opy_[bstack1ll1_opy_ (u"ࠬ࡮࡯ࡰ࡭ࡢࡶࡺࡴ࡟ࡶࡷ࡬ࡨࠬ᠎")] = log[bstack1ll1_opy_ (u"࠭ࡨࡰࡱ࡮ࡣࡷࡻ࡮ࡠࡷࡸ࡭ࡩ࠭᠏")]
            bstack1l1llll11ll_opy_.append(bstack1ll111111ll_opy_)
        cls.bstack11lll1llll_opy_({
            bstack1ll1_opy_ (u"ࠧࡦࡸࡨࡲࡹࡥࡴࡺࡲࡨࠫ᠐"): bstack1ll1_opy_ (u"ࠨࡎࡲ࡫ࡈࡸࡥࡢࡶࡨࡨࠬ᠑"),
            bstack1ll1_opy_ (u"ࠩ࡯ࡳ࡬ࡹࠧ᠒"): bstack1l1llll11ll_opy_
        })
    @classmethod
    @bstack11l11llll1_opy_(class_method=True)
    def bstack1ll11111l1l_opy_(cls, steps):
        bstack1ll1111l11l_opy_ = []
        for step in steps:
            bstack1l1llllll1l_opy_ = {
                bstack1ll1_opy_ (u"ࠪ࡯࡮ࡴࡤࠨ᠓"): bstack1ll1_opy_ (u"࡙ࠫࡋࡓࡕࡡࡖࡘࡊࡖࠧ᠔"),
                bstack1ll1_opy_ (u"ࠬࡲࡥࡷࡧ࡯ࠫ᠕"): step[bstack1ll1_opy_ (u"࠭࡬ࡦࡸࡨࡰࠬ᠖")],
                bstack1ll1_opy_ (u"ࠧࡵ࡫ࡰࡩࡸࡺࡡ࡮ࡲࠪ᠗"): step[bstack1ll1_opy_ (u"ࠨࡶ࡬ࡱࡪࡹࡴࡢ࡯ࡳࠫ᠘")],
                bstack1ll1_opy_ (u"ࠩࡰࡩࡸࡹࡡࡨࡧࠪ᠙"): step[bstack1ll1_opy_ (u"ࠪࡱࡪࡹࡳࡢࡩࡨࠫ᠚")],
                bstack1ll1_opy_ (u"ࠫࡩࡻࡲࡢࡶ࡬ࡳࡳ࠭᠛"): step[bstack1ll1_opy_ (u"ࠬࡪࡵࡳࡣࡷ࡭ࡴࡴࠧ᠜")]
            }
            if bstack1ll1_opy_ (u"࠭ࡴࡦࡵࡷࡣࡷࡻ࡮ࡠࡷࡸ࡭ࡩ࠭᠝") in step:
                bstack1l1llllll1l_opy_[bstack1ll1_opy_ (u"ࠧࡵࡧࡶࡸࡤࡸࡵ࡯ࡡࡸࡹ࡮ࡪࠧ᠞")] = step[bstack1ll1_opy_ (u"ࠨࡶࡨࡷࡹࡥࡲࡶࡰࡢࡹࡺ࡯ࡤࠨ᠟")]
            elif bstack1ll1_opy_ (u"ࠩ࡫ࡳࡴࡱ࡟ࡳࡷࡱࡣࡺࡻࡩࡥࠩᠠ") in step:
                bstack1l1llllll1l_opy_[bstack1ll1_opy_ (u"ࠪ࡬ࡴࡵ࡫ࡠࡴࡸࡲࡤࡻࡵࡪࡦࠪᠡ")] = step[bstack1ll1_opy_ (u"ࠫ࡭ࡵ࡯࡬ࡡࡵࡹࡳࡥࡵࡶ࡫ࡧࠫᠢ")]
            bstack1ll1111l11l_opy_.append(bstack1l1llllll1l_opy_)
        cls.bstack11lll1llll_opy_({
            bstack1ll1_opy_ (u"ࠬ࡫ࡶࡦࡰࡷࡣࡹࡿࡰࡦࠩᠣ"): bstack1ll1_opy_ (u"࠭ࡌࡰࡩࡆࡶࡪࡧࡴࡦࡦࠪᠤ"),
            bstack1ll1_opy_ (u"ࠧ࡭ࡱࡪࡷࠬᠥ"): bstack1ll1111l11l_opy_
        })
    @classmethod
    @bstack11l11llll1_opy_(class_method=True)
    def bstack1ll1111l11_opy_(cls, screenshot):
        cls.bstack11lll1llll_opy_({
            bstack1ll1_opy_ (u"ࠨࡧࡹࡩࡳࡺ࡟ࡵࡻࡳࡩࠬᠦ"): bstack1ll1_opy_ (u"ࠩࡏࡳ࡬ࡉࡲࡦࡣࡷࡩࡩ࠭ᠧ"),
            bstack1ll1_opy_ (u"ࠪࡰࡴ࡭ࡳࠨᠨ"): [{
                bstack1ll1_opy_ (u"ࠫࡰ࡯࡮ࡥࠩᠩ"): bstack1ll1_opy_ (u"࡚ࠬࡅࡔࡖࡢࡗࡈࡘࡅࡆࡐࡖࡌࡔ࡚ࠧᠪ"),
                bstack1ll1_opy_ (u"࠭ࡴࡪ࡯ࡨࡷࡹࡧ࡭ࡱࠩᠫ"): datetime.datetime.utcnow().isoformat() + bstack1ll1_opy_ (u"࡛ࠧࠩᠬ"),
                bstack1ll1_opy_ (u"ࠨ࡯ࡨࡷࡸࡧࡧࡦࠩᠭ"): screenshot[bstack1ll1_opy_ (u"ࠩ࡬ࡱࡦ࡭ࡥࠨᠮ")],
                bstack1ll1_opy_ (u"ࠪࡸࡪࡹࡴࡠࡴࡸࡲࡤࡻࡵࡪࡦࠪᠯ"): screenshot[bstack1ll1_opy_ (u"ࠫࡹ࡫ࡳࡵࡡࡵࡹࡳࡥࡵࡶ࡫ࡧࠫᠰ")]
            }]
        }, bstack1ll11111111_opy_=bstack1ll1_opy_ (u"ࠬࡧࡰࡪ࠱ࡹ࠵࠴ࡹࡣࡳࡧࡨࡲࡸ࡮࡯ࡵࡵࠪᠱ"))
    @classmethod
    @bstack11l11llll1_opy_(class_method=True)
    def bstack11111l11_opy_(cls, driver):
        current_test_uuid = cls.current_test_uuid()
        if not current_test_uuid:
            return
        cls.bstack11lll1llll_opy_({
            bstack1ll1_opy_ (u"࠭ࡥࡷࡧࡱࡸࡤࡺࡹࡱࡧࠪᠲ"): bstack1ll1_opy_ (u"ࠧࡄࡄࡗࡗࡪࡹࡳࡪࡱࡱࡇࡷ࡫ࡡࡵࡧࡧࠫᠳ"),
            bstack1ll1_opy_ (u"ࠨࡶࡨࡷࡹࡥࡲࡶࡰࠪᠴ"): {
                bstack1ll1_opy_ (u"ࠤࡸࡹ࡮ࡪࠢᠵ"): cls.current_test_uuid(),
                bstack1ll1_opy_ (u"ࠥ࡭ࡳࡺࡥࡨࡴࡤࡸ࡮ࡵ࡮ࡴࠤᠶ"): cls.bstack11l1l1llll_opy_(driver)
            }
        })
    @classmethod
    def bstack11l1lll1l1_opy_(cls, event: str, bstack11l11l11ll_opy_: bstack11l111l111_opy_):
        bstack11l1111111_opy_ = {
            bstack1ll1_opy_ (u"ࠫࡪࡼࡥ࡯ࡶࡢࡸࡾࡶࡥࠨᠷ"): event,
            bstack11l11l11ll_opy_.bstack11l11l1l1l_opy_(): bstack11l11l11ll_opy_.bstack11l11ll1l1_opy_(event)
        }
        cls.bstack11lll1llll_opy_(bstack11l1111111_opy_)
        result = getattr(bstack11l11l11ll_opy_, bstack1ll1_opy_ (u"ࠬࡸࡥࡴࡷ࡯ࡸࠬᠸ"), None)
        if event == bstack1ll1_opy_ (u"࠭ࡔࡦࡵࡷࡖࡺࡴࡓࡵࡣࡵࡸࡪࡪࠧᠹ"):
            threading.current_thread().bstackTestMeta = {bstack1ll1_opy_ (u"ࠧࡴࡶࡤࡸࡺࡹࠧᠺ"): bstack1ll1_opy_ (u"ࠨࡲࡨࡲࡩ࡯࡮ࡨࠩᠻ")}
        elif event == bstack1ll1_opy_ (u"ࠩࡗࡩࡸࡺࡒࡶࡰࡉ࡭ࡳ࡯ࡳࡩࡧࡧࠫᠼ"):
            threading.current_thread().bstackTestMeta = {bstack1ll1_opy_ (u"ࠪࡷࡹࡧࡴࡶࡵࠪᠽ"): getattr(result, bstack1ll1_opy_ (u"ࠫࡷ࡫ࡳࡶ࡮ࡷࠫᠾ"), bstack1ll1_opy_ (u"ࠬ࠭ᠿ"))}
    @classmethod
    def on(cls):
        if (os.environ.get(bstack1ll1_opy_ (u"࠭ࡂࡔࡡࡗࡉࡘ࡚ࡏࡑࡕࡢࡎ࡜࡚ࠧᡀ"), None) is None or os.environ[bstack1ll1_opy_ (u"ࠧࡃࡕࡢࡘࡊ࡙ࡔࡐࡒࡖࡣࡏ࡝ࡔࠨᡁ")] == bstack1ll1_opy_ (u"ࠣࡰࡸࡰࡱࠨᡂ")) and (os.environ.get(bstack1ll1_opy_ (u"ࠩࡅࡗࡤࡇ࠱࠲࡛ࡢࡎ࡜࡚ࠧᡃ"), None) is None or os.environ[bstack1ll1_opy_ (u"ࠪࡆࡘࡥࡁ࠲࠳࡜ࡣࡏ࡝ࡔࠨᡄ")] == bstack1ll1_opy_ (u"ࠦࡳࡻ࡬࡭ࠤᡅ")):
            return False
        return True
    @staticmethod
    def bstack1l1lllll1l1_opy_(func):
        def wrap(*args, **kwargs):
            if bstack11lll111_opy_.on():
                return func(*args, **kwargs)
            return
        return wrap
    @staticmethod
    def default_headers():
        headers = {
            bstack1ll1_opy_ (u"ࠬࡉ࡯࡯ࡶࡨࡲࡹ࠳ࡔࡺࡲࡨࠫᡆ"): bstack1ll1_opy_ (u"࠭ࡡࡱࡲ࡯࡭ࡨࡧࡴࡪࡱࡱ࠳࡯ࡹ࡯࡯ࠩᡇ"),
            bstack1ll1_opy_ (u"࡙ࠧ࠯ࡅࡗ࡙ࡇࡃࡌ࠯ࡗࡉࡘ࡚ࡏࡑࡕࠪᡈ"): bstack1ll1_opy_ (u"ࠨࡶࡵࡹࡪ࠭ᡉ")
        }
        if os.environ.get(bstack1ll1_opy_ (u"ࠩࡅࡗࡤ࡚ࡅࡔࡖࡋ࡙ࡇࡥࡊࡘࡖࠪᡊ"), None):
            headers[bstack1ll1_opy_ (u"ࠪࡅࡺࡺࡨࡰࡴ࡬ࡾࡦࡺࡩࡰࡰࠪᡋ")] = bstack1ll1_opy_ (u"ࠫࡇ࡫ࡡࡳࡧࡵࠤࢀࢃࠧᡌ").format(os.environ[bstack1ll1_opy_ (u"ࠧࡈࡓࡠࡖࡈࡗ࡙ࡎࡕࡃࡡࡍ࡛࡙ࠨᡍ")])
        return headers
    @staticmethod
    def request_url(url):
        return bstack1ll1_opy_ (u"࠭ࡻࡾ࠱ࡾࢁࠬᡎ").format(bstack1ll11111lll_opy_, url)
    @staticmethod
    def current_test_uuid():
        return getattr(threading.current_thread(), bstack1ll1_opy_ (u"ࠧࡤࡷࡵࡶࡪࡴࡴࡠࡶࡨࡷࡹࡥࡵࡶ࡫ࡧࠫᡏ"), None)
    @staticmethod
    def bstack11l1l1llll_opy_(driver):
        return {
            bstack1llll1ll1ll_opy_(): bstack1llll11llll_opy_(driver)
        }
    @staticmethod
    def bstack1ll1111111l_opy_(exception_info, report):
        return [{bstack1ll1_opy_ (u"ࠨࡤࡤࡧࡰࡺࡲࡢࡥࡨࠫᡐ"): [exception_info.exconly(), report.longreprtext]}]
    @staticmethod
    def bstack111l1ll1ll_opy_(typename):
        if bstack1ll1_opy_ (u"ࠤࡄࡷࡸ࡫ࡲࡵ࡫ࡲࡲࠧᡑ") in typename:
            return bstack1ll1_opy_ (u"ࠥࡅࡸࡹࡥࡳࡶ࡬ࡳࡳࡋࡲࡳࡱࡵࠦᡒ")
        return bstack1ll1_opy_ (u"࡚ࠦࡴࡨࡢࡰࡧࡰࡪࡪࡅࡳࡴࡲࡶࠧᡓ")