# coding: UTF-8
import sys
bstack1l11ll1_opy_ = sys.version_info [0] == 2
bstack1llll1_opy_ = 2048
bstack11l_opy_ = 7
def bstack1ll1_opy_ (bstack1l11l11_opy_):
    global bstack11l11l1_opy_
    bstack1ll1111_opy_ = ord (bstack1l11l11_opy_ [-1])
    bstack1111l_opy_ = bstack1l11l11_opy_ [:-1]
    bstack111lll1_opy_ = bstack1ll1111_opy_ % len (bstack1111l_opy_)
    bstackl_opy_ = bstack1111l_opy_ [:bstack111lll1_opy_] + bstack1111l_opy_ [bstack111lll1_opy_:]
    if bstack1l11ll1_opy_:
        bstack1ll1l1l_opy_ = unicode () .join ([unichr (ord (char) - bstack1llll1_opy_ - (bstack1lll11l_opy_ + bstack1ll1111_opy_) % bstack11l_opy_) for bstack1lll11l_opy_, char in enumerate (bstackl_opy_)])
    else:
        bstack1ll1l1l_opy_ = str () .join ([chr (ord (char) - bstack1llll1_opy_ - (bstack1lll11l_opy_ + bstack1ll1111_opy_) % bstack11l_opy_) for bstack1lll11l_opy_, char in enumerate (bstackl_opy_)])
    return eval (bstack1ll1l1l_opy_)
import os
import json
import logging
import datetime
import threading
from bstack_utils.helper import bstack111l1l1111_opy_, bstack11l1ll111_opy_, get_host_info, bstack1lll1lll111_opy_, \
 bstack1ll11lll11_opy_, bstack111lllll1_opy_, bstack11l11llll1_opy_, bstack1llll1llll1_opy_, bstack1l11l1ll1l_opy_
import bstack_utils.bstack111ll1l111_opy_ as bstack111lll1l1_opy_
from bstack_utils.bstack11l1l11l1l_opy_ import bstack1lll11l1_opy_
from bstack_utils.percy import bstack1lll1ll1l_opy_
from bstack_utils.config import Config
bstack111l1l11_opy_ = Config.bstack1lll1lll_opy_()
logger = logging.getLogger(__name__)
percy = bstack1lll1ll1l_opy_()
@bstack11l11llll1_opy_(class_method=False)
def bstack1ll11111l11_opy_(bs_config, bstack1ll111l1_opy_):
  try:
    data = {
        bstack1ll1_opy_ (u"ࠬ࡬࡯ࡳ࡯ࡤࡸࠬᡔ"): bstack1ll1_opy_ (u"࠭ࡪࡴࡱࡱࠫᡕ"),
        bstack1ll1_opy_ (u"ࠧࡱࡴࡲ࡮ࡪࡩࡴࡠࡰࡤࡱࡪ࠭ᡖ"): bs_config.get(bstack1ll1_opy_ (u"ࠨࡲࡵࡳ࡯࡫ࡣࡵࡐࡤࡱࡪ࠭ᡗ"), bstack1ll1_opy_ (u"ࠩࠪᡘ")),
        bstack1ll1_opy_ (u"ࠪࡲࡦࡳࡥࠨᡙ"): bs_config.get(bstack1ll1_opy_ (u"ࠫࡧࡻࡩ࡭ࡦࡑࡥࡲ࡫ࠧᡚ"), os.path.basename(os.path.abspath(os.getcwd()))),
        bstack1ll1_opy_ (u"ࠬࡨࡵࡪ࡮ࡧࡣ࡮ࡪࡥ࡯ࡶ࡬ࡪ࡮࡫ࡲࠨᡛ"): bs_config.get(bstack1ll1_opy_ (u"࠭ࡢࡶ࡫࡯ࡨࡎࡪࡥ࡯ࡶ࡬ࡪ࡮࡫ࡲࠨᡜ")),
        bstack1ll1_opy_ (u"ࠧࡥࡧࡶࡧࡷ࡯ࡰࡵ࡫ࡲࡲࠬᡝ"): bs_config.get(bstack1ll1_opy_ (u"ࠨࡤࡸ࡭ࡱࡪࡄࡦࡵࡦࡶ࡮ࡶࡴࡪࡱࡱࠫᡞ"), bstack1ll1_opy_ (u"ࠩࠪᡟ")),
        bstack1ll1_opy_ (u"ࠪࡷࡹࡧࡲࡵࡧࡧࡣࡦࡺࠧᡠ"): bstack1l11l1ll1l_opy_(),
        bstack1ll1_opy_ (u"ࠫࡹࡧࡧࡴࠩᡡ"): bstack1lll1lll111_opy_(bs_config),
        bstack1ll1_opy_ (u"ࠬ࡮࡯ࡴࡶࡢ࡭ࡳ࡬࡯ࠨᡢ"): get_host_info(),
        bstack1ll1_opy_ (u"࠭ࡣࡪࡡ࡬ࡲ࡫ࡵࠧᡣ"): bstack11l1ll111_opy_(),
        bstack1ll1_opy_ (u"ࠧࡣࡷ࡬ࡰࡩࡥࡲࡶࡰࡢ࡭ࡩ࡫࡮ࡵ࡫ࡩ࡭ࡪࡸࠧᡤ"): os.environ.get(bstack1ll1_opy_ (u"ࠨࡄࡕࡓ࡜࡙ࡅࡓࡕࡗࡅࡈࡑ࡟ࡃࡗࡌࡐࡉࡥࡒࡖࡐࡢࡍࡉࡋࡎࡕࡋࡉࡍࡊࡘࠧᡥ")),
        bstack1ll1_opy_ (u"ࠩࡩࡥ࡮ࡲࡥࡥࡡࡷࡩࡸࡺࡳࡠࡴࡨࡶࡺࡴࠧᡦ"): os.environ.get(bstack1ll1_opy_ (u"ࠪࡆࡗࡕࡗࡔࡇࡕࡗ࡙ࡇࡃࡌࡡࡕࡉࡗ࡛ࡎࠨᡧ"), False),
        bstack1ll1_opy_ (u"ࠫࡻ࡫ࡲࡴ࡫ࡲࡲࡤࡩ࡯࡯ࡶࡵࡳࡱ࠭ᡨ"): bstack111l1l1111_opy_(),
        bstack1ll1_opy_ (u"ࠬࡧࡣࡤࡧࡶࡷ࡮ࡨࡩ࡭࡫ࡷࡽࠬᡩ"): bstack1l1lll1ll1l_opy_(),
        bstack1ll1_opy_ (u"࠭ࡦࡳࡣࡰࡩࡼࡵࡲ࡬ࡡࡧࡩࡹࡧࡩ࡭ࡵࠪᡪ"): bstack1l1lll1l11l_opy_(bstack1ll111l1_opy_),
        bstack1ll1_opy_ (u"ࠧࡱࡴࡲࡨࡺࡩࡴࡠ࡯ࡤࡴࠬᡫ"): bstack1l1111lll_opy_(bs_config, bstack1ll111l1_opy_.get(bstack1ll1_opy_ (u"ࠨࡨࡵࡥࡲ࡫ࡷࡰࡴ࡮ࡣࡺࡹࡥࡥࠩᡬ"), bstack1ll1_opy_ (u"ࠩࠪᡭ"))),
        bstack1ll1_opy_ (u"ࠪࡦࡷࡵࡷࡴࡧࡵࡷࡹࡧࡣ࡬ࡃࡸࡸࡴࡳࡡࡵ࡫ࡲࡲࠬᡮ"): bstack1ll11lll11_opy_(bs_config),
    }
    return data
  except Exception as error:
    logger.error(bstack1ll1_opy_ (u"ࠦࡊࡾࡣࡦࡲࡷ࡭ࡴࡴࠠࡸࡪ࡬ࡰࡪࠦࡣࡳࡧࡤࡸ࡮ࡴࡧࠡࡲࡤࡽࡱࡵࡡࡥࠢࡩࡳࡷࠦࡔࡦࡵࡷࡌࡺࡨ࠺ࠡࠢࡾࢁࠧᡯ").format(str(error)))
    return None
def bstack1l1lll1l11l_opy_(framework):
  return {
    bstack1ll1_opy_ (u"ࠬ࡬ࡲࡢ࡯ࡨࡻࡴࡸ࡫ࡏࡣࡰࡩࠬᡰ"): framework.get(bstack1ll1_opy_ (u"࠭ࡦࡳࡣࡰࡩࡼࡵࡲ࡬ࡡࡱࡥࡲ࡫ࠧᡱ"), bstack1ll1_opy_ (u"ࠧࡑࡻࡷࡩࡸࡺࠧᡲ")),
    bstack1ll1_opy_ (u"ࠨࡨࡵࡥࡲ࡫ࡷࡰࡴ࡮࡚ࡪࡸࡳࡪࡱࡱࠫᡳ"): framework.get(bstack1ll1_opy_ (u"ࠩࡩࡶࡦࡳࡥࡸࡱࡵ࡯ࡤࡼࡥࡳࡵ࡬ࡳࡳ࠭ᡴ")),
    bstack1ll1_opy_ (u"ࠪࡷࡩࡱࡖࡦࡴࡶ࡭ࡴࡴࠧᡵ"): framework.get(bstack1ll1_opy_ (u"ࠫࡸࡪ࡫ࡠࡸࡨࡶࡸ࡯࡯࡯ࠩᡶ")),
    bstack1ll1_opy_ (u"ࠬࡲࡡ࡯ࡩࡸࡥ࡬࡫ࠧᡷ"): bstack1ll1_opy_ (u"࠭ࡰࡺࡶ࡫ࡳࡳ࠭ᡸ"),
    bstack1ll1_opy_ (u"ࠧࡵࡧࡶࡸࡋࡸࡡ࡮ࡧࡺࡳࡷࡱࠧ᡹"): framework.get(bstack1ll1_opy_ (u"ࠨࡶࡨࡷࡹࡌࡲࡢ࡯ࡨࡻࡴࡸ࡫ࠨ᡺"))
  }
def bstack1l1111lll_opy_(bs_config, framework):
  bstack1111l11l1_opy_ = False
  bstack1lll1ll1ll_opy_ = False
  bstack1l1lll11l1l_opy_ = False
  if bstack1ll1_opy_ (u"ࠩࡷࡹࡷࡨ࡯ࡔࡥࡤࡰࡪ࠭᡻") in bs_config:
    bstack1l1lll11l1l_opy_ = True
  elif bstack1ll1_opy_ (u"ࠪࡥࡵࡶࠧ᡼") in bs_config:
    bstack1111l11l1_opy_ = True
  else:
    bstack1lll1ll1ll_opy_ = True
  bstack1lll1111ll_opy_ = {
    bstack1ll1_opy_ (u"ࠫࡴࡨࡳࡦࡴࡹࡥࡧ࡯࡬ࡪࡶࡼࠫ᡽"): bstack1lll11l1_opy_.bstack1l1lll1ll11_opy_(bs_config, framework),
    bstack1ll1_opy_ (u"ࠬࡧࡣࡤࡧࡶࡷ࡮ࡨࡩ࡭࡫ࡷࡽࠬ᡾"): bstack111lll1l1_opy_.bstack1111llll11_opy_(bs_config),
    bstack1ll1_opy_ (u"࠭ࡰࡦࡴࡦࡽࠬ᡿"): bs_config.get(bstack1ll1_opy_ (u"ࠧࡱࡧࡵࡧࡾ࠭ᢀ"), False),
    bstack1ll1_opy_ (u"ࠨࡣࡸࡸࡴࡳࡡࡵࡧࠪᢁ"): bstack1lll1ll1ll_opy_,
    bstack1ll1_opy_ (u"ࠩࡤࡴࡵࡥࡡࡶࡶࡲࡱࡦࡺࡥࠨᢂ"): bstack1111l11l1_opy_,
    bstack1ll1_opy_ (u"ࠪࡸࡺࡸࡢࡰࡵࡦࡥࡱ࡫ࠧᢃ"): bstack1l1lll11l1l_opy_
  }
  return bstack1lll1111ll_opy_
@bstack11l11llll1_opy_(class_method=False)
def bstack1l1lll1ll1l_opy_():
  try:
    bstack1l1lll11l11_opy_ = json.loads(os.getenv(bstack1ll1_opy_ (u"ࠫࡇࡘࡏࡘࡕࡈࡖࡘ࡚ࡁࡄࡍࡢࡘࡊ࡙ࡔࡠࡃࡆࡇࡊ࡙ࡓࡊࡄࡌࡐࡎ࡚࡙ࡠࡅࡒࡒࡋࡏࡇࡖࡔࡄࡘࡎࡕࡎࡠ࡛ࡐࡐࠬᢄ"), bstack1ll1_opy_ (u"ࠬࢁࡽࠨᢅ")))
    return {
        bstack1ll1_opy_ (u"࠭ࡳࡦࡶࡷ࡭ࡳ࡭ࡳࠨᢆ"): bstack1l1lll11l11_opy_
    }
  except Exception as error:
    logger.error(bstack1ll1_opy_ (u"ࠢࡆࡺࡦࡩࡵࡺࡩࡰࡰࠣࡻ࡭࡯࡬ࡦࠢࡦࡶࡪࡧࡴࡪࡰࡪࠤ࡬࡫ࡴࡠࡣࡦࡧࡪࡹࡳࡪࡤ࡬ࡰ࡮ࡺࡹࡠࡵࡨࡸࡹ࡯࡮ࡨࡵࠣࡪࡴࡸࠠࡕࡧࡶࡸࡍࡻࡢ࠻ࠢࠣࡿࢂࠨᢇ").format(str(error)))
    return {}
def bstack1ll1111l1l1_opy_(array, bstack1l1lll1lll1_opy_, bstack1l1lll11lll_opy_):
  result = {}
  for o in array:
    key = o[bstack1l1lll1lll1_opy_]
    result[key] = o[bstack1l1lll11lll_opy_]
  return result
def bstack1l1llll1ll1_opy_(bstack1ll11l111l_opy_=bstack1ll1_opy_ (u"ࠨࠩᢈ")):
  bstack1l1lll1l111_opy_ = bstack111lll1l1_opy_.on()
  bstack1l1lll1l1l1_opy_ = bstack1lll11l1_opy_.on()
  bstack1l1lll1l1ll_opy_ = percy.bstack1lll1l11_opy_()
  if bstack1l1lll1l1ll_opy_ and not bstack1l1lll1l1l1_opy_ and not bstack1l1lll1l111_opy_:
    return bstack1ll11l111l_opy_ not in [bstack1ll1_opy_ (u"ࠩࡆࡆ࡙࡙ࡥࡴࡵ࡬ࡳࡳࡉࡲࡦࡣࡷࡩࡩ࠭ᢉ"), bstack1ll1_opy_ (u"ࠪࡐࡴ࡭ࡃࡳࡧࡤࡸࡪࡪࠧᢊ")]
  elif bstack1l1lll1l111_opy_ and not bstack1l1lll1l1l1_opy_:
    return bstack1ll11l111l_opy_ not in [bstack1ll1_opy_ (u"ࠫࡍࡵ࡯࡬ࡔࡸࡲࡘࡺࡡࡳࡶࡨࡨࠬᢋ"), bstack1ll1_opy_ (u"ࠬࡎ࡯ࡰ࡭ࡕࡹࡳࡌࡩ࡯࡫ࡶ࡬ࡪࡪࠧᢌ"), bstack1ll1_opy_ (u"࠭ࡌࡰࡩࡆࡶࡪࡧࡴࡦࡦࠪᢍ")]
  return bstack1l1lll1l111_opy_ or bstack1l1lll1l1l1_opy_ or bstack1l1lll1l1ll_opy_
@bstack11l11llll1_opy_(class_method=False)
def bstack1l1lllll111_opy_(bstack1ll11l111l_opy_, test=None):
  bstack1l1lll11ll1_opy_ = bstack111lll1l1_opy_.on()
  if not bstack1l1lll11ll1_opy_ or bstack1ll11l111l_opy_ not in [bstack1ll1_opy_ (u"ࠧࡕࡧࡶࡸࡗࡻ࡮ࡇ࡫ࡱ࡭ࡸ࡮ࡥࡥࠩᢎ")] or test == None:
    return None
  return {
    bstack1ll1_opy_ (u"ࠨࡣࡦࡧࡪࡹࡳࡪࡤ࡬ࡰ࡮ࡺࡹࠨᢏ"): bstack1l1lll11ll1_opy_ and bstack111lllll1_opy_(threading.current_thread(), bstack1ll1_opy_ (u"ࠩࡤ࠵࠶ࡿࡐ࡭ࡣࡷࡪࡴࡸ࡭ࠨᢐ"), None) == True and bstack111lll1l1_opy_.bstack1l1ll111_opy_(test[bstack1ll1_opy_ (u"ࠪࡸࡦ࡭ࡳࠨᢑ")])
  }